<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Whispering&#39;s Blog</title>
        <subtitle>无需过去，无关未来，只有现在</subtitle>
        <icon>http://ntmydb/github.io/images/favicon.ico</icon>
        <link>http://ntmydb/github.io</link>
        <author>
          <name>Whispering</name>
        </author>
        <description>Whispering&#39;s Blog</description>
        <language>zh-CN</language>
        <pubDate>Mon, 03 Jun 2024 20:56:33 +0800</pubDate>
        <lastBuildDate>Mon, 03 Jun 2024 20:56:33 +0800</lastBuildDate>
        <category term="Whispering" />
        <category term="星铁资深测评师" />
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-6-1&amp;2/</guid>
            <title>数据结构408-6-1&amp;2</title>
            <link>http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-6-1&amp;2/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/categories/computer-science/data-structure/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <pubDate>Mon, 03 Jun 2024 20:56:33 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;图的基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图的基本概念&#34;&gt;#&lt;/a&gt; 图的基本概念&lt;/h3&gt;
&lt;h4 id=&#34;图的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图的定义&#34;&gt;#&lt;/a&gt; 图的定义&lt;/h4&gt;
&lt;p&gt;图 G 由顶点集 V 和边集 E 组成，记为 G={V,E}，其中 V (G) 表示图 G 顶点的非空有限集；E (G) 表示图 G 中顶点之间的关系 (边) 集合。若 V={&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;v_1,v_2,...,v_n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.625em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;}，则用 | V | 表示图 G 中顶点的个数，也称图 G 的阶，E={&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mo&gt;∈&lt;/mo&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mo&gt;∈&lt;/mo&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(u,v)\vert u\in V,v\in V&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;∈&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;∈&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;}，用 | E | 表示图 G 中边的条数&lt;/p&gt;
&lt;p&gt;注意：线性表可以是空表，树可以是空树，但图不可以是空，即 V 一定是非空集&lt;/p&gt;
&lt;h5 id=&#34;无向图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无向图&#34;&gt;#&lt;/a&gt; 无向图&lt;/h5&gt;
&lt;p&gt;若 E 是无向边 (简称边) 的有限集合，则图 G 为无向图。边是顶点的无序对，记为 (v,w) 或 (w,v)，因为 (v,w)=(w,v)，其中 v、w 是顶点。可以说顶点 w 和顶点 v 互为邻接点。边 (v,w) 依附于顶点 v 和 w，或者说边 (v,w) 和顶点 v、w 相关联&lt;/p&gt;
&lt;h5 id=&#34;有向图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有向图&#34;&gt;#&lt;/a&gt; 有向图&lt;/h5&gt;
&lt;p&gt;若 E 是有向边 (简称弧) 的有限集合，则图 G 为有向图。边是顶点的有序对，记为 &amp;lt; v,w&amp;gt;，其中 v 称为弧尾，w 称为弧头，&amp;lt;v,w &amp;gt; 称为顶点 v 到顶点 w 的弧，也称 v 邻接到 w，或 w 邻接自 v。&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mo mathvariant=&#34;normal&#34;&gt;≠&lt;/mo&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;&amp;lt;v,w&amp;gt;\neq &amp;lt;w,v&amp;gt;&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.5782em;vertical-align:-0.0391em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7335400000000001em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&lt;span class=&#34;mrel&#34;&gt;&lt;span class=&#34;mord vbox&#34;&gt;&lt;span class=&#34;thinbox&#34;&gt;&lt;span class=&#34;rlap&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;inner&#34;&gt;&lt;span class=&#34;mrel&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;fix&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.5782em;vertical-align:-0.0391em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7335400000000001em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;简单图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单图&#34;&gt;#&lt;/a&gt; 简单图&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;不存在重复边&lt;/li&gt;
&lt;li&gt;不存在顶点到自身的边&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;多重图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多重图&#34;&gt;#&lt;/a&gt; 多重图&lt;/h5&gt;
&lt;p&gt;图 G 中某两个节点之间边数多于 1 条，有允许顶点通过同一条边和自己关联，则 G 为多重图&lt;/p&gt;
&lt;h4 id=&#34;顶点的度-入度-出度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顶点的度-入度-出度&#34;&gt;#&lt;/a&gt; 顶点的度、入度、出度&lt;/h4&gt;
&lt;p&gt;对于无向图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顶点 v 的度是指依附于该顶点的边的条数，记为 TD (v)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于有向图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;入度是以顶点 v 为终点的有向边的数目，记为 ID (v)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;出度是以顶点 v 为起点的有向边的数目，记为 OD (v)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;顶点 v 的度等于其入度和出度的和，即 TD (v)=ID (v)+OD (v)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在具有 n 个顶点、e 条边的有向图中，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msubsup&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msubsup&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msubsup&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msubsup&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\sum\limits_{i=1}^nID(v_i)=\sum\limits_{i=1}^nOD(v_i)=e&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.329066em;vertical-align:-0.9776689999999999em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mop op-limits&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.3513970000000004em;&#34;&gt;&lt;span style=&#34;top:-2.122331em;margin-left:0em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mrel mtight&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.0000050000000003em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#34;mop op-symbol small-op&#34;&gt;∑&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.950005em;margin-left:0em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9776689999999999em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.329066em;vertical-align:-0.9776689999999999em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mop op-limits&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.3513970000000004em;&#34;&gt;&lt;span style=&#34;top:-2.122331em;margin-left:0em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mrel mtight&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.0000050000000003em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#34;mop op-symbol small-op&#34;&gt;∑&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.950005em;margin-left:0em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9776689999999999em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;顶点-顶点的关系描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顶点-顶点的关系描述&#34;&gt;#&lt;/a&gt; 顶点 - 顶点的关系描述&lt;/h4&gt;
&lt;p&gt;路径 —— 顶点&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;v_p&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.716668em;vertical-align:-0.286108em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15139200000000003em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;p&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 到顶点&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;v_q&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.716668em;vertical-align:-0.286108em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15139200000000003em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03588em;&#34;&gt;q&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 之间的一条路径是指顶点序列，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;/msub&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;v_p,v_{i_1},v_{i_2},...,v_{i_m},v_q&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.716668em;vertical-align:-0.286108em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15139200000000003em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;p&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31731428571428577em;&#34;&gt;&lt;span style=&#34;top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size3 size1 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.143em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.2501em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31731428571428577em;&#34;&gt;&lt;span style=&#34;top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size3 size1 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.143em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.2501em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.16454285714285719em;&#34;&gt;&lt;span style=&#34;top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size3 size1 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.143em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.2501em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15139200000000003em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03588em;&#34;&gt;q&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;回路 —— 第一个顶点和最后一个顶点相同的路径称为回路或环&lt;/p&gt;
&lt;p&gt;简单路径 —— 在路径序列中，顶点不重复出现的路径称为简单路径&lt;/p&gt;
&lt;p&gt;简单回路 —— 除第一个顶点和最后一个顶点外，其余顶点不重复出现的回路称为简单回路&lt;/p&gt;
&lt;p&gt;路径长度 —— 路径上边的数目&lt;/p&gt;
&lt;p&gt;点到点的距离 —— 从顶点 u 出发顶点顶点 v 的最短路径若存在，则此路径的长度称为从 u 到 v 的距离，若从 u 到 v 根本不存在路径，则记该距离为无穷&lt;/p&gt;
&lt;p&gt;无向图中，若从顶点 v 到顶点 w 有路径存在，则称 v 和 w 是连通的&lt;/p&gt;
&lt;p&gt;有向图中，若从顶点 v 到顶点 w 和从顶点 w 到顶点 v 之间都有路径，则称这两个顶点是强联通的&lt;/p&gt;
&lt;h4 id=&#34;连通图-强联通图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连通图-强联通图&#34;&gt;#&lt;/a&gt; 连通图、强联通图&lt;/h4&gt;
&lt;p&gt;若图 G 中任意两个顶点都是连通的，则称图 G 为连通图，否则称为非连通图&lt;/p&gt;
&lt;p&gt;若图中任何一对顶点都是强联通的，则称此图为强联通图&lt;/p&gt;
&lt;p&gt;常见考点：&lt;/p&gt;
&lt;p&gt;对于 n 个顶点的无向图 G&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 G 是连通图，则最少有 n-1 条边&lt;/li&gt;
&lt;li&gt;若 G 是非连通图，则最多可能有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msubsup&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msubsup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;C_{n-1}^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.1205469999999997em;vertical-align:-0.30643899999999996em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999998em;&#34;&gt;&lt;span style=&#34;top:-2.451892em;margin-left:-0.07153em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30643899999999996em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 条边&lt;/li&gt;
&lt;li&gt;若 G 是强联通图，则最少有 n 条边 (形成回路)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;子图-连通分量-强联通分量-生成树-生成森林&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子图-连通分量-强联通分量-生成树-生成森林&#34;&gt;#&lt;/a&gt; 子图、连通分量、强联通分量、生成树、生成森林&lt;/h4&gt;
&lt;p&gt;设有两个图 G=&lt;ruby&gt;V,E}&lt;rt&gt;&lt;/rt&gt; 和&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;\prime$={$V^\prime,E^\prime$&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;$G&lt;rt&gt;&lt;/rt&gt;&lt;/ruby&gt;，若&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo mathvariant=&#34;normal&#34;&gt;′&lt;/mo&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;V^\prime&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.751892em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.751892em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 是 V 的子集，且&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo mathvariant=&#34;normal&#34;&gt;′&lt;/mo&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;E^\prime&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.751892em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.751892em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 是 E 的子集，则称&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;G&lt;/mi&gt;&lt;mo mathvariant=&#34;normal&#34;&gt;′&lt;/mo&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;G^\prime&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.751892em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.751892em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 是 G 的子图&lt;/p&gt;
&lt;p&gt;若有满足&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;G&lt;/mi&gt;&lt;mo mathvariant=&#34;normal&#34;&gt;′&lt;/mo&gt;&lt;/msup&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;G&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;V(G^\prime)=V(G)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.001892em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.751892em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的子图&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;G&lt;/mi&gt;&lt;mo mathvariant=&#34;normal&#34;&gt;′&lt;/mo&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;G^\prime&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.751892em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.751892em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，则称其为 G 的生成子图&lt;/p&gt;
&lt;p&gt;无向图中极大连通子图称为连通分量（子图必须连通，且包含尽可能多的顶点和边）&lt;/p&gt;
&lt;p&gt;有向图中的极大强联通子图称为有向图的强联通分量 (子图必须强联通，同时保留尽可能多的边)&lt;/p&gt;
&lt;p&gt;连通图的生成树是包含图中全部顶点的一个极小连通子图 (边尽可能少，但要保持连通)&lt;/p&gt;
&lt;p&gt;若图中顶点数为 n，则它的生成树含有 n-1 条边，对生成树而言，若砍去它的一条边，则会变成非连通图，若加上一条边则会形成一个回路&lt;/p&gt;
&lt;p&gt;在非连通图中，连通分量的生成树构成了非连通图的生成森林&lt;/p&gt;
&lt;h4 id=&#34;边的权-带权图网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#边的权-带权图网&#34;&gt;#&lt;/a&gt; 边的权、带权图 / 网&lt;/h4&gt;
&lt;p&gt;边的权 —— 在一个图中，每条边都可以标上具有某种含义的数值，该数值称为该边的权值。&lt;/p&gt;
&lt;p&gt;带权图 / 网 —— 边上带有权值的图称为带权图，也称为网&lt;/p&gt;
&lt;p&gt;带权路径程度 —— 当图是带权图时，一条路径上所有的权值之和，称为该路径的带权路径长度&lt;/p&gt;
&lt;h4 id=&#34;几种特殊形态的图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#几种特殊形态的图&#34;&gt;#&lt;/a&gt; 几种特殊形态的图&lt;/h4&gt;
&lt;p&gt;无向完全图 —— 无向图中任意两个顶点之间都存在边&lt;/p&gt;
&lt;p&gt;若无向图的顶点数 | V|=n，则&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;mo&gt;∈&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msubsup&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msubsup&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\vert E\vert\in[0,C_n^2]=[0,\frac{n(n-1)}{2}]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;∈&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.064108em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.247em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.355em;vertical-align:-0.345em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.01em;&#34;&gt;&lt;span style=&#34;top:-2.6550000000000002em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.485em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mopen mtight&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose mtight&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.345em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;有向完全图 —— 有向图中任意两个顶点之间都存在方向相反的两条弧&lt;/p&gt;
&lt;p&gt;若有向图的顶点数 | V|=n，则&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;mo&gt;∈&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;msubsup&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msubsup&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\vert E\vert\in[0,2C_n^2]=[0,n(n-1)]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;∈&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.064108em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.247em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;边数很少的图称为稀疏图，反之称为稠密图（没有绝对的界限，一般来说 | E|&amp;lt;|V|log|V | 时，可以将 G 视为稀疏图）&lt;/p&gt;
&lt;p&gt;树 —— 不存在回路，且连通的无向图&lt;/p&gt;
&lt;p&gt;常见考点：n 个顶点的图，若 | E|&amp;gt;n-1，则一定有回路&lt;/p&gt;
&lt;p&gt;有向树 —— 一个顶点的入度为 0，其余顶点的入度均为 1 的有向图，称为有向树&lt;/p&gt;
&lt;h3 id=&#34;图的存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图的存储&#34;&gt;#&lt;/a&gt; 图的存储&lt;/h3&gt;
&lt;h4 id=&#34;邻接矩阵法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#邻接矩阵法&#34;&gt;#&lt;/a&gt; 邻接矩阵法&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define MaxVertexNum 100                    //顶点数目的最大值
typedef struct&amp;#123;
    char Vex[MaxVertexNum];                 //顶点表
    int Edge[MaxVertexNum][MaxVertexNum];   //邻接矩阵，边表
    int vexnum,arcnum;                      //图当前顶点数和边数/弧数
&amp;#125; MGraph;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;顶点中可以存更复杂的信息，可以用 bool 型或枚举型变量表示边&lt;/p&gt;
&lt;p&gt;结点数为 n 的图 G=(V,E) 的邻接矩阵 A 是 nxn 的，将 G 的顶点编号为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;v_1,v_2,...,v_n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.625em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，则&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mrow&gt;&lt;mo fence=&#34;true&#34;&gt;{&lt;/mo&gt;&lt;mtable rowspacing=&#34;0.3599999999999999em&#34; columnalign=&#34;left left&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mo&gt;∈&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;G&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mo mathvariant=&#34;normal&#34;&gt;∉&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;G&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;A[i][j]=\begin{cases}1&amp;amp;if(v_i,v_j)or&amp;lt;v_i,v_j&amp;gt;\in E(G)\\0&amp;amp;if(v_i,v_j)or&amp;lt;v_i,v_j&amp;gt;\notin E(G)\end{cases}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:3.0000299999999998em;vertical-align:-1.25003em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;&lt;span class=&#34;mopen delimcenter&#34; style=&#34;top:0em;&#34;&gt;&lt;span class=&#34;delimsizing size4&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;col-align-l&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.69em;&#34;&gt;&lt;span style=&#34;top:-3.69em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.008em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.25em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.008em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.19em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:1em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-l&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.69em;&#34;&gt;&lt;span style=&#34;top:-3.69em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.008em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.311664em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.311664em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;∈&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.25em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.008em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.311664em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.311664em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mrel&#34;&gt;∈&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord vbox&#34;&gt;&lt;span class=&#34;thinbox&#34;&gt;&lt;span class=&#34;llap&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;inner&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.05555555555555555em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;fix&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.19em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;无向图：&lt;/p&gt;
&lt;p&gt;第 i 个结点的度 = 第 i 行 (或第 i 列) 的非零元素个数&lt;/p&gt;
&lt;p&gt;有向图：&lt;/p&gt;
&lt;p&gt;第 i 个结点的出度 = 第 i 行非零元素个数&lt;/p&gt;
&lt;p&gt;第 i 个结点的入度 = 第 i 列的非零元素个数&lt;/p&gt;
&lt;p&gt;第 i 个结点的度 = 第 i 行、第 i 列的非零元素个数之和&lt;/p&gt;
&lt;p&gt;邻接矩阵求顶点度 / 出度 / 入度的时间复杂度为 O (|V|)&lt;/p&gt;
&lt;h5 id=&#34;邻接矩阵法存储带权图网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#邻接矩阵法存储带权图网&#34;&gt;#&lt;/a&gt; 邻接矩阵法存储带权图 (网)：&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define MaxVertexNum 100                           //顶点数目的最大值
#define INFINITY 0x7f7f7f7f7f                      //宏定义常量无穷
typedef char VertexType;
typedef int EdgeType;
typedef struct&amp;#123;
    VertexType Vex[MaxVertexNum];                  //顶点表
    EdgeType Edge[MaxVertexNum][MaxVertexNum];     //边的权
    int vexnum,arcnum;                             //图当前顶点数和边数/弧数
&amp;#125; MGraph;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用一个极大值表示无穷&lt;/p&gt;
&lt;h5 id=&#34;邻接矩阵的性能分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#邻接矩阵的性能分析&#34;&gt;#&lt;/a&gt; 邻接矩阵的性能分析：&lt;/h5&gt;
&lt;p&gt;空间复杂度：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;msup&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;O(\vert V\vert^2)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.064108em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;—— 只和顶点相关，和实际的边数无关&lt;/p&gt;
&lt;p&gt;适合用于存储稠密图&lt;/p&gt;
&lt;p&gt;无向图的邻接矩阵是对称矩阵，可以压缩矩阵（只存储上三角区 / 下三角区）&lt;/p&gt;
&lt;h5 id=&#34;邻接矩阵性质&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#邻接矩阵性质&#34;&gt;#&lt;/a&gt; 邻接矩阵性质&lt;/h5&gt;
&lt;p&gt;设图 G 的邻接矩阵为 A (矩阵元素为 0/1，则&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;A^n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的元素&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;A^n[i][j]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 等于由顶点 i 到顶点 j 的长度为 m 的路径的数目&lt;/p&gt;
&lt;h4 id=&#34;邻接表法顺序链式存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#邻接表法顺序链式存储&#34;&gt;#&lt;/a&gt; 邻接表法 (顺序 + 链式存储)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;//顶点
typedef struct VNode&amp;#123;
    VertexType data; //顶点信息
    ArcNode *first;  //第一条边/弧
&amp;#125;VNode,AdjList[MaxVertexNum];
//用邻接表存储的图
typedef struct &amp;#123;
    AdjList vertices;
    int vexnum,arcnum;
&amp;#125; ALGraph;
//边/弧
typedef struct ArcNode&amp;#123;
    int adjvex;           //边/弧指向哪个节点
    struct ArcNode *next; //指向下一条弧的指针
    //InfoType info;      //边权值
&amp;#125;ArcNode;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;无向图：边节点的数量是 2|E|，整体空间复杂度为 O (|V|+2|E|)&lt;/p&gt;
&lt;p&gt;有向图：边界点的数量是 | E|，整体空间复杂度为 O (|V|+|E|)&lt;/p&gt;
&lt;p&gt;图的邻接表表示方式并不唯一&lt;/p&gt;
&lt;h5 id=&#34;邻接表与邻接矩阵对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#邻接表与邻接矩阵对比&#34;&gt;#&lt;/a&gt; 邻接表与邻接矩阵对比&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;邻接表&lt;/th&gt;
&lt;th&gt;邻接矩阵&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;空间复杂度&lt;/td&gt;
&lt;td&gt;无向图 O (|V|+2|E|)，有向图 O (|V|+|E|)&lt;/td&gt;
&lt;td&gt;O(|V|*|V|)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;适合用于&lt;/td&gt;
&lt;td&gt;存储稀疏图&lt;/td&gt;
&lt;td&gt;存储稠密图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;表示方式&lt;/td&gt;
&lt;td&gt;不唯一&lt;/td&gt;
&lt;td&gt;唯一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;计算度 / 出度 / 入度&lt;/td&gt;
&lt;td&gt;计算有向图的度、入度不方便，其余很方便&lt;/td&gt;
&lt;td&gt;必须遍历对应行或列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;找相邻的边&lt;/td&gt;
&lt;td&gt;找到有向图的入边不方便，其余很方便&lt;/td&gt;
&lt;td&gt;必须遍历对应行或列&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;十字链表法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#十字链表法&#34;&gt;#&lt;/a&gt; 十字链表法&lt;/h4&gt;
&lt;p&gt;只能存储有向图&lt;/p&gt;
&lt;p&gt;十字链表法存储有向图：&lt;/p&gt;
&lt;p&gt;弧节点：tailvex+headvex+info+hlink+tlink&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tailvex：弧尾顶点编号&lt;/li&gt;
&lt;li&gt;headvex：弧头顶点编号&lt;/li&gt;
&lt;li&gt;info：权值&lt;/li&gt;
&lt;li&gt;hlink：弧头相同的下一条弧&lt;/li&gt;
&lt;li&gt;tlink：弧尾相同的下一条弧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;顶点节点 (用数组顺序存储)：data+firstin+firstout&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data：数据域&lt;/li&gt;
&lt;li&gt;fisrtin：该顶点作为弧头的第一条弧&lt;/li&gt;
&lt;li&gt;firstout：该顶点作为弧尾的第一条弧&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;十字链表法性能分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#十字链表法性能分析&#34;&gt;#&lt;/a&gt; 十字链表法性能分析&lt;/h5&gt;
&lt;p&gt;空间复杂度：O (|V|+|E|)&lt;/p&gt;
&lt;h4 id=&#34;邻接多重表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#邻接多重表&#34;&gt;#&lt;/a&gt; 邻接多重表&lt;/h4&gt;
&lt;p&gt;只能存储无向图&lt;/p&gt;
&lt;p&gt;邻接多重表存储无向图&lt;/p&gt;
&lt;p&gt;边结点：i+j+info+iLink+jLink&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;边的两个顶点编号 i，j&lt;/li&gt;
&lt;li&gt;info：权值&lt;/li&gt;
&lt;li&gt;iLink：依附于顶点 i 的下一条边&lt;/li&gt;
&lt;li&gt;jLink：依附于顶点 j 的下一条边&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;顶点结点：data+firstedge&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data：数据域&lt;/li&gt;
&lt;li&gt;firstedge：与该顶点相连的第一条边&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;空间复杂度：O (|V|+|E|)&lt;/p&gt;
&lt;p&gt;删除边、结点等操作很方便&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;邻接矩阵&lt;/th&gt;
&lt;th&gt;邻接表&lt;/th&gt;
&lt;th&gt;十字链表&lt;/th&gt;
&lt;th&gt;邻接多重表&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;空间复杂度&lt;/td&gt;
&lt;td&gt;O(|V|*|V|)&lt;/td&gt;
&lt;td&gt;无向图 O (|V|+2|E|)，有向图 O (|V|+|E|)&lt;/td&gt;
&lt;td&gt;O(|V|+|E|)&lt;/td&gt;
&lt;td&gt;O(|V|+|E|)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;找相邻边&lt;/td&gt;
&lt;td&gt;遍历对应行或列，时间复杂度为 O (|V|)&lt;/td&gt;
&lt;td&gt;找有向图的入边必须遍历整个邻接表&lt;/td&gt;
&lt;td&gt;很方便&lt;/td&gt;
&lt;td&gt;很方便&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;删除边或顶点&lt;/td&gt;
&lt;td&gt;删除边很方便，删除顶点需要大量移动数据&lt;/td&gt;
&lt;td&gt;无线图中删除边或顶点都不方便&lt;/td&gt;
&lt;td&gt;很方便&lt;/td&gt;
&lt;td&gt;很方便&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;适用于&lt;/td&gt;
&lt;td&gt;稠密图&lt;/td&gt;
&lt;td&gt;稀疏图和其他&lt;/td&gt;
&lt;td&gt;只能存有向图&lt;/td&gt;
&lt;td&gt;只能存无向图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;表示方式&lt;/td&gt;
&lt;td&gt;唯一&lt;/td&gt;
&lt;td&gt;不唯一&lt;/td&gt;
&lt;td&gt;不唯一&lt;/td&gt;
&lt;td&gt;不唯一&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;图的基本操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图的基本操作&#34;&gt;#&lt;/a&gt; 图的基本操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Adjacent (G,x,y)：判断图 G 是否存在边 &amp;lt; x,y &amp;gt; 或 (x,y)&lt;/li&gt;
&lt;li&gt;Neighbors (G,x)：列出图 G 中与结点 x 邻接的边。&lt;/li&gt;
&lt;li&gt;InsertVertex (G,x)：在图 G 中插入顶点 x&lt;/li&gt;
&lt;li&gt;DeleteVertex (G,x)：从图 G 中删除顶点 x&lt;/li&gt;
&lt;li&gt;AddEdge (G,x,y)：若无向边 (x,y) 或有向边 &amp;lt; x,y &amp;gt; 不存在，则向图 G 中添加该边&lt;/li&gt;
&lt;li&gt;RemoveEdge (G,x,y)：若无向边 (x,y) 或有向边 &amp;lt; x,y &amp;gt; 存在，则从图 G 中删除该边&lt;/li&gt;
&lt;li&gt;FirstNeighbor (G,x)(较难)：求图 G 中顶点 x 的第一个邻接点，若有则返回顶点号。若 x 没有邻接点或图中不存在 x，则返回 - 1&lt;/li&gt;
&lt;li&gt;NextNeighbor (G,x,y)(较难)：假设图 G 中顶点 y 是顶点 x 是一个邻接点，返回除 y 之外顶点 x 的下一个邻接点的顶点号，若 y 是 x 的最后一个邻接点，若 y 是 x 的最后一个邻接点，则返回 - 1&lt;/li&gt;
&lt;li&gt;Get_edge_value (G,x,y)：获取图 G 中边 (x,y) 或 &amp;lt; x,y &amp;gt; 对应的权值&lt;/li&gt;
&lt;li&gt;Set_edge_value (G,x,y,v)：设置图 G 中边 (x,y) 或 &amp;lt; x,y &amp;gt; 对应的权值为 v。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-4-3/</guid>
            <title>计算机组成原理408-4-3</title>
            <link>http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-4-3/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/categories/computer-science/principles-of-computer-composition/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" />
            <pubDate>Thu, 30 May 2024 20:48:39 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;高级语言与机器级代码之间的对应&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高级语言与机器级代码之间的对应&#34;&gt;#&lt;/a&gt; 高级语言与机器级代码之间的对应&lt;/h3&gt;
&lt;h4 id=&#34;x86汇编语言指令基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#x86汇编语言指令基础&#34;&gt;#&lt;/a&gt; x86 汇编语言指令基础&lt;/h4&gt;
&lt;p&gt;指令的作用：改变程序执行流、处理数据&lt;/p&gt;
&lt;p&gt;指令格式：操作码 + 地址码&lt;/p&gt;
&lt;p&gt;数据在哪：寄存器、主存、指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mov 指令功能：将源操作数 s 复制到目的操作 d 所指的位置
&lt;ul&gt;
&lt;li&gt;mov 目的操作数 d，源操作数&lt;/li&gt;
&lt;li&gt;mov eax,ebx：将寄存器 ebx 的值复制到寄存器 eax&lt;/li&gt;
&lt;li&gt;mov eax,5：将立即数 5 复制到寄存器 eax&lt;/li&gt;
&lt;li&gt;mov eax,dword ptr [af996h]：将内存地址 af996h 所指的 32bit 复制到寄存器 eax&lt;/li&gt;
&lt;li&gt;mov byte ptr [af996h],5：将立即数 5 复制到内存地址 af996h 所指的一字节中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指明内存读写长度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dword ptr—— 双字，32bit&lt;/li&gt;
&lt;li&gt;word ptr—— 单字，16bit&lt;/li&gt;
&lt;li&gt;byte ptr—— 字节，8bit&lt;/li&gt;
&lt;li&gt;若未指明主存读写长度，默认 32bit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;x86 架构 CPU 有哪些寄存器（每个寄存器都是 32bit）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通用寄存器：EAX,EBX,ECX,EDX（X = 未知）&lt;/li&gt;
&lt;li&gt;变址寄存器 (ESI,EDI,S=Source,D=Destination)：变址寄存器可用于线性表、字符串的处理&lt;/li&gt;
&lt;li&gt;堆栈寄存器：用于实现函数调用
&lt;ul&gt;
&lt;li&gt;堆栈基指针 (EBP)&lt;/li&gt;
&lt;li&gt;堆栈顶指针 (ESP)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用x86汇编指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用x86汇编指令&#34;&gt;#&lt;/a&gt; 常用 x86 汇编指令&lt;/h3&gt;
&lt;h4 id=&#34;算数运算指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#算数运算指令&#34;&gt;#&lt;/a&gt; 算数运算指令&lt;/h4&gt;
&lt;p&gt;算术运算：加、减、乘、除、取负数、自增 ++、自减 --&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加：add d,s (计算 d+s，结果存入 d)&lt;/li&gt;
&lt;li&gt;减：sub d,s (计算 d-s，结果存入 d)&lt;/li&gt;
&lt;li&gt;乘：mul d,s (无符号数 d*s，乘积存入 d)；imul d,s (有符号数 d*s，乘积存入 d)&lt;/li&gt;
&lt;li&gt;除：div d,s (无符号数除法 edx:eax/s，商存入 eax，余数存入 edx)；idiv d,s (有符号数除法 edx:eax/s，商存入 eax，余数存入 edx)&lt;/li&gt;
&lt;li&gt;取负数：neg d (将 d 取负数，存入 d)&lt;/li&gt;
&lt;li&gt;自增 ++：inc d (将 d++，结果存入 d)&lt;/li&gt;
&lt;li&gt;自减 --：dec d (将 d--，结果存入 d)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;逻辑运算指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑运算指令&#34;&gt;#&lt;/a&gt; 逻辑运算指令&lt;/h4&gt;
&lt;p&gt;逻辑运算：与、或、非、异或、左移、右移&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与：and d,s (将 d,s 逐位相与，结果放到 d)&lt;/li&gt;
&lt;li&gt;或：or d,s (将 d,s 逐位相或，结果放到 d)&lt;/li&gt;
&lt;li&gt;非：not d (将 d 逐位取反，结果放到 d)&lt;/li&gt;
&lt;li&gt;异或：xor d,s (将 d,s 逐位异或，结果放到 d)&lt;/li&gt;
&lt;li&gt;左移：shl d,s (将 d 逻辑左移 s 位，结果放到 d (通常 s 为常量))&lt;/li&gt;
&lt;li&gt;右移：shr d,s (将 d 逻辑右移 s 位，结果放到 d (通常 s 为常量))&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;其他指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他指令&#34;&gt;#&lt;/a&gt; 其他指令&lt;/h4&gt;
&lt;p&gt;用于实现分支结构、循环结构的指令：cmp,test,jmp,jxxx&lt;/p&gt;
&lt;p&gt;用于实现函数调用的指令：push,pop,call,ret&lt;/p&gt;
&lt;p&gt;用于实现数据转移的指令：mov&lt;/p&gt;
&lt;h3 id=&#34;att格式和intel格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#att格式和intel格式&#34;&gt;#&lt;/a&gt; AT&amp;amp;T 格式和 Intel 格式&lt;/h3&gt;
&lt;p&gt;AT&amp;amp;T 格式：Unix、Linux 的常用格式&lt;/p&gt;
&lt;p&gt;Intel 格式：Windows 的常用格式&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;AT&amp;amp;T 格式&lt;/th&gt;
&lt;th&gt;Intel 格式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;目的操作数 d、源操作数 s&lt;/td&gt;
&lt;td&gt;op s,d  注：源操作数在左，目的操作数在右&lt;/td&gt;
&lt;td&gt;op d,s  注：源操作数在右，目的操作数在左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;寄存器的表示&lt;/td&gt;
&lt;td&gt;mov % ebx,% eax  注：寄存器名之前必须加 %&lt;/td&gt;
&lt;td&gt;mov eax,ebx   注：直接写寄存器名即可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;立即数的表示&lt;/td&gt;
&lt;td&gt;mov $985,% eax  注：立即数前必须加 $&lt;/td&gt;
&lt;td&gt;mov eax,985   注：直接写数字即可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;主存地址的表示&lt;/td&gt;
&lt;td&gt;mov % eax,(af996h)   注：用小括号&lt;/td&gt;
&lt;td&gt;mov [af996h],eax  注：用中括号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;读写长度的表示&lt;/td&gt;
&lt;td&gt;movb,movw,movl,addb  注：指令后加 b,w,l 分别表示读写长度为 byte,word,dword&lt;/td&gt;
&lt;td&gt;move byte ptr,move word ptr,move dword ptr,add byte ptr  注：在主存地址前说明读写长度 byte,word,dword&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;主存地址偏移量的表示&lt;/td&gt;
&lt;td&gt;movl -8 (% ebx),% eax  注：偏移量 (基址)                            movl 4 (% ebx,% ecx,32),% eax 注：偏移量 (基址，变址，比例因子)&lt;/td&gt;
&lt;td&gt;mov eax,[ebx,-8]   注：[基址 + 偏移量]                    mov eax,[ebx+ecx*32+4]   注：[基址 + 变址 * 比例因子 + 偏移量]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;选择语句机器级表示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选择语句机器级表示&#34;&gt;#&lt;/a&gt; 选择语句机器级表示&lt;/h3&gt;
&lt;p&gt;无条件转移指令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;jmp &amp;lt;地址&amp;gt;（PC 无条件转移至 &amp;lt; 地址 &amp;gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jmp 128（&amp;lt;地址&amp;gt; 可以用常数给出）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jmp eax（&amp;lt;地址&amp;gt; 可以来源于寄存器）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jmp [999]（&amp;lt; 地址 &amp;gt; 可以来源于主存）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jmp NEXT（&amp;lt;地址&amp;gt; 可以用标号锚定）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以用标号锚定位置，如 NEXT:(特征 —— 有冒号，名字可以自己取)&lt;/p&gt;
&lt;p&gt;条件转移指令 ——jxxx&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;je &amp;lt;地址&amp;gt;（jump when equal，若 a==b 则跳转）&lt;/li&gt;
&lt;li&gt;jne &amp;lt;地址&amp;gt;（jump when not equal，若 a!=b 则跳转）&lt;/li&gt;
&lt;li&gt;jg &amp;lt;地址&amp;gt;（jump when greater than，若 a&amp;gt;b 则跳转）&lt;/li&gt;
&lt;li&gt;jge &amp;lt;地址&amp;gt;（jump when greater than or equal to，若 a&amp;gt;=b 则跳转）&lt;/li&gt;
&lt;li&gt;jl &amp;lt;地址&amp;gt;（jump when less than，若 a&amp;lt;b 则跳转）&lt;/li&gt;
&lt;li&gt;jle &amp;lt;地址&amp;gt;（jump when less than or equal to，若 a&amp;lt;=b 则跳转）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;条件转移指令一般要和 cmp 指令一起使用，cmp a,b（比较 a，b 两个数）&lt;/p&gt;
&lt;p&gt;套路：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;cmp eax,ebx #比较寄存器eax和ebx里的值
jg NEXT:    #若eax&amp;gt;ebx，则跳转到NEXT:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;//C语言
if(a&amp;gt;b)&amp;#123;
    c=a;
&amp;#125; else &amp;#123;
    c=b;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;转为汇编语言：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;mov eax,7     #假设变量a==7，存入eax
mov ebx,6     #假设变量b==6，存入ebx
cmp eax,ebx   #比较变量a和b
jg NEXT:      #若a&amp;gt;b，转移到NEXT:
mov ecx,eax   #假设用ecx存储变量c，令c=b
jmp END:      #无条件跳转到END:
NEXT:
mov ecx,eax   #假设用ecx存储变量c，令c=a
END:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;扩展：cmp 指令底层原理&lt;/p&gt;
&lt;p&gt;本质进行减法，生成 OF (溢出标志)，SF (符号标志)，ZF (零标志)，CF (进位 / 错位标志)，根据这些标志来判断哪边大，哪边小&lt;/p&gt;
&lt;h3 id=&#34;循环语句的机器级表示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环语句的机器级表示&#34;&gt;#&lt;/a&gt; 循环语句的机器级表示&lt;/h3&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;//C语言
int result=0;
for(int i=1;i&amp;lt;=100;i++)&amp;#123;
    result+=i;
&amp;#125;//求1+2+3+...+100的和
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;转为汇编语言：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;mov eax,0  #用eax保存result，初值为0
mov edx,1  #用edx保存i，初值为1
cmp edx,100  #比较i和100
jg L2      #若i&amp;gt;100,跳转到L2执行
L1:         #循环主题
add eax,edx #实现result+=i
inc edx    #inc自增指令，实现i++
cmp edx,100 #i和100
jle L1      #若i&amp;lt;=100,跳转到L1执行
L2:         #跳出循环主体
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用转移类指令实现循环，需要 4 个部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;循环前的初始化&lt;/li&gt;
&lt;li&gt;是否直接跳过循环&lt;/li&gt;
&lt;li&gt;循环主体&lt;/li&gt;
&lt;li&gt;是否继续循环&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用 loop 指令实现循环&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;for(int i=500;i&amp;gt;0;i--)&amp;#123;
    //do something
&amp;#125; //循环500轮
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;转为汇编&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;mov ecx,500 #用ecx作为循环计数器
Looptop:    #循环的开始
...
做某些处理
...
loop LoopTop #ecx--,若ecx!=0,跳转到Looptop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;理论上，用 loop 指令实现的功能一定能用条件转移指令实现&lt;/p&gt;
&lt;p&gt;使用 loop 指令可能会使代码更清晰简洁&lt;/p&gt;
&lt;p&gt;loopnz—— 当 ecx!=0 &amp;amp;&amp;amp; ZF==0 时，继续循环&lt;/p&gt;
&lt;p&gt;loopz—— 当 ecx!=0 &amp;amp;&amp;amp; ZF==1 时，继续循环&lt;/p&gt;
&lt;h3 id=&#34;函数调用机器级表示callret指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数调用机器级表示callret指令&#34;&gt;#&lt;/a&gt; 函数调用机器级表示 (Call,ret 指令)&lt;/h3&gt;
&lt;p&gt;函数的栈帧：保存函数大括号定义的局部变量、保存函数调用相关的信息&lt;/p&gt;
&lt;p&gt;当前正在执行的函数栈帧，位于栈顶&lt;/p&gt;
&lt;p&gt;x86 汇编语言的函数调用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;int add(int x,int y)&amp;#123;
    return x+y;
&amp;#125;
int caller()&amp;#123;
    int temp1=125;
    int temp2=80;
    int sum=add(temp1,temp2);
    return sum
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;转为汇编语言&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;caller:
push ebp
mov ebp,esp
sub esp,24
mov [ebp-12],125
mov [ebp-8],80
mov eax,[ebp-8]
mov [esp+4],eax
mov eax,[ebp-12]
mov esp,eax
call add
mov [ebp-4],eax
mov eax,[ebp-4]
leave
ret

add:
push ebp
mov ebp,esp
mov eax,[ebp+12]
mov eax,[ebp+8]
add eax,edx
leave
ret
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数调用指令：call &amp;lt;函数名&amp;gt;&lt;/p&gt;
&lt;p&gt;函数返回指令：ret&lt;/p&gt;
&lt;p&gt;call 指令作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 IP 旧值压栈保存 (保存在函数的栈帧顶部)&lt;/li&gt;
&lt;li&gt;设置 IP 新值，无条件转移至被调用函数的第一条指令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ret 指令作用：从函数的栈帧顶部找到 IP 旧值，将其出栈并恢复 IP 寄存器&lt;/p&gt;
&lt;h4 id=&#34;如何访问栈帧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何访问栈帧&#34;&gt;#&lt;/a&gt; 如何访问栈帧&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/06/04/b3SPwX1JpOCtV7y.png&#34; alt=&#34;函数调用栈&#34; /&gt;&lt;/p&gt;
&lt;p&gt;标记帧栈范围：EBP、ESP 寄存器&lt;/p&gt;
&lt;p&gt;ebp：指向当前栈帧的 &amp;quot;底部&amp;quot;，esp：指向当前栈帧的 &amp;quot;顶部&amp;quot;&lt;/p&gt;
&lt;p&gt;注：在 x86 系统当中，默认以 4 字节为栈的操作单位&lt;/p&gt;
&lt;p&gt;对栈帧内数据的访问，都是基于 ebp，esp 进行的&lt;/p&gt;
&lt;h5 id=&#34;访问栈帧数据push-pop指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访问栈帧数据push-pop指令&#34;&gt;#&lt;/a&gt; 访问栈帧数据：push、pop 指令&lt;/h5&gt;
&lt;p&gt;push、pop 指令实现入栈、出栈操作，x86 默认以 4 字节为单位，指令格式如下：&lt;br /&gt;
Push x—— 先让 esp 减 4，再将 x 放入&lt;/p&gt;
&lt;p&gt;Pop y—— 栈顶元素出栈写入 y，在让 esp 加 4&lt;/p&gt;
&lt;p&gt;注：x 可以是立即数、寄存器、主存地址；y 可以是寄存器、主存地址&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;push eax  #将寄存器eax的值压栈
push 985  #将立即数985压栈
push [ebp+8] #将主存地址[ebp+8]里的数据压栈
pop eax   #栈顶元素出栈，写入寄存器eax
pop [ebp+8] #栈顶元素出栈，写入主存地址[ebp+8]
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;访问栈帧数据mov指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访问栈帧数据mov指令&#34;&gt;#&lt;/a&gt; 访问栈帧数据：mov 指令&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;sub esp,12     #栈顶指针-12
mov [esp+8],eax #将eax的值复制到主存[esp+8]
mov [esp+4],985 #将985复制到主存[esp+4]
mov eax,[ebp+8] #将主存[esp+8]的值复制到eax
mov [esp],eax   #将eax的值复制到主存[esp]
add esp,8       #栈顶指针+8
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;可以用 mov 指令，结合 esp、ebp 指针访问栈帧数据&lt;/li&gt;
&lt;li&gt;可以用减法 / 加法指令，即 sub/add 修改栈顶指针 esp 的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;如何切换栈帧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何切换栈帧&#34;&gt;#&lt;/a&gt; 如何切换栈帧&lt;/h4&gt;
&lt;p&gt;call 指令作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 IP 旧值压栈保存 (效果相当于 (push IP))&lt;/li&gt;
&lt;li&gt;设置 IP 新值，无条件转移至被调用函数的第一条指令 (效果相当于 jmp add)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;add:
push ebp      #保存上一层函数的栈帧基址(esp旧值)
mov ebp,esp   #设置当前函数的栈帧基址(ebp新值)
# 这两条指令等价于enter指令
mov esp,ebp   #让esp指向当前栈帧的底部
pop ebp       #将esp所指元素出栈，写入寄存器ebp
# 这两条指令等价于leave指令
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ret 指令作用：&lt;/p&gt;
&lt;p&gt;从函数的栈帧顶部找到 IP 旧值，将其出栈并恢复 IP 寄存器&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/06/05/JPDLa5to9yvGN3Z.png&#34; alt=&#34;函数调用机器级表示&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;如何传递参数与返回值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何传递参数与返回值&#34;&gt;#&lt;/a&gt; 如何传递参数与返回值&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;栈帧底部一定是上一层栈帧基址 (ebp 旧址)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;栈帧顶部一定是返回地址 (当前函数的栈帧除外)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通常将局部变量集中存储在栈帧底部区域，C 语言中越靠前定义的局部变量越靠近栈顶&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通常将调用参数集中存储在栈帧顶部区域，参数列表中越靠前的参数越靠近栈顶&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gcc 编译器将每个栈帧大小设置为 16B 的整数倍 (当前函数的栈帧除外)，因此栈帧内可能出现空闲未使用区域&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自底向顶的栈帧包含内容：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;F:%5CBlog%5Cimages%5C%E8%AE%A1%E7%BB%84408-4-3-3.png&#34; alt=&#34;栈帧包含内容&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-4-1&amp;2/</guid>
            <title>计算机组成原理408-4-1&amp;2</title>
            <link>http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-4-1&amp;2/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/categories/computer-science/principles-of-computer-composition/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" />
            <pubDate>Thu, 30 May 2024 14:49:20 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;指令格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指令格式&#34;&gt;#&lt;/a&gt; 指令格式&lt;/h3&gt;
&lt;h4 id=&#34;操作码-地址码的概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作码-地址码的概念&#34;&gt;#&lt;/a&gt; 操作码、地址码的概念&lt;/h4&gt;
&lt;p&gt;指令 (又称机器指令)：是指示计算机执行某种操作的命令，是计算机运行的最小功能单位。&lt;/p&gt;
&lt;p&gt;一台计算机的所有指令的集合构成该机的指令系统，也称为指令集&lt;/p&gt;
&lt;p&gt;注：一台计算机只能执行自己指令系统中的指令，不能执行其他系统的指令&lt;/p&gt;
&lt;p&gt;一条指令就是机器语言的一个语句，它是一组有意义的二进制代码。&lt;/p&gt;
&lt;h5 id=&#34;指令格式-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指令格式-2&#34;&gt;#&lt;/a&gt; 指令格式&lt;/h5&gt;
&lt;p&gt;一条指令通常要包括操作码字段和地址码字段两部分&lt;/p&gt;
&lt;p&gt;操作码 (OP)：用户要干什么？(停机中断、求反求补、加减乘除、...)&lt;/p&gt;
&lt;p&gt;地址码 (A)：对谁进行操作？(不需要操作对象、需要一个操作对象、需要两个操作对象、...)&lt;/p&gt;
&lt;p&gt;一条指令可能包含 0 个、1 个、2 个、3 个、4 个地址码...&lt;/p&gt;
&lt;p&gt;根据地址码数量的不同，可以将指令分为零地址指令，一地址指令，二地址指令...&lt;/p&gt;
&lt;h4 id=&#34;根据地址码数目不同分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#根据地址码数目不同分类&#34;&gt;#&lt;/a&gt; 根据地址码数目不同分类&lt;/h4&gt;
&lt;p&gt;若指令总长度固定不变，则地址码数量越多，寻址能力越差&lt;/p&gt;
&lt;h5 id=&#34;零地址指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#零地址指令&#34;&gt;#&lt;/a&gt; 零地址指令&lt;/h5&gt;
&lt;p&gt;零地址指令：OP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需要操作数，如空操作、停机、关中断等指令&lt;/li&gt;
&lt;li&gt;堆栈计算机 (数据结构：后缀表达式)，两个操作数隐含存放在栈顶和次栈顶，计算结果压回栈顶&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;一地址指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一地址指令&#34;&gt;#&lt;/a&gt; 一地址指令&lt;/h5&gt;
&lt;p&gt;一地址指令：OP+A1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只需要单操作数，如加 1，减 1，取反，求补等。
&lt;ul&gt;
&lt;li&gt;指令含义：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;OP(A_1)\rightarrow A_1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，完成一条指令需要 3 次访存：取址 -&amp;gt; 读 A1-&amp;gt; 写 A1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;需要两个操作数，但其中一个操作数隐含在某个寄存器 (如隐含在 ACC)
&lt;ul&gt;
&lt;li&gt;指令含义：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(ACC)OP(A_1)\rightarrow ACC&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，完成一条指令需要 2 次访存：取址 -&amp;gt; 读 A1&lt;/li&gt;
&lt;li&gt;注：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;A_1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; (类比：C 语言指针) 指某个主存地址，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(A_1)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;(指针所指位置的内容) 表示&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;A_1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 所指向的地址中的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;二-三地址指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-三地址指令&#34;&gt;#&lt;/a&gt; 二、三地址指令&lt;/h5&gt;
&lt;p&gt;二地址指令：OP+A1 (目的操作数)+A2 (源操作数)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用于两个操作数的算数运算、逻辑运算相关指令
&lt;ul&gt;
&lt;li&gt;指令含义：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(A_1)OP(A_2)\rightarrow A_1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，完成一条指令需要 4 次访存：取址 -&amp;gt; 读 A1-&amp;gt; 读 A2-&amp;gt; 写 A1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三地址指令：OP+A1+A2+A3 (结果)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用于两个操作数的算数运算、逻辑运算相关指令
&lt;ul&gt;
&lt;li&gt;指令含义：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(A_1)OP(A_2)-&amp;gt;A_3&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，完成一条指令需要 4 次访存：取址 -&amp;gt; 读 A1-&amp;gt; 读 A2-&amp;gt; 写 A3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;四地址指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四地址指令&#34;&gt;#&lt;/a&gt; 四地址指令&lt;/h5&gt;
&lt;p&gt;四地址指令：OP+A1+A2+A3 (结果)+A4 (下址)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令含义：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(A_1)OP(A_2)\rightarrow A_3,A_4=&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 下一条将要执行指令的地址&lt;/li&gt;
&lt;li&gt;完成一条指令需要访存 4 次，取址 -&amp;gt; 读 A1-&amp;gt; 读 A2-&amp;gt; 写 A3&lt;/li&gt;
&lt;li&gt;正常情况下：取指令后 PC+1，指向下一条指令&lt;/li&gt;
&lt;li&gt;四地址指令：执行指令后，将 PC 的值修改为 A4 所指地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;根据指令长度分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#根据指令长度分类&#34;&gt;#&lt;/a&gt; 根据指令长度分类&lt;/h4&gt;
&lt;p&gt;指令字长：一条指令的总长度 (可能会变)&lt;/p&gt;
&lt;p&gt;机器字长：CPU 进行一次整数运算所能处理的二进制数据的位数 (通常和 ALU 直接相关)&lt;/p&gt;
&lt;p&gt;存储字长：一个存储单元中二进制代码位数 (通常和 MDR 位数相同)&lt;/p&gt;
&lt;p&gt;半字长指令、单字长指令、双字长指令 —— 指令长度是机器字长的多少倍&lt;/p&gt;
&lt;p&gt;指令字长会影响取指令所需时间。如：机器字长 = 存储字长 = 16bit，则取一条双字长指令需要两次访存&lt;/p&gt;
&lt;p&gt;定长指令字结构：指令系统中所有指令的长度都相等&lt;/p&gt;
&lt;p&gt;变长指令字结构：指令系统中所有指令的长度不等&lt;/p&gt;
&lt;h4 id=&#34;根据操作码的长度不同分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#根据操作码的长度不同分类&#34;&gt;#&lt;/a&gt; 根据操作码的长度不同分类&lt;/h4&gt;
&lt;p&gt;定长操作码：指令系统中所有指令的操作码长度都相同 (控制器的译码电路设计简单，但灵活性较低)&lt;/p&gt;
&lt;p&gt;可变长操作码：指令系统中各指令的操作码长度可变 (控制器的译码电路设计复杂，但灵活性较高)&lt;/p&gt;
&lt;p&gt;定长指令字结构 + 可变长操作码 -&amp;gt; 扩展操作码指令格式&lt;/p&gt;
&lt;h4 id=&#34;根据操作类型分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#根据操作类型分类&#34;&gt;#&lt;/a&gt; 根据操作类型分类&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;数据传送
&lt;ul&gt;
&lt;li&gt;LOAD—— 作用：把存储器 (源) 中的数据放到寄存器 (目的) 中&lt;/li&gt;
&lt;li&gt;STORE—— 作用：把寄存器中的数放到存储器中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;算数逻辑操作
&lt;ul&gt;
&lt;li&gt;算数：加、减、乘、除、增 1、减 1、求补、浮点运算、十进制运算&lt;/li&gt;
&lt;li&gt;逻辑：与、或、非、异或、位操作、位测试、位清除、位求反&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移位操作
&lt;ul&gt;
&lt;li&gt;算数移位、逻辑移位、循环移位 (带进位和不带进位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;转移操作
&lt;ul&gt;
&lt;li&gt;无条件转移 JMP&lt;/li&gt;
&lt;li&gt;条件转移 JZ：结果为 0；JO：结果溢出；JC：结果有进位&lt;/li&gt;
&lt;li&gt;调用和返回 CALL 和 RETURN&lt;/li&gt;
&lt;li&gt;陷阱 (Trap) 与陷阱指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;输入输出操作
&lt;ul&gt;
&lt;li&gt;CPU 寄存器与 IO 端口之间的数据传送 (端口即 IO 接口中的寄存器)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的来说：&lt;/p&gt;
&lt;p&gt;数据传送类：进行主存与 CPU 之间的数据传送&lt;/p&gt;
&lt;p&gt;运算类&lt;/p&gt;
&lt;p&gt;程序控制类：改变程序执行的顺序&lt;/p&gt;
&lt;p&gt;输入输出类 (I/O)：进行 CPU 与 I/O 设备之间的数据传送&lt;/p&gt;
&lt;h3 id=&#34;扩展操作码指令格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扩展操作码指令格式&#34;&gt;#&lt;/a&gt; 扩展操作码指令格式&lt;/h3&gt;
&lt;h4 id=&#34;扩展操作码举例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扩展操作码举例&#34;&gt;#&lt;/a&gt; 扩展操作码举例&lt;/h4&gt;
&lt;p&gt;指令字长为 16 位，每个地址码占 4 位：前 4 位的基本操作码字段 OP，另有 3 个 4 位长的地址字段&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;A_1,A_2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 和&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;A_3&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;4 位基本操作码若全部用于三地址指令，则有 16 条。但至少需将 1111 留作扩展操作码之间，则三地址指令为 15 条；&lt;/p&gt;
&lt;p&gt;1111 1111 留作扩展操作码之用，二地址指令为 15 条&lt;/p&gt;
&lt;p&gt;1111 1111 1111 留作扩展操作码之间，一地址指令为 15 条；&lt;/p&gt;
&lt;p&gt;零地址指令为 16 条&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在设计扩展操作码指令格式时，必须注意以下两点：
&lt;ul&gt;
&lt;li&gt;不允许短码是长码的前缀，即短操作码不能与长操作码的前面部分的代码相同&lt;/li&gt;
&lt;li&gt;各指令的操作码一定不能重复&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常情况下，对使用频率较高的指令，分配较短的操作码；对使用频率较低的指令，分配较长的操作码，从而尽可能减少指令译码和分析的时间。&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;设指令字长固定位 16 位，试设计一套指令系统满足：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;a) 有 15 条三地址指令&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;0000~1110&lt;/th&gt;
&lt;th&gt;A1&lt;/th&gt;
&lt;th&gt;A2&lt;/th&gt;
&lt;th&gt;A3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;b) 有 12 条二地址指令&lt;/td&gt;
&lt;td&gt;1111 XXXX XXXX XXXX&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1111&lt;/td&gt;
&lt;td&gt;0000-1011&lt;/td&gt;
&lt;td&gt;A1&lt;/td&gt;
&lt;td&gt;A2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c) 有 62 条一地址指令&lt;/td&gt;
&lt;td&gt;1111 11XX XXXX XXXX&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1111&lt;/td&gt;
&lt;td&gt;1100-1110|1111&lt;/td&gt;
&lt;td&gt;0000-1111|0000-1101&lt;/td&gt;
&lt;td&gt;A1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;d) 有 32 条零地址指令&lt;/td&gt;
&lt;td&gt;1111 1111 111X XXXX&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1111&lt;/td&gt;
&lt;td&gt;1111&lt;/td&gt;
&lt;td&gt;1110~1111&lt;/td&gt;
&lt;td&gt;0000-1111&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;设地址长度为 n，上一层留出 m 种状态，下一层可扩展出&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;m\times 2^n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.66666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.664392em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 中状态&lt;/p&gt;
&lt;h4 id=&#34;指令操作码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指令操作码&#34;&gt;#&lt;/a&gt; 指令操作码&lt;/h4&gt;
&lt;p&gt;操作码指出指令中该指令应该执行什么性质的操作和具有何种功能。&lt;/p&gt;
&lt;p&gt;操作码是识别指令、了解指令功能与区分操作数地址内容的组成和使用方法等的关键信息。&lt;/p&gt;
&lt;p&gt;操作码分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定长操作码：在指令字的最高位部分分配固定的若干位 (定长) 表示操作码
&lt;ul&gt;
&lt;li&gt;一般 n 位操作码的指令系统最大能够表示&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.664392em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 条指令&lt;/li&gt;
&lt;li&gt;优：定长操作码对于简化计算机硬件设计，提高指令译码和识别速度很有利&lt;/li&gt;
&lt;li&gt;缺：指令数量增加时会占用更多固定位，留给表示操作数地址的位数受限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;扩展操作码 (不定长操作码)：全部指令的操作码字段的位数不固定，且分散地放在指令字的不同位置上。
&lt;ul&gt;
&lt;li&gt;最常见的变长操作码方法是扩展操作码，使操作码的长度随地址码的减少而增加，不同地址数的指令可以具有不同长度的操作码，从而在满足需要的前提下，有效地缩短指令字长&lt;/li&gt;
&lt;li&gt;优：在指令字长有限的前提下仍保持比较丰富的指令种类&lt;/li&gt;
&lt;li&gt;缺：增加了指令译码和分析的难度，使控制器的设计复杂化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;指令寻址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指令寻址&#34;&gt;#&lt;/a&gt; 指令寻址&lt;/h3&gt;
&lt;p&gt;程序计数器 PC：指明下一条指令的存放地址&lt;/p&gt;
&lt;p&gt;每次取指令之后，PC 一定会自动加 1，指向下一条应该执行的指令 (即在执行本条指令之前，PC 已经 + 1 指向下一条指令)&lt;/p&gt;
&lt;p&gt;下一条指令地址：(PC)+1-&amp;gt;PC&lt;/p&gt;
&lt;p&gt;下一条欲执行的指令的地址 (始终由程序计数器 PC 给出)&lt;/p&gt;
&lt;p&gt;系统采用定长指令字结构时，指令字长 = 存储字长 = 16bit=2B，主存按字编址 ——(PC)+1-&amp;gt;PC&lt;/p&gt;
&lt;p&gt;系统采用定长指令字结构时，指令字长 = 存储字长 = 16bit=2B，主存按字节编址 ——(PC)+2-&amp;gt;PC&lt;/p&gt;
&lt;p&gt;系统采用变长指令字结构时，指令字长 = 存储字长 = 16bit=2B，主存按字节编址 —— 读入一个字，根据操作码判断这条指令的总字节数 n，修改 PC 的值，(PC)+n-&amp;gt;PC&lt;/p&gt;
&lt;p&gt;根据指令的类型，CPU 可能还要进行多次访存，每次读入一个字&lt;/p&gt;
&lt;p&gt;顺序寻址：(PC)+&amp;quot;1&amp;quot;(这里的 1 理解为 1 个指令字长，实际加的值会因指令长度，编址方式而不同)-&amp;gt;PC&lt;/p&gt;
&lt;p&gt;跳跃寻址：由跳转指令给出&lt;/p&gt;
&lt;h3 id=&#34;数据寻址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据寻址&#34;&gt;#&lt;/a&gt; 数据寻址&lt;/h3&gt;
&lt;p&gt;数据寻址：确定本条指令的地址码指明的真实地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相对寻址、基址寻址、变址寻址、堆栈寻址、隐含寻址、立即寻址、直接寻址、间接寻址、寄存器寻址、寄存器间接寻址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在地址码前面加上寻址方式位，指令 = 操作码 (OP)+ 寻址特征 + 形式地址 (A)&lt;/p&gt;
&lt;p&gt;求出操作数的真实地址，称为有效地址 (EA)&lt;/p&gt;
&lt;p&gt;假设指令字长 = 机器字长 = 存储字长，操作数为 3&lt;/p&gt;
&lt;h4 id=&#34;直接寻址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#直接寻址&#34;&gt;#&lt;/a&gt; 直接寻址&lt;/h4&gt;
&lt;p&gt;直接寻址：指令字中形式地址 A 就是操作数的真实地址 A，即 EA=A&lt;/p&gt;
&lt;p&gt;一条指令的执行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取指令：访存 1 次&lt;/li&gt;
&lt;li&gt;执行指令：访存 1 次&lt;/li&gt;
&lt;li&gt;暂不考虑存结果，共访存 2 次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：简单，指令执行阶段仅访问一次主存，不需要专门计算操作数的地址&lt;/p&gt;
&lt;p&gt;缺点：A 的位数决定了该指令操作数的寻址范围。操作数的地址不易修改&lt;/p&gt;
&lt;h4 id=&#34;间接寻址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#间接寻址&#34;&gt;#&lt;/a&gt; 间接寻址&lt;/h4&gt;
&lt;p&gt;间接寻址：指令的地址字段给出的形式不是操作数的真正地址，而是操作数有效地址所在的存储单元的地址，也就是操作数地址的地址，即 (EA)=A。(可分为一次间接寻址与多次间接寻址)&lt;/p&gt;
&lt;p&gt;一条指令的执行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取指令：访存 1 次&lt;/li&gt;
&lt;li&gt;执行指令：访存 2 次&lt;/li&gt;
&lt;li&gt;暂不考虑存结果，共访存 3 次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：可扩大寻址范围 (有效地址 EA 的位数大于形式地址 A 的位数)，便于编制程序 (用于间接寻址可以方便地完成子程序返回)&lt;/p&gt;
&lt;p&gt;缺点：指令在执行阶段要多次访存 (一次间址需要两次访存，多次访存需根据存储字的最高位确定几次访存)&lt;/p&gt;
&lt;h4 id=&#34;寄存器寻址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#寄存器寻址&#34;&gt;#&lt;/a&gt; 寄存器寻址&lt;/h4&gt;
&lt;p&gt;寄存器寻址：在指令中直接给出操作数所在的寄存器编号，即 EA=Ri，其操作数在由 Ri 所指的寄存器内。&lt;/p&gt;
&lt;p&gt;一条指令的执行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取指令：访存 1 次&lt;/li&gt;
&lt;li&gt;执行指令：访存 0 次&lt;/li&gt;
&lt;li&gt;暂不考虑存结果，共访存 1 次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：指令在执行阶段不访问主存，只访问寄存器，指令字短且执行速度快，支持向量 / 矩阵运算&lt;/p&gt;
&lt;p&gt;缺点：寄存器价格昂贵，计算机中寄存器个数有限&lt;/p&gt;
&lt;h4 id=&#34;寄存器间接寻址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#寄存器间接寻址&#34;&gt;#&lt;/a&gt; 寄存器间接寻址&lt;/h4&gt;
&lt;p&gt;寄存器间接寻址：寄存器 Ri 中给出的不是一个操作数，而是操作数所在主存单元的地址，即 EA=(Ri)&lt;/p&gt;
&lt;p&gt;一条指令的执行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取指令：访存 1 次&lt;/li&gt;
&lt;li&gt;执行指令：访存 1 次&lt;/li&gt;
&lt;li&gt;暂不考虑存结果，共访存 2 次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特点：比一般间接寻址更快，但指令的执行阶段需要访问主存 (因为操作数在主存中)&lt;/p&gt;
&lt;h4 id=&#34;隐含寻址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#隐含寻址&#34;&gt;#&lt;/a&gt; 隐含寻址&lt;/h4&gt;
&lt;p&gt;隐含寻址：不是明显地给出操作数的地址，而是在指令中隐含着操作数的地址&lt;/p&gt;
&lt;p&gt;例如 ADD 指令，会指明一个操作数的地址，但另一个操作数的地址隐含在操作中，即另一个操作数在 ACC 内&lt;/p&gt;
&lt;p&gt;优点：有利于缩短指令字长&lt;/p&gt;
&lt;p&gt;缺点：需要增加存储操作数或隐含地址的硬件&lt;/p&gt;
&lt;h4 id=&#34;立即寻址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#立即寻址&#34;&gt;#&lt;/a&gt; 立即寻址&lt;/h4&gt;
&lt;p&gt;立即寻址：形式地址 A 就是操作数本身，又称为立即数，一般采用补码形式。# 表示立即寻址特征&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取指令：访存 1 次&lt;/li&gt;
&lt;li&gt;执行指令：访存 0 次&lt;/li&gt;
&lt;li&gt;暂不考虑存结果，共访存 1 次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：指令执行阶段不访问主存，指令执行时间最短&lt;/p&gt;
&lt;p&gt;缺点：A 的位数限制了立即寻址的范围。如 A 的位数为 n，且立即数采用补码时，可表示数据范围为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;-2^{n-1}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;~&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^{n-1}-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;偏移寻址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#偏移寻址&#34;&gt;#&lt;/a&gt; 偏移寻址&lt;/h3&gt;
&lt;p&gt;以某个地址为起点，形式地址视为 &amp;quot;偏移量&amp;quot;&lt;/p&gt;
&lt;p&gt;三种偏移寻址区别在于偏移的起点不一样。&lt;/p&gt;
&lt;h4 id=&#34;相对寻址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相对寻址&#34;&gt;#&lt;/a&gt; 相对寻址&lt;/h4&gt;
&lt;p&gt;EA=(PC)+A，以程序计数器 PC 所指地址作为起点&lt;/p&gt;
&lt;p&gt;相对寻址：把程序计数器 PC 的内容加上指令格式中的形式地址 A 而形成操作数的有效地址，即 EA=(PC)+A，其中 A 是相对于 PC 所指地址的位移量，可正可负，补码表示&lt;/p&gt;
&lt;p&gt;优点：操作数的地址不是固定的，它随着 PC 值的变化而变化，并且与指令地址之间总是相差一个固定值，因此便于程序浮动 (一段代码在程序内部的浮动)&lt;/p&gt;
&lt;p&gt;注意：取出当前指令后，PC 会指向下一条指令，相对寻址是相对于下一条指令的偏移&lt;/p&gt;
&lt;p&gt;相对寻址广泛应用于转移指令&lt;/p&gt;
&lt;p&gt;拓展：ACC 加法指令的地址码，可采用 &amp;quot;分段&amp;quot; 方式解决，即程序段、数据段分开&lt;/p&gt;
&lt;h4 id=&#34;基址寻址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基址寻址&#34;&gt;#&lt;/a&gt; 基址寻址&lt;/h4&gt;
&lt;p&gt;EA=(BR)+A，以程序的起始存放地址作为起点&lt;/p&gt;
&lt;p&gt;基址寻址：将 CPU 中基址寄存器 (BR) 的内容加上指令格式中形式地址 A，而形成操作数的有效地址，即 EA=(BR)+A&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用专用寄存器 BR 作为基址寄存器 (操作系统中，重定位寄存器就是基址寄存器)&lt;/li&gt;
&lt;li&gt;采用通用寄存器作为基址寄存器 (在指令中指明，要将哪个通用寄存器作为基址寄存器使用)
&lt;ul&gt;
&lt;li&gt;指令 = OP + 寻址特征 + Ri+A，Ri 占几个 bit 由通用寄存器总数决定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：便于程序 &amp;quot;浮动&amp;quot;，方便实现多道程序并发运行&lt;/p&gt;
&lt;p&gt;采用基址寻址无需修改指令中的地址码&lt;/p&gt;
&lt;p&gt;拓展：程序运行前，CPU 将 BR 值修改为该程序的起始地址 (存在操作系统 PCB 中)&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基址寄存器是面向操作系统的，其内容由操作系统或管理程序确定。在程序执行过程中，基址寄存器的内部不变 (作为基地址)，形式地址可变 (作为偏移量)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当采用通用寄存器作为基址寄存器时，可由用户决定哪个寄存器作为基址寄存器，但其内容仍由操作系统决定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优点：可扩大寻址范围 (基址寄存器位数大于形式地址 A 的位数)；用户不必考虑自己的程序存于主存的哪一空间区域，故有利于多道程序设计，以及可用于编制浮动程序 (整个程序在内存里边的浮动)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;变址寻址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变址寻址&#34;&gt;#&lt;/a&gt; 变址寻址&lt;/h4&gt;
&lt;p&gt;EA=(IX)+A，程序员自己决定从哪里作为起点&lt;/p&gt;
&lt;p&gt;变址寻址：有效地址 EA 等于指令字中形式地址 A 与变址寄存器 IX 的内容相加之和，即 EA=(IX)+A，其中 IX 可为变址寄存器 (专用)，也可用通用寄存器作为变址寄存器&lt;/p&gt;
&lt;p&gt;注意：变址寄存器是面向用户的，在程序执行的过程中，变址寄存器的内容可由用户改变 (IX 作为偏移量)，形式地址 A 不变 (作为基地址)&lt;/p&gt;
&lt;p&gt;优点：在数据处理过程中，可设定为数组的首地址，不断改变变址寄存器 IX 的内容，便可很容易形成数组中任一数据的地址，特别适合编制循环程序。&lt;/p&gt;
&lt;p&gt;硬件比较数的大小：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本质上是两个数相减，通过进位 / 错位标志，零标志，符号标志，溢出标志来比较两个数的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;堆栈寻址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#堆栈寻址&#34;&gt;#&lt;/a&gt; 堆栈寻址&lt;/h3&gt;
&lt;p&gt;堆栈寻址：操作数存放在堆栈中，隐含使用堆栈指针 (SP) 作为操作数地址&lt;/p&gt;
&lt;p&gt;堆栈是存储器 (或专用寄存器) 中一块特定的按 &amp;quot;后进先出 (LIFO)&amp;quot; 原则管理的存储区，该存储区中被读 / 写单元的地址是一个特定的寄存器给出的，该寄存器称为堆栈指针 (SP)。&lt;/p&gt;
&lt;p&gt;硬堆栈：用专门的寄存器来保存堆栈信息，执行指令时无需访存&lt;/p&gt;
&lt;p&gt;软堆栈：在主存中划分出一片区域作为堆栈，执行指令时需要访存&lt;/p&gt;
&lt;p&gt;堆栈可用于函数调用时保存当前函数的相关信息&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-5-4&amp;5/</guid>
            <title>数据结构408-5-4&amp;5</title>
            <link>http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-5-4&amp;5/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/categories/computer-science/data-structure/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <pubDate>Wed, 29 May 2024 22:15:13 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;树的存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#树的存储结构&#34;&gt;#&lt;/a&gt; 树的存储结构&lt;/h3&gt;
&lt;h4 id=&#34;双亲表示法顺序存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#双亲表示法顺序存储&#34;&gt;#&lt;/a&gt; 双亲表示法 (顺序存储)&lt;/h4&gt;
&lt;p&gt;双亲表示法：每个结点中保存指向双亲的指针&lt;/p&gt;
&lt;p&gt;根节点固定存储在 0，-1 表示没有双亲&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define MAX_TREE_SIZE 100  //树中最多结点数
typedef struct&amp;#123;            //树的结点定义
    ElemType data;         //数据元素
    int parent;            //双亲位置域
&amp;#125;PTNode;
typedef struct&amp;#123;            //树的类型定义
    PTNode nodes[MAX_TREE_SIZE];  //双亲表示
    int n;                 //结点数
&amp;#125;PTree;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;新增数据元素，无需按逻辑上的次序存储&lt;/p&gt;
&lt;p&gt;优点：查指定结点的双亲很方便&lt;/p&gt;
&lt;p&gt;缺点：查指定的孩子只能从头遍历&lt;/p&gt;
&lt;p&gt;空数据导致遍历更慢&lt;/p&gt;
&lt;h4 id=&#34;孩子表示法顺序链式存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#孩子表示法顺序链式存储&#34;&gt;#&lt;/a&gt; 孩子表示法 (顺序 + 链式存储)&lt;/h4&gt;
&lt;p&gt;孩子表示法：顺序存储各个节点，每个节点中保存孩子链表头指针&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;struct CTNode&amp;#123;
    int child; //孩子节点在数据中的位置
    struct CTNode *next; //下一个孩子
&amp;#125;;
typedef struct &amp;#123;
    ElemType data;
    struct CTNode *firstChild; //第一个孩子
&amp;#125; CTBox;
typedef struct &amp;#123;
    CTBox nodes[MAX_TREES_SIZE];
    int n,r; //结点数和根的位置
&amp;#125; CTree;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;孩子兄弟表示法链式存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#孩子兄弟表示法链式存储&#34;&gt;#&lt;/a&gt; 孩子兄弟表示法 (链式存储)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;typedef struct CSNode&amp;#123;
    ElemType data; //数据域
    struct CSNode *firstchild,*nextsibling; //第一个孩子和右兄弟指针
&amp;#125;CSNode,*CSTree;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;树与二叉树相互转化&lt;/p&gt;
&lt;p&gt;优点：可以用我们熟悉的二叉树操作来处理树&lt;/p&gt;
&lt;h4 id=&#34;森林和二叉树的相互转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#森林和二叉树的相互转换&#34;&gt;#&lt;/a&gt; 森林和二叉树的相互转换&lt;/h4&gt;
&lt;p&gt;森林。森林是 m (m&amp;gt;=0) 棵互不相同的树的集合&lt;/p&gt;
&lt;p&gt;本质：用二叉链表存储森林&lt;/p&gt;
&lt;h3 id=&#34;树和森林的遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#树和森林的遍历&#34;&gt;#&lt;/a&gt; 树和森林的遍历&lt;/h3&gt;
&lt;h4 id=&#34;树的遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#树的遍历&#34;&gt;#&lt;/a&gt; 树的遍历&lt;/h4&gt;
&lt;h5 id=&#34;先根遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#先根遍历&#34;&gt;#&lt;/a&gt; 先根遍历&lt;/h5&gt;
&lt;p&gt;先根遍历：若树非空，先访问根节点，再依次对每棵子树进行先根遍历&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;//树的先根遍历
void PreOrder(TreeNode *R)&amp;#123;
    if(R!=NULL)&amp;#123;
        visit(R);
        while(R还有下一个子树T)
            PreOrder(T);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;树的先根遍历序列与这棵树对应的二叉树的先序序列相同&lt;/p&gt;
&lt;h5 id=&#34;后根遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后根遍历&#34;&gt;#&lt;/a&gt; 后根遍历&lt;/h5&gt;
&lt;p&gt;后根遍历：若树非空，先依次对每棵子树进行后根遍历，最后再访问根节点&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;//树的后根遍历
void PostOrder(TreeNode *R)&amp;#123;
    if(R!=NULL)&amp;#123;
        while(R还有下一个子树T)
            PreOrder(T);
        visit(R);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;树的后根遍历序列与这棵树对应的二叉树的中序序列相同&lt;/p&gt;
&lt;h5 id=&#34;层序遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#层序遍历&#34;&gt;#&lt;/a&gt; 层序遍历&lt;/h5&gt;
&lt;p&gt;层序遍历 (用队列实现)（广度优先遍历）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若树非空，则根节点入队&lt;/li&gt;
&lt;li&gt;若队列非空，队头元素出队并访问，同时将该元素的孩子依次入队&lt;/li&gt;
&lt;li&gt;重复第二步直到队列为空&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;森林的遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#森林的遍历&#34;&gt;#&lt;/a&gt; 森林的遍历&lt;/h4&gt;
&lt;h5 id=&#34;森林的先序遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#森林的先序遍历&#34;&gt;#&lt;/a&gt; 森林的先序遍历&lt;/h5&gt;
&lt;p&gt;先序遍历森林：&lt;/p&gt;
&lt;p&gt;若森林非空，则按如下规则进行遍历：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问第一棵树的根节点&lt;/li&gt;
&lt;li&gt;先序遍历第一棵树中根节点的子树森林&lt;/li&gt;
&lt;li&gt;先序遍历除去第一课树之后剩余的树构成的森林&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;效果上等同于依次对各个树进行先根遍历&lt;/p&gt;
&lt;h5 id=&#34;森林的中序遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#森林的中序遍历&#34;&gt;#&lt;/a&gt; 森林的中序遍历&lt;/h5&gt;
&lt;p&gt;中序遍历森林：&lt;/p&gt;
&lt;p&gt;若森林非空，则按如下规则进行遍历：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中序遍历第一棵树中根节点的子树森林&lt;/li&gt;
&lt;li&gt;访问第一棵树的根节点&lt;/li&gt;
&lt;li&gt;中序遍历除去第一课树之后剩余的树构成的森林&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;效果上等同于依次对各个树进行后根遍历&lt;/p&gt;
&lt;h3 id=&#34;哈夫曼树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哈夫曼树&#34;&gt;#&lt;/a&gt; 哈夫曼树&lt;/h3&gt;
&lt;h4 id=&#34;带权路径长度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#带权路径长度&#34;&gt;#&lt;/a&gt; 带权路径长度&lt;/h4&gt;
&lt;p&gt;结点的权：由某种现实含义的数值 (如：表示结点的重要性等)&lt;/p&gt;
&lt;p&gt;结点的带权路径长度：从树的根到结点的路径长度 (经过的边数) 与结点上权值的乘积 (比如一个在第三层的节点权值为 4，则长度为 12)&lt;/p&gt;
&lt;p&gt;树的带权路径长度：树中所有叶节点的带权路径长度之和&lt;/p&gt;
&lt;h4 id=&#34;哈夫曼树定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哈夫曼树定义&#34;&gt;#&lt;/a&gt; 哈夫曼树定义&lt;/h4&gt;
&lt;p&gt;在含有 n 个带权叶节点的二叉树中，其中带权路径长度最小的二叉树称为哈夫曼树，也称最优二叉树&lt;/p&gt;
&lt;h4 id=&#34;哈夫曼树构造&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哈夫曼树构造&#34;&gt;#&lt;/a&gt; 哈夫曼树构造&lt;/h4&gt;
&lt;p&gt;给定 n 个分别为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;w_1,w_2,...,w_n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.625em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的结点，构造哈夫曼树的算法描述如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将这 n 个结点分别作为 n 棵仅含一个结点的二叉树，构成森林 F&lt;/li&gt;
&lt;li&gt;构造一个新节点，从 F 中选取两棵根节点最小的树作为新节点的左、右子树，并将新结点的权值置为左、右子树上根节点的权值之和&lt;/li&gt;
&lt;li&gt;从 F 中删除刚才选出的两个数，同时将新得到的树加入 F 中&lt;/li&gt;
&lt;li&gt;重复第二步和第三步，直至 F 中只剩下一棵树为止&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、每个初始结点最终都成为叶节点，且权值越小的结点到根结点的路径长度越大&lt;/p&gt;
&lt;p&gt;2、哈夫曼树的结点总数为 2n-1&lt;/p&gt;
&lt;p&gt;3、哈夫曼树中不存在度为 1 的节点&lt;/p&gt;
&lt;p&gt;4、哈夫曼树并不唯一，但带权路径长度之和必然相同且为最优&lt;/p&gt;
&lt;h4 id=&#34;哈夫曼编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哈夫曼编码&#34;&gt;#&lt;/a&gt; 哈夫曼编码&lt;/h4&gt;
&lt;p&gt;固定长度编码 —— 每个字符用等长的二进制位表示&lt;/p&gt;
&lt;p&gt;可变长编码 —— 允许对不同字符用不等长的二进制位表示&lt;/p&gt;
&lt;p&gt;若没有一个编码是另一个编码的前缀，则这样的编码为前缀编码&lt;/p&gt;
&lt;p&gt;由哈夫曼树得到的哈夫曼编码 —— 字符集中每个字符作为一个叶子结点，各个字符出现的频度作为结点的权值，根据之前介绍的方法构造哈夫曼树&lt;/p&gt;
&lt;h3 id=&#34;并查集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并查集&#34;&gt;#&lt;/a&gt; 并查集&lt;/h3&gt;
&lt;p&gt;逻辑结构：集合&lt;/p&gt;
&lt;p&gt;查一个元素属于哪一个集合：从指定元素出发，一路向上，找到根节点&lt;/p&gt;
&lt;p&gt;判断两个元素是否属于同一个集合：分别查两个元素的根，判断根节点是否相同&lt;/p&gt;
&lt;p&gt;如何合并两个集合：让一棵树称为另一棵树的子树即可&lt;/p&gt;
&lt;p&gt;并查集存储结构：用一个数组即可表示集合关系&lt;/p&gt;
&lt;p&gt;集合基本操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find—— 查操作：确定一个指定元素所属集合&lt;/li&gt;
&lt;li&gt;Union—— 并操作：将两个不相交的集合合并为一个&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：并查集是逻辑结构 —— 集合的一种具体结构，只进行并和查两种基本操作&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define SIZE 13
int UFSets[SIZE]; //集合元素数组
//初始化并查集
void Initial(int S[])&amp;#123;
    for(int i=0;i&amp;lt;SIZE;i++)
        S[i]=-1;
&amp;#125;
//Find 查操作，找x所属集合(返回x所属根节点)
int Find(int S[],int x)&amp;#123;
    while(S[x]&amp;gt;=0) //循环寻找x的根
        x=S[x];
    return x; //根的S[]小于0
&amp;#125;
//Union 并操作，将两个集合合并为一个
void Union(int S[],int Root1,int Root2)&amp;#123;
    //要求Root1与Root2是不同集合
    if(Root1==Root2)
        return;
    //将根Root2连接到另一根Root1下面
    S[root2]=[Root1];
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;若结点数为 n，Find 最坏时间复杂度为 O (n)&lt;/p&gt;
&lt;p&gt;优化思路：在每次 Union 操作构建树的时候，尽可能让树不长高&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用根节点的绝对值表示树的结点总数&lt;/li&gt;
&lt;li&gt;Union 操作，让小树合并到大树&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;//Union 改进版
void Union(int S[],int Root1,int Root2)&amp;#123;
    if(Root1==Root2)
        return;
    if(S[Root1]&amp;gt;S[Root2])&amp;#123;
        S[Root1]+=S[Root2];
        S[Root2]=Root1;
    &amp;#125; else &amp;#123;
        S[Root2]+=S[Root1];
        S[Root1]=Root2;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;优化之后，Find 最坏时间复杂度为 O (logn)&lt;/p&gt;
&lt;h4 id=&#34;进一步优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进一步优化&#34;&gt;#&lt;/a&gt; 进一步优化&lt;/h4&gt;
&lt;p&gt;Find 操作的优化 (压缩路径)：&lt;/p&gt;
&lt;p&gt;压缩路径 ——Find 操作，先找到根节点，再将查找路径上的所有节点都挂到根结点下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;//Find 改进版
int Find(int S[],int x)&amp;#123;
    int root=x;
    while(S[root]&amp;gt;=0) //循环找到根
        root=S[root];
    while(x!=root)&amp;#123;   //压缩路径
        int t=S[x];   //t指向父节点
        S[x]=root;    //x直接挂到根结点下
        x=t;
    &amp;#125;
    return root;     //返回根节点编号
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-5-3/</guid>
            <title>数据结构408-5-3</title>
            <link>http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-5-3/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/categories/computer-science/data-structure/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <pubDate>Sun, 26 May 2024 21:31:24 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;二叉树的遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树的遍历&#34;&gt;#&lt;/a&gt; 二叉树的遍历&lt;/h2&gt;
&lt;p&gt;遍历：按照某种次序把所有结点都访问一遍&lt;/p&gt;
&lt;p&gt;层次遍历：基于树的层次特性确定的次序规则&lt;/p&gt;
&lt;p&gt;二叉树的递归特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要么是个空二叉树&lt;/li&gt;
&lt;li&gt;要么就是由 &amp;quot;根节点 + 左子树 + 右子树&amp;quot; 组成的二叉树&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;先序遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#先序遍历&#34;&gt;#&lt;/a&gt; 先序遍历&lt;/h3&gt;
&lt;p&gt;先序遍历：根左右&lt;/p&gt;
&lt;p&gt;先序遍历 -&amp;gt; 前缀表达式&lt;/p&gt;
&lt;p&gt;先序遍历 —— 第一次路过时访问的节点&lt;/p&gt;
&lt;p&gt;先序遍历操作过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若二叉树为空，则什么也不做&lt;/li&gt;
&lt;li&gt;若二叉树非空
&lt;ul&gt;
&lt;li&gt;访问根节点&lt;/li&gt;
&lt;li&gt;先序遍历左子树&lt;/li&gt;
&lt;li&gt;先序遍历右子树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;typedef struct BiTNode&amp;#123;
    ElemType data;
    struct BiTNode *lchild,*rchild;
&amp;#125;BiTNode,*BiTree;
//先序遍历
void PreOrder(BiTree T)&amp;#123;
    if(T!=NULL)&amp;#123;
        visit(T); //访问根节点
        PreOrder(T-&amp;gt;lchild); //递归访问左子树
        PreOrder(T-&amp;gt;rchild); //递归访问右子树
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;中序遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中序遍历&#34;&gt;#&lt;/a&gt; 中序遍历&lt;/h3&gt;
&lt;p&gt;中序遍历：左根右&lt;/p&gt;
&lt;p&gt;中序遍历 -&amp;gt; 中缀表达式 (需要加界限符)&lt;/p&gt;
&lt;p&gt;中序遍历 —— 第二次路过时访问的节点&lt;/p&gt;
&lt;p&gt;中序遍历操作过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若二叉树为空，则什么也不做&lt;/li&gt;
&lt;li&gt;若二叉树非空
&lt;ul&gt;
&lt;li&gt;中序遍历左子树&lt;/li&gt;
&lt;li&gt;访问根节点&lt;/li&gt;
&lt;li&gt;中序遍历右子树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;typedef struct BiTNode&amp;#123;
    ElemType data;
    struct BiTNode *lchild,*rchild;
&amp;#125;BiTNode,*BiTree;
//中序遍历
void InOrder(BiTree T)&amp;#123;
    if(T!=NULL)&amp;#123;
        InOrder(T-&amp;gt;lchild); //递归访问左子树
        visit(T); //访问根节点
        InOrder(T-&amp;gt;rchild); //递归访问右子树
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;后续遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后续遍历&#34;&gt;#&lt;/a&gt; 后续遍历&lt;/h3&gt;
&lt;p&gt;后续遍历：左右根&lt;/p&gt;
&lt;p&gt;后序遍历 -&amp;gt; 后缀表达式&lt;/p&gt;
&lt;p&gt;后序遍历 —— 第三次路过时访问的节点&lt;/p&gt;
&lt;p&gt;后序遍历操作过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若二叉树为空，则什么也不做&lt;/li&gt;
&lt;li&gt;若二叉树非空
&lt;ul&gt;
&lt;li&gt;后序遍历左子树&lt;/li&gt;
&lt;li&gt;后序遍历右子树&lt;/li&gt;
&lt;li&gt;访问根节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;typedef struct BiTNode&amp;#123;
    ElemType data;
    struct BiTNode *lchild,*rchild;
&amp;#125;BiTNode,*BiTree;
//后序遍历
void PostOrder(BiTree T)&amp;#123;
    if(T!=NULL)&amp;#123;
        PostOrder(T-&amp;gt;lchild); //递归访问左子树
        PostOrder(T-&amp;gt;rchild); //递归访问右子树
        visit(T); //访问根节点
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;二叉树的层次遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树的层次遍历&#34;&gt;#&lt;/a&gt; 二叉树的层次遍历&lt;/h3&gt;
&lt;p&gt;算法思想：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化一个辅助队列&lt;/li&gt;
&lt;li&gt;根节点入队&lt;/li&gt;
&lt;li&gt;若队列非空，则队头结点出队，访问该结点，并将其左、右孩子插入队尾 (如果有的话)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;void LevelOrder(BiTree T)&amp;#123;
    LinkQueue Q; //初始化辅助队列
    InitQueue(Q);
    BiTree p;
    EnQueue(Q,T); //根节点入队
    while(!IsEmpty(Q))&amp;#123; //队不空则循环
        DeQueue(Q,p); //队头节点出队
        visit(p); //访问出队节点
        if(p-&amp;gt;lchild!=NULL)
            EnQueue(Q,p-&amp;gt;lchild); //左孩子入队
        if(p-&amp;gt;rchild!=NULL)
            EnQueue(Q,p-&amp;gt;rchild); //右孩子入队
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;由遍历序列构造二叉树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#由遍历序列构造二叉树&#34;&gt;#&lt;/a&gt; 由遍历序列构造二叉树&lt;/h3&gt;
&lt;h4 id=&#34;不同二叉树的中序遍历序列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不同二叉树的中序遍历序列&#34;&gt;#&lt;/a&gt; 不同二叉树的中序遍历序列&lt;/h4&gt;
&lt;p&gt;结论：若只给出一颗二叉树的前 / 中 / 后 / 层序遍历序列中的一种，不能唯一确定一颗二叉树&lt;/p&gt;
&lt;p&gt;中序遍历序列：左子树的中序遍历序列 + 根节点 + 右子树的前序遍历序列&lt;/p&gt;
&lt;h5 id=&#34;前序中序遍历序列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前序中序遍历序列&#34;&gt;#&lt;/a&gt; 前序 + 中序遍历序列&lt;/h5&gt;
&lt;p&gt;前序遍历序列：根节点 + 左子树的前序遍历序列 + 右子树的前序遍历序列&lt;/p&gt;
&lt;h5 id=&#34;后续中序遍历序列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后续中序遍历序列&#34;&gt;#&lt;/a&gt; 后续 + 中序遍历序列&lt;/h5&gt;
&lt;p&gt;后续遍历序列：左子树的后续遍历序列 + 右子树的后续遍历序列 + 根节点&lt;/p&gt;
&lt;h5 id=&#34;层序中序遍历序列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#层序中序遍历序列&#34;&gt;#&lt;/a&gt; 层序 + 中序遍历序列&lt;/h5&gt;
&lt;p&gt;层序遍历序列：根节点 + 左子树的根 + 右子树的根&lt;/p&gt;
&lt;p&gt;Key：找到树的根节点，并根据中序序列分为左右子树，再找到左右子树的根节点&lt;/p&gt;
&lt;p&gt;结论：前序、后续、层序序列的两两组合无法唯一确定一颗二叉树&lt;/p&gt;
&lt;h3 id=&#34;线索二叉树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线索二叉树&#34;&gt;#&lt;/a&gt; 线索二叉树&lt;/h3&gt;
&lt;h4 id=&#34;线索二叉树的作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线索二叉树的作用&#34;&gt;#&lt;/a&gt; 线索二叉树的作用&lt;/h4&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从根节点出发，重新进行一次中序遍历，指针 q 记录当前访问的结点，指针 pre 记录上一个被访问的节点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如何找到指定节点 p 在中序遍历序列中的前驱&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 p==q 时，pre 为前驱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何找到 p 的中序后继&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 pre==p 时，q 为后继&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：找前驱、后继不是很方便：遍历操作必须从根开始&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中序线索二叉树：&lt;/p&gt;
&lt;p&gt;n 个结点的二叉树来说，有 n+1 个空链域，可用来记录前驱、后继的信息&lt;/p&gt;
&lt;p&gt;指向前驱、后继的指针称为 &amp;quot;线索&amp;quot;&lt;/p&gt;
&lt;h4 id=&#34;线索二叉树的存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线索二叉树的存储结构&#34;&gt;#&lt;/a&gt; 线索二叉树的存储结构&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;//二叉树的结点(链式存储)
typedef struct BiTNode&amp;#123;
    ElemType data;
    struct BiTNode *lchild,*rchild;
&amp;#125;BiTNode,*BiTree;
//线索二叉树结点
typedef struct ThreadNode&amp;#123;
    ElemType data;
    struct ThreadNode *lchild,*rchild;
    int ltag,rtag; //左、右线索标志
	//tag==0,表示指针指向孩子
    //tag==1,表示指针是线索
&amp;#125;ThreadNode,*ThreadTree;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;三种线索二叉树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三种线索二叉树&#34;&gt;#&lt;/a&gt; 三种线索二叉树&lt;/h4&gt;
&lt;p&gt;先序线索二叉树：按照先序遍历进行线索化&lt;/p&gt;
&lt;p&gt;中序线索二叉树：按照中序遍历进行线索化&lt;/p&gt;
&lt;p&gt;后序线索二叉树：按照后序遍历进行线索化&lt;/p&gt;
&lt;p&gt;先序线索二叉树 —— 线索指向先序前驱、先序后继&lt;/p&gt;
&lt;p&gt;中序线索二叉树 —— 线索指向中序前驱、中序后继&lt;/p&gt;
&lt;p&gt;后序线索二叉树 —— 线索指向后序前驱、后序后继&lt;/p&gt;
&lt;h3 id=&#34;二叉树的线索化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树的线索化&#34;&gt;#&lt;/a&gt; 二叉树的线索化&lt;/h3&gt;
&lt;p&gt;土办法找中序前驱：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;//中序遍历
void InOrder(BiTree T)&amp;#123;
    if(T!=NULL)&amp;#123;
        InOrder(T-&amp;gt;lchild); //递归遍历左子树
        visit(T);           //访问根节点
        InOrder(T-&amp;gt;rchild); //递归遍历右子树
    &amp;#125;
&amp;#125;
//访问节点q
void visit(BiTNode *q)&amp;#123;
    if(q==p)               //当前访问节点刚好是p
        final=pre;         //找到p的前驱
    else
        pre=q;             //pre指向当前访问节点
&amp;#125;
//辅助全局变量，用于查找结点p的前驱
BiTNode *p;                //p指向目标节点
BiTNode *pre=NULL;         //指向当前访问节点的前驱
BiTNode *final=NULL;       //用于记录最终结果
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;中序线索化：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;//全局变量pre，指向当前访问结点的前驱
ThreadNode *pre=NULL;

//中序线索化二叉树
void CreateInThread(ThreadTree T)&amp;#123;
    pre=NULL;             //pre初始化为NULL
    if(T!=NULL)&amp;#123;          //非空二叉树才能线索化
        InThread(T);      //中序线索化二叉树
        if(pre-&amp;gt;rchild==NULL)
            pre-&amp;gt;rtag=1;  //处理遍历的最后一个节点
    &amp;#125;
&amp;#125;
//线索二叉树结点
typedef struct ThreadNode&amp;#123;
    ElemType data;
    struct ThreadNode *lchild,*rchild;
    int ltag,rtag; //左、右线索标志
	//tag==0,表示指针指向孩子
    //tag==1,表示指针是线索
&amp;#125;ThreadNode,*ThreadTree;
void InThread(ThreadTree T)&amp;#123;
    if(T!=NULL)&amp;#123;
        InThread(T-&amp;gt;lchild); //中序遍历左子树
        visit(T);            //访问根节点
        InThread(T-&amp;gt;rchild); //中序遍历右子树
    &amp;#125;
&amp;#125;
void visit(ThreadNode *q)&amp;#123;
    if(q-&amp;gt;lchild==NULL)&amp;#123;     //左子树为空
        q-&amp;gt;lchild=pre;
        q-&amp;gt;ltag=1;
    &amp;#125;
    if(pre!=NULL &amp;amp;&amp;amp; pre-&amp;gt;rchild==NULL)&amp;#123;
        pre-&amp;gt;rchild=q;       //建立前驱节点的后继线索
        pre-&amp;gt;rtag=1;
    &amp;#125;
    pre=q;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后要检查 pre 的 rchild 是否为 NULL，如果是，则令 rtag=1&lt;/p&gt;
&lt;p&gt;先序线索化：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;//全局变量pre，指向当前访问结点的前驱
ThreadNode *pre=NULL;

void CreatePreThread(ThreadTree T)&amp;#123;
    pre=NULL;             //pre初始化为NULL
    if(T!=NULL)&amp;#123;          //非空二叉树才能线索化
        PreThread(T);      //先序线索化二叉树
        if(pre-&amp;gt;rchild==NULL)
            pre-&amp;gt;rtag=1;  //处理遍历的最后一个节点
    &amp;#125;
&amp;#125;

void PreThread(ThreadTree T)&amp;#123;
    if(T!=NULL)&amp;#123;
        visit(T);      //先处理根节点
        if(T-&amp;gt;ltag==0)
            PreThread(T-&amp;gt;lchild);
        PreThread(T-&amp;gt;rchild);
    &amp;#125;
&amp;#125;
void visit(ThreadNode *q)&amp;#123;
    if(q-&amp;gt;lchild==NULL)&amp;#123; //左子树为空，建立前驱线索
        q-&amp;gt;lchild=pre;
        q-&amp;gt;ltag=1;
    &amp;#125;
    if(pre!=NULL &amp;amp;&amp;amp; pre-&amp;gt;rchild==NULL)&amp;#123;
        pre-&amp;gt;rchild=q;       //建立前驱节点的后继线索
        pre-&amp;gt;rtag=1;
    &amp;#125;
    pre=q;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;后续线索化：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;//全局变量pre，指向当前访问结点的前驱
ThreadNode *pre=NULL;

void CreatePostThread(ThreadTree T)&amp;#123;
    pre=NULL;             //pre初始化为NULL
    if(T!=NULL)&amp;#123;          //非空二叉树才能线索化
        PreThread(T);      //中序线索化二叉树
        if(pre-&amp;gt;rchild==NULL)
            pre-&amp;gt;rtag=1;  //处理遍历的最后一个节点
    &amp;#125;
&amp;#125;

void PostThread(ThreadTree T)&amp;#123;
    if(T!=NULL)&amp;#123;
        PostThread(T-&amp;gt;lchild);
        PostThread(T-&amp;gt;rchild);
        visit(T);
    &amp;#125;
&amp;#125;
void visit(ThreadNode *q)&amp;#123;
    if(q-&amp;gt;lchild==NULL)&amp;#123; //左子树为空，建立前驱线索
        q-&amp;gt;lchild=pre;
        q-&amp;gt;ltag=1;
    &amp;#125;
    if(pre!=NULL &amp;amp;&amp;amp; pre-&amp;gt;rchild==NULL)&amp;#123;
        pre-&amp;gt;rchild=q;       //建立前驱节点的后继线索
        pre-&amp;gt;rtag=1;
    &amp;#125;
    pre=q;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;在线索二叉树中找前驱后继&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在线索二叉树中找前驱后继&#34;&gt;#&lt;/a&gt; 在线索二叉树中找前驱后继&lt;/h3&gt;
&lt;p&gt;中序二叉树找中序后继：&lt;/p&gt;
&lt;p&gt;寻找指定节点 * p 的后继&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;若 p-&amp;gt;rtag==1，则 next=p-&amp;gt;rchild&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若 p-&amp;gt;rtag==0，则 next=p 的右子树最左下节点&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;寻找指定节点 * p 的前驱&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 p-&amp;gt;ltag==1，则 pre=p-&amp;gt;lchild&lt;/li&gt;
&lt;li&gt;若 p-&amp;gt;ltag==0，则 pre=p 的左子树最右下节点&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;//找到以p为根的子树中，第一个被中序遍历的节点
ThreadNode *FirstNode(ThreadNode *p)&amp;#123;
    //循环找最左下节点(不一定是叶节点)
    while(p-&amp;gt;ltag==0)
        p=p-&amp;gt;lchild;
    return p;
&amp;#125;
//找到以p为根的子树中，最后一个中序遍历的节点
ThreadNode *LastNode(ThreadNode *p)&amp;#123;
    //循环找最右下节点(不一定是叶节点)
    while(p-&amp;gt;rtag==0)
        p=p-&amp;gt;rchild;
    return p;
&amp;#125;
//在中序线索二叉树中找到结点p的后继节点
ThreadNode *NextNode(ThreadNode *p)&amp;#123;
    //右子树最左下节点
    if(p-&amp;gt;rtag==0)
        return FirstNode(p-&amp;gt;rchild);
    else //rtag==1
    	return p-&amp;gt;rchild;
&amp;#125;
//在中序线索二叉树中找到结点p的前驱节点
ThreadNode *PreNode(ThreadNode *p)&amp;#123;
    //右子树最左下节点
    if(p-&amp;gt;ltag==0)
        return LastNode(p-&amp;gt;lchild);
    else //rtag==1
    	return p-&amp;gt;rchild;
&amp;#125;
//对中序线索二叉树进行中序遍历(利用线索实现非递归算法)
void InOrder(ThreadNode *T)&amp;#123;
    for(ThreadNode *p=FirstNode(T);p!=NULL;p=NextNode(p))
        visit(p);
&amp;#125;
//对中序线索二叉树进行逆向中序遍历(利用线索实现非递归算法)
void RevOrder(ThreadNode *T)&amp;#123;
    for(ThreadNode *p=LastNode(T);p!=NULL;p=PreNode(p))
        visit(p);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先序线索二叉树找先序前驱：&lt;/p&gt;
&lt;p&gt;寻找指定节点 * p 的前驱&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 p-&amp;gt;ltag==1，则 next=p-&amp;gt;lchild&lt;/li&gt;
&lt;li&gt;若 p-&amp;gt;ltag==0
&lt;ul&gt;
&lt;li&gt;如果能找到 p 的父节点，且 p 是左孩子，p 的父节点为其前驱&lt;/li&gt;
&lt;li&gt;如果能找到 p 的父节点，且 p 是右孩子，其左兄弟为空，p 的父节点为其前驱&lt;/li&gt;
&lt;li&gt;如果能找到 p 的父节点，且 p 是右孩子，其左兄弟非空，p 的前驱为左兄弟子树最后一个被先序遍历的节点&lt;/li&gt;
&lt;li&gt;如果 p 是根节点，则 p 没有前驱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后续线索二叉树找后续前驱：&lt;/p&gt;
&lt;p&gt;寻找指定节点 * p 的前驱&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 p-&amp;gt;ltag==1，则 pre=p-&amp;gt;lchild&lt;/li&gt;
&lt;li&gt;若 p-&amp;gt;ltag==0
&lt;ul&gt;
&lt;li&gt;如果能找到 p 的父节点，且 p 是右孩子，p 的父节点为其前驱&lt;/li&gt;
&lt;li&gt;如果能找到 p 的父节点，且 p 是左孩子，其右兄弟为空，p 的父节点为其前驱&lt;/li&gt;
&lt;li&gt;如果能找到 p 的父节点，且 p 是左孩子，其右兄弟非空，p 的前驱为右兄弟子树第一个被后序遍历的节点&lt;/li&gt;
&lt;li&gt;如果 p 是根节点，则 p 没有后续后继&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-3-5&amp;6/</guid>
            <title>计算机组成原理408-3-5&amp;6</title>
            <link>http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-3-5&amp;6/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/categories/computer-science/principles-of-computer-composition/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" />
            <pubDate>Sun, 26 May 2024 17:01:20 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;cache的基本概念和原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cache的基本概念和原理&#34;&gt;#&lt;/a&gt; Cache 的基本概念和原理&lt;/h3&gt;
&lt;h4 id=&#34;存储系统存在问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储系统存在问题&#34;&gt;#&lt;/a&gt; 存储系统存在问题&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;双端口 RAM、多模块存储器提高存储器的工作速度&lt;/li&gt;
&lt;li&gt;优化后速度与 CPU 差距依然很大 -&amp;gt; 更高速的存储单元设计 -&amp;gt; 存储器价格上升，容量下降&lt;/li&gt;
&lt;li&gt;程序访问的局部性原理 -&amp;gt; 存储体系的改善 &amp;quot;Cache - 主存&amp;quot; 层次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：实际上，Cache 被集成在 CPU 内部，Cache 用 SRAM 实现，速度快，成本高&lt;/p&gt;
&lt;h4 id=&#34;局部性原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#局部性原理&#34;&gt;#&lt;/a&gt; 局部性原理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;空间局部性：在最近的未来要用到的信息 (指令和数据)，很可能与现在正在使用的信息在存储空间上是邻近的
&lt;ul&gt;
&lt;li&gt;Eg：数组元素、顺序执行的指令代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;时间局部性：在最近的未来要用到的信息，很可能是现在正在使用的信息
&lt;ul&gt;
&lt;li&gt;Eg：循环结构的指令代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于局部性原理，可以把 CPU 目前访问的地址 &amp;quot;周围&amp;quot; 的部分数据放到 Cache 中&lt;/p&gt;
&lt;h4 id=&#34;性能分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#性能分析&#34;&gt;#&lt;/a&gt; 性能分析&lt;/h4&gt;
&lt;p&gt;设&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;t_c&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76508em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;c&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 为访问一次 Cache 所需时间，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;t_m&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76508em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 为访问一次主存所需时间&lt;/p&gt;
&lt;p&gt;命中率 H：CPU 欲访问的信息已在 Cache 中的比率&lt;/p&gt;
&lt;p&gt;缺失 (未命中) 率 M=1-H&lt;/p&gt;
&lt;p&gt;Cache - 主存 系统的平均访问时间 t 为：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;t=Ht_c+(1-H)(t_c+t_m)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.61508em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.08125em;&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;c&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.08125em;&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;c&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;(先访问 Cache，若 Cache 未命中再访问主存)&lt;/p&gt;
&lt;p&gt;或者&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;t=Ht_c+(1-H)t_m&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.61508em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.08125em;&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;c&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.08125em;&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; (同时访问 Cache 和主存，若 Cache 命中则立即停止访问主存)&lt;/p&gt;
&lt;h5 id=&#34;例题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#例题&#34;&gt;#&lt;/a&gt; 例题：&lt;/h5&gt;
&lt;p&gt;假设 Cache 的速度是主存的 5 倍，且 Cache 的命中率为 95%，则采用 Cache 后，存储器的性能提高多少？(设 Cache 和主存同时被访问，若 Cache 命中则中断访问主存)？&lt;/p&gt;
&lt;p&gt;设 Cache 的存取周期为 t，则主存的存取周期为 5t&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 Cache 和主存同时被访问，命中时访问时间为 t，未命中时，访问时间为 5t，平均访问时间为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;0.95&lt;/mn&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;0.05&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1.2&lt;/mn&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;0.95t+0.05*5t=1.2t&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，故性能为原来的&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mstyle displaystyle=&#34;true&#34; scriptlevel=&#34;0&#34;&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mn&gt;1.2&lt;/mn&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mstyle&gt;&lt;mo&gt;≈&lt;/mo&gt;&lt;mn&gt;4.17&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\dfrac{5t}{1.2t}\approx4.17&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.00744em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.32144em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≈&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 倍&lt;/li&gt;
&lt;li&gt;若先访问 Cache 再访问主存，命中时访问时间为 t，未命中时，访问时间为 6t，平均访问时间为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0.95&lt;/mn&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;0.05&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mn&gt;6&lt;/mn&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1.25&lt;/mn&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;T_a=0.95t+0.05*6t=1.25t&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，故性能为原来的&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mstyle displaystyle=&#34;true&#34; scriptlevel=&#34;0&#34;&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mn&gt;1.25&lt;/mn&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mstyle&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\dfrac{5t}{1.25t}=4&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.00744em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.32144em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 倍&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;有待解决的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有待解决的问题&#34;&gt;#&lt;/a&gt; 有待解决的问题&lt;/h4&gt;
&lt;p&gt;基于局部性原理，如何界定周围？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将主存的存储空间分块，如：每 1KB 一块。主存与 Cache 之间以块为单位进行数据交换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注：操作系统中，通常将主存的 &amp;quot;一个块&amp;quot; 也称为 &amp;quot;一个页 / 页面 / 页框&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cache 中的块也称行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注：每次被访问的主存块，一定会被立即调入 Cache&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cache与主存的映射方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cache与主存的映射方式&#34;&gt;#&lt;/a&gt; Cache 与主存的映射方式&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/27/WMGAQa8hqvuDzTx.png&#34; alt=&#34;映射方式总览&#34; /&gt;&lt;/p&gt;
&lt;p&gt;区分 Cache 中存放哪个块：&lt;/p&gt;
&lt;p&gt;给每个 Cache 块增加一个标记与有效位，当有效位为 1 时，标记中指向的即为主存块，当有效位为 0 时，标记无效&lt;/p&gt;
&lt;h4 id=&#34;全相联映射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全相联映射&#34;&gt;#&lt;/a&gt; 全相联映射&lt;/h4&gt;
&lt;p&gt;主存块可以放在 Cache 的任意位置&lt;/p&gt;
&lt;p&gt;假设某个计算机的主存地址空间大小为 256MB，按字节编址，其数据 Cache 有 8 个 Cache 行 (即 Cache 块，与主存块大小相等)，行长为 64B&lt;/p&gt;
&lt;p&gt;主存块号 (22 位)+ 块内地址 (6 位)&lt;/p&gt;
&lt;p&gt;例：CPU 访问 1...1101 (主存块号) 001110 (块内地址)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主存地址的前 22 位，对比 Cache 中所有块的标记；&lt;/li&gt;
&lt;li&gt;若标记匹配且有效位为 1，则 Cache 命中，访问块内地址位 001110 的单元&lt;/li&gt;
&lt;li&gt;若未命中或有效位为 0，则正常访问主存&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;直接映射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#直接映射&#34;&gt;#&lt;/a&gt; 直接映射&lt;/h4&gt;
&lt;p&gt;每个主存块只能放在一个特定的位置：Cache 块号 = 主存块号 % Cache 总块数&lt;/p&gt;
&lt;p&gt;假设某个计算机的主存地址空间大小为 256MB，按字节编址，其数据 Cache 有 8 个 Cache 行 (即 Cache 块，与主存块大小相等)，行长为 64B&lt;/p&gt;
&lt;p&gt;主存块号 (22 位)+ 块内地址 (6 位)&lt;/p&gt;
&lt;p&gt;主存块在 Cache 中的位置 = 主存块号 % Cache 总块数&lt;/p&gt;
&lt;p&gt;优化：若 Cache 总块数为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.664392em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，则主存块号末尾 n 位直接反映它在 Cache 中的位置，将主存块号的其余位作为标记即可&lt;/p&gt;
&lt;p&gt;缺点：其他地方有空闲 Cache 块，但是有些主存块无法使用空闲 Cache 块&lt;/p&gt;
&lt;p&gt;例：CPU 访问 1...1101 (主存块号) 001110 (块内地址)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据主存块号后三位确定 Cache 行&lt;/li&gt;
&lt;li&gt;若主存块号的前 19 位与 Cache 标记匹配且有效位为 1，则 Cache 命中，访问块内地址为 001110 的单元&lt;/li&gt;
&lt;li&gt;若未命中或有效位为 0，则正常访问主存&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;组相联映射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组相联映射&#34;&gt;#&lt;/a&gt; 组相联映射&lt;/h4&gt;
&lt;p&gt;Cache 块分为若干组，每个主存块可放到特定分组的任意一个位置，组号 = 主存块号 % 分组数&lt;/p&gt;
&lt;p&gt;假设某个计算机的主存地址空间大小为 256MB，按字节编址，其数据 Cache 有 8 个 Cache 行 (即 Cache 块，与主存块大小相等)，行长为 64B&lt;/p&gt;
&lt;p&gt;主存块号 (22 位)+ 块内地址 (6 位)&lt;/p&gt;
&lt;p&gt;优化：若分组数为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.664392em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，则主存块号末尾 n 位直接反映分组组数，将主存块号其余位作为标记&lt;/p&gt;
&lt;p&gt;例：假设使用了 2 路组相联映射 ——2 块为一组，分四组；CPU 访问 1...1101 (主存块号) 001110 (块内地址)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据主存块号的后 2 位确定所属分组号&lt;/li&gt;
&lt;li&gt;若主存块号的前 20 位与分组内的某个标记匹配且有效位为 1，则 Cache 命中，访问块内地址为 001110 的单元&lt;/li&gt;
&lt;li&gt;若未命中或有效位为 0，则正常访问主存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cache的替换算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cache的替换算法&#34;&gt;#&lt;/a&gt; Cache 的替换算法&lt;/h3&gt;
&lt;p&gt;全相联映射：Cache 完全满了才需要替换，需要在全局中选择替换哪一块&lt;/p&gt;
&lt;p&gt;直接映射：如果对应位置非空，则毫无选择地直接替换&lt;/p&gt;
&lt;p&gt;组相联映射：分组内满了才需要替换，需要在分组内选择替换哪一块&lt;/p&gt;
&lt;h4 id=&#34;随机算法rand&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#随机算法rand&#34;&gt;#&lt;/a&gt; 随机算法 (RAND)&lt;/h4&gt;
&lt;p&gt;若 Cache 已满，则随机选择一块替换&lt;/p&gt;
&lt;p&gt;随机算法 —— 实现简单，但完全没有考虑到局部性原理，命中率低，实际效果很不稳定&lt;/p&gt;
&lt;h4 id=&#34;先进先出算法fifo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#先进先出算法fifo&#34;&gt;#&lt;/a&gt; 先进先出算法 (FIFO)&lt;/h4&gt;
&lt;p&gt;若 Cache 已满，则替换最先被调入 Cache 的块&lt;/p&gt;
&lt;p&gt;先进先出算法 —— 实现简单，最开始按 #0#1#2#3 放入 Cache，之后轮流替换 #0#1#2#3FIFO 依然没考虑局部性原理，最先被调入 Cache 的块也有可能是被最频繁访问的&lt;/p&gt;
&lt;p&gt;抖动现象：频繁的换入传出现象 (刚被替换的块很快又被调入)&lt;/p&gt;
&lt;h4 id=&#34;近期最少使用lru&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#近期最少使用lru&#34;&gt;#&lt;/a&gt; 近期最少使用 (LRU)&lt;/h4&gt;
&lt;p&gt;为每一个 Cache 块设置一个计数器，用于记录每个 Cache 块已经有多久没有被访问了。当 Cache 满后，替换计数器最大的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命中时，所命中的行的计数器清零，比其低的计数器加 1，其余不变&lt;/li&gt;
&lt;li&gt;未命中且还有空闲行时，新装入的行计数器置 0，其余非空闲行全加 1&lt;/li&gt;
&lt;li&gt;未命中且无空闲行时，计数器最大的行的信息块被淘汰，新装行的块的计数器置零，其余全加 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cache 块的总数 =&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.664392em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，则计数器只需 n 位。且 Cache 装满后所有计数器的值一定不重复&lt;/p&gt;
&lt;p&gt;LRU 算法 —— 基于局部性原理，近期被访问过的主存储块，在不久的将来也很有可能被再次访问，因此淘汰最久没被访问过的块是合理的。LRU 算法的实际运行效果优秀，Cache 命中率高&lt;/p&gt;
&lt;p&gt;若频繁访问的主存快数量 &amp;gt; Cache 行的数量，则有可能发生 &amp;quot;抖动&amp;quot;&lt;/p&gt;
&lt;h4 id=&#34;最近不经常使用lfu&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最近不经常使用lfu&#34;&gt;#&lt;/a&gt; 最近不经常使用 (LFU)&lt;/h4&gt;
&lt;p&gt;为每一个 Cache 块设置一个计数器，用于记录每个 Cache 块被访问过几次。当 Cache 满后，替换计数器最小的&lt;/p&gt;
&lt;p&gt;新调入的块计数器为 0，之后每被访问一次计数器 + 1。需要替换时，选择计数器最小的一行&lt;/p&gt;
&lt;p&gt;若有多个计数器最小的行，可按行号递增或 FIFO 策略进行选择&lt;/p&gt;
&lt;p&gt;LFU 算法 —— 曾经被经常访问的主存块在未来不一定会用到 (如：微信视频聊天相关块)，并没有很好地遵循局部性原理，因此实际运行效果不如 LRU&lt;/p&gt;
&lt;h3 id=&#34;cache的写策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cache的写策略&#34;&gt;#&lt;/a&gt; Cache 的写策略&lt;/h3&gt;
&lt;h4 id=&#34;写命中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写命中&#34;&gt;#&lt;/a&gt; 写命中&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;写回法
&lt;ul&gt;
&lt;li&gt;当 CPU 对 Cache 命中时，只修改 Cache 的内容，而不立即写入主存，只有当此块被换出时才写回主存&lt;/li&gt;
&lt;li&gt;未被修改的块不必写回，设置脏位表示是否被修改&lt;/li&gt;
&lt;li&gt;减少了访存次数，但存在数据不一致的隐患&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全写法
&lt;ul&gt;
&lt;li&gt;当 CPU 对 Cache 命中时，必须把数据同时写入 Cache 和主存，一般使用写缓冲&lt;/li&gt;
&lt;li&gt;Cache 块被替换时无需写回&lt;/li&gt;
&lt;li&gt;访存次数增加，速度变慢，但更能保证数据一致性&lt;/li&gt;
&lt;li&gt;写缓冲：SRAM 实现的 FIFO 队列 (在专门的控制电路控制下逐一写回)&lt;/li&gt;
&lt;li&gt;使用写缓冲，CPU 写的速度很快，若写操作不频繁，则效果很好。若写操作很频繁，可能会因为写缓冲饱和而发生阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;写不命中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写不命中&#34;&gt;#&lt;/a&gt; 写不命中&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;写分配法
&lt;ul&gt;
&lt;li&gt;当 CPU 对 Cache 写不命中时，把主存中的块调入 Cache，在 Cache 中修改。通常搭配写回法使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非写分配法
&lt;ul&gt;
&lt;li&gt;当 CPU 对 Cache 写不命中时只写入主存，不调入 Cache。搭配全写法使用&lt;/li&gt;
&lt;li&gt;只有读未命中时才调入 Cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多级cache&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多级cache&#34;&gt;#&lt;/a&gt; 多级 Cache&lt;/h4&gt;
&lt;p&gt;现代计算机常采用多级 Cache&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;离 CPU 越近的速度越快，容量越小&lt;/li&gt;
&lt;li&gt;离 CPU 越远的速度越慢，容量越大&lt;/li&gt;
&lt;li&gt;各级 Cache 之间常采用 &amp;quot;全写法 + 非写分配法&amp;quot;&lt;/li&gt;
&lt;li&gt;Cache - 主存之间常采用 &amp;quot;写回法 + 写分配法&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;页式存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页式存储器&#34;&gt;#&lt;/a&gt; 页式存储器&lt;/h3&gt;
&lt;p&gt;4KB 的程序被分为 4 个页，每个页面的大小和物理块的大小相同&lt;/p&gt;
&lt;p&gt;页式存储系统：一个程序 (进程) 在逻辑上被分为了若干个大小相等的 &amp;quot;页面&amp;quot;，&amp;quot;页面&amp;quot; 大小与 &amp;quot;块&amp;quot; 的大小相同。每个页面可以离散地放入不同的主存块中。&lt;/p&gt;
&lt;p&gt;逻辑地址 (虚地址)：程序员视角看到的地址 (逻辑地址 = 逻辑页号 + 页内地址)&lt;/p&gt;
&lt;p&gt;物理地址 (实地址)：实际在主存中的地址&lt;/p&gt;
&lt;p&gt;页表 (数据在主存中)：将逻辑页号映射为物理主存块号&lt;/p&gt;
&lt;p&gt;CPU 执行的机器指令中，使用的是逻辑地址，因此需要页表将逻辑地址转为物理地址&lt;/p&gt;
&lt;p&gt;页表作用：记录每个逻辑页面存放在哪个主存块中&lt;/p&gt;
&lt;p&gt;地址变换过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将逻辑地址拆分为逻辑页号 + 页内地址&lt;/li&gt;
&lt;li&gt;逻辑页号送入页表基址寄存器 (指明了页表在主存中的存放地址)，根据页表和逻辑页号获取主存块号&lt;/li&gt;
&lt;li&gt;主存块号愚页内地址成为物理地址去访问主存&lt;/li&gt;
&lt;li&gt;将近期访问的页表项放入更高速的存储器，可加快地址变换的速度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;地址变换过程 (加入快表 (TLB))：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将逻辑地址拆分为逻辑页号 + 页内地址&lt;/li&gt;
&lt;li&gt;逻辑页号先在快表内查询，若命中，直接得到物理地址，若未命中，走上面正常地址变换过程&lt;/li&gt;
&lt;li&gt;注意区别：快表中存储的是页表项的副本，Cache 中存储的是主存块的副本&lt;/li&gt;
&lt;li&gt;快表是一种 &amp;quot;相联存储器&amp;quot;，可以按内容寻访&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;虚拟存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟存储器&#34;&gt;#&lt;/a&gt; 虚拟存储器&lt;/h3&gt;
&lt;p&gt;该部分内容详细请看操作系统&lt;/p&gt;
&lt;h4 id=&#34;页式虚拟存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页式虚拟存储器&#34;&gt;#&lt;/a&gt; 页式虚拟存储器&lt;/h4&gt;
&lt;p&gt;操作系统将程序分为页，新页表如下：&lt;/p&gt;
&lt;p&gt;逻辑页号 + 主存块号 + 外存块号 + 有效位 + 访问位 + 脏位&lt;/p&gt;
&lt;p&gt;有效位为 1 时，表示该页已经被调入内存，反之则没有&lt;/p&gt;
&lt;p&gt;外存块号即将外存分块后的块号&lt;/p&gt;
&lt;p&gt;访问位是为了实现页面替换增加的，访问位即一段时间内每一个页面被访问了多少次，依据此可以实现 LFU 算法&lt;/p&gt;
&lt;p&gt;脏位即该页面是否有数据修改&lt;/p&gt;
&lt;p&gt;操作系统决定哪些页面调入主存，硬件决定哪些主存调入 Cache&lt;/p&gt;
&lt;h4 id=&#34;段式存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段式存储器&#34;&gt;#&lt;/a&gt; 段式存储器&lt;/h4&gt;
&lt;p&gt;段式存储器 —— 按照功能模块拆分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其余部分与页式存储器相似，只是页被替换成了段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;段页式存储器 —— 按照功能模块划分，再将各个段分页：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把程序按逻辑结构分段，每段再划分为固定大小的页&lt;/li&gt;
&lt;li&gt;主存空间也划分为大小相等的页&lt;/li&gt;
&lt;li&gt;程序对主存的调入、调出仍以页为基本传送单位&lt;/li&gt;
&lt;li&gt;每个程序对应一个段表，每段对应一个页表&lt;/li&gt;
&lt;li&gt;虚拟地址 = 段号 + 段内页号 + 页内地址&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-3-3&amp;4/</guid>
            <title>计算机组成原理408-3-3&amp;4</title>
            <link>http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-3-3&amp;4/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/categories/computer-science/principles-of-computer-composition/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" />
            <pubDate>Sun, 26 May 2024 15:00:20 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;主存储器与cpu的连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主存储器与cpu的连接&#34;&gt;#&lt;/a&gt; 主存储器与 CPU 的连接&lt;/h3&gt;
&lt;h4 id=&#34;单块存储芯片与cpu的连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单块存储芯片与cpu的连接&#34;&gt;#&lt;/a&gt; 单块存储芯片与 CPU 的连接&lt;/h4&gt;
&lt;p&gt;扩展主存字数 —— 字扩展&lt;/p&gt;
&lt;p&gt;数据总线宽度 &amp;gt; 存储芯片字长 —— 位扩展&lt;/p&gt;
&lt;p&gt;注：现在的计算机 MAR、MDR 通常集成在 CPU 内部。存储芯片内只需一个普通的寄存器 (暂存输入、输出数据)&lt;/p&gt;
&lt;h4 id=&#34;多块存储芯片与cpu的连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多块存储芯片与cpu的连接&#34;&gt;#&lt;/a&gt; 多块存储芯片与 CPU 的连接&lt;/h4&gt;
&lt;p&gt;位扩展：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/27/OFgQp6UXihq8LZf.png&#34; alt=&#34;位扩展1&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/27/UKWZdav73GfgPEI.png&#34; alt=&#34;位扩展2&#34; /&gt;&lt;/p&gt;
&lt;p&gt;数据总线数目大于存储器的数据总线数目，将每一个存储器的数据线与一部分数据总线连接，扩展位数&lt;/p&gt;
&lt;p&gt;字扩展：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/27/AUX1fHsrGphQ9Jb.png&#34; alt=&#34;字扩展&#34; /&gt;&lt;/p&gt;
&lt;p&gt;CPU 的地址线数大于存储器的地址线数，因此用 CPU 多余的地址线来作为片选器，用于控制存入哪一片存储器。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;线选法&lt;/th&gt;
&lt;th&gt;译码片选法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;n 条线 -&amp;gt;n 个选片信号&lt;/td&gt;
&lt;td&gt;n 条线 -&amp;gt;2^n 个选片信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;电路简单&lt;/td&gt;
&lt;td&gt;电路复杂&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;地址空间不连续&lt;/td&gt;
&lt;td&gt;地址空间可连续&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;字位同时扩展法：&lt;/p&gt;
&lt;p&gt;将字扩展和位扩展结合在一起就是字位同时扩展法&lt;/p&gt;
&lt;h4 id=&#34;关于译码器知识的补充&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于译码器知识的补充&#34;&gt;#&lt;/a&gt; 关于译码器知识的补充&lt;/h4&gt;
&lt;p&gt;3-8 译码器：&lt;/p&gt;
&lt;p&gt;将 3 位输入译码成 8 中不同输出。每个译码器有一个或多个使能端&lt;/p&gt;
&lt;p&gt;注：CPU 可使用译码器的使能端控制片选信号的生效时期&lt;/p&gt;
&lt;h3 id=&#34;磁盘存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘存储器&#34;&gt;#&lt;/a&gt; 磁盘存储器&lt;/h3&gt;
&lt;p&gt;外存储器：计算机的外存储器又称为辅助存储器，目前主要使用磁盘表面存储器。&lt;/p&gt;
&lt;p&gt;所谓 &amp;quot;磁表面存储&amp;quot;，是指把某些磁性材料薄薄地涂在金属铝或塑料表面上作为载体来存储信息。磁盘存储器、磁带存储器和磁鼓存储器均属于磁盘表面存储器&lt;/p&gt;
&lt;p&gt;磁表面存储器优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储容量大，位价格低&lt;/li&gt;
&lt;li&gt;记录介质可以重复使用；&lt;/li&gt;
&lt;li&gt;记录信息可以长期保存而不丢失，甚至可以脱机存档&lt;/li&gt;
&lt;li&gt;非破坏性读出，读出时不需要再生&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;磁表面存储器缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存取速度慢&lt;/li&gt;
&lt;li&gt;机械结构复杂&lt;/li&gt;
&lt;li&gt;对工作环境要求较高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;外存储器既可以作为输入设备，也可以作为输出设备。(既可以存数据，也可以读数据)&lt;/p&gt;
&lt;h4 id=&#34;磁盘的设备的组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘的设备的组成&#34;&gt;#&lt;/a&gt; 磁盘的设备的组成&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;存储区域&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一块硬盘含有若干个记录面，每个记录面划分为若干条磁道，而每条磁道又划分为若干个扇区，扇区 (也称块) 是磁盘读写的最小单位，也就是说磁盘按块存取
&lt;ul&gt;
&lt;li&gt;磁头数：即记录面数，表示硬盘总共有多少个磁头，磁头用于读写 / 写入盘片上记录面的信息，一个记录面对应一个磁头&lt;/li&gt;
&lt;li&gt;柱面数：表示硬盘每一面盘面上由多少条磁道。在一个盘组中，不同记录的相同编号 (位置) 的诸磁道构成一个圆柱面&lt;/li&gt;
&lt;li&gt;扇区数：表示每一条磁道上有多少个扇区&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;硬盘存储器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬盘存储器由磁盘驱动器、磁盘控制器和盘片组成&lt;/li&gt;
&lt;li&gt;磁盘驱动器：核心部件是磁头组件和盘片组件&lt;/li&gt;
&lt;li&gt;磁盘控制器：是硬盘存储器和主机的接口，主流的标准有 IDE、SCSI、SATA 等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;磁盘的性能指标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘的性能指标&#34;&gt;#&lt;/a&gt; 磁盘的性能指标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;磁盘的容量：一个磁盘所能存储的字节总数称为磁盘容量。磁盘容量有非格式化容量和格式化容量之分
&lt;ul&gt;
&lt;li&gt;非格式化容量是指磁记录表面可以利用的磁化单元总数&lt;/li&gt;
&lt;li&gt;格式化容量是按照某种特定的记录格式所能存储信息的总量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;记录密度：记录密度是指盘片单位面积上记录的二进制的信息量，通常以道密度、位密度和面密度表示。
&lt;ul&gt;
&lt;li&gt;道密度是沿磁盘半径方向单位长度上的磁道数&lt;/li&gt;
&lt;li&gt;位密度是磁道单位长度上能记录的二进制代码位数&lt;/li&gt;
&lt;li&gt;面密度是位密度和道密度的乘积&lt;/li&gt;
&lt;li&gt;注意：磁盘所有磁道记录的信息量一定是相等的，并不是圆越大信息越多。故每个磁道的位密度不同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;平均存取时间
&lt;ul&gt;
&lt;li&gt;平均存取时间 = 寻道时间 (磁头移动到目的磁道)+ 旋转延迟时间 (磁头定位到所在扇区)+ 传输时间 (传输数据所花费的时间)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据传输率：磁盘存储器在单位时间内向主机传送数据的字节数，称为数据传输率
&lt;ul&gt;
&lt;li&gt;假设磁盘转数为 r (转 / 秒)，每条磁道容量为 N 个字节，则数据传输率为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;D_r=rN&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;磁盘地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘地址&#34;&gt;#&lt;/a&gt; 磁盘地址&lt;/h4&gt;
&lt;p&gt;主机向磁盘控制器发送寻址信息，磁盘的地址一般如下：&lt;/p&gt;
&lt;p&gt;驱动器号 (一台电脑可能有多个磁盘)+ 柱面 (磁道) 号 (移动磁头臂 (寻道))+ 盘面号 (激活某个磁头)+ 扇区号 (通过旋转将特定扇区划过磁头下方)&lt;/p&gt;
&lt;p&gt;若系统中有 4 个驱动器，每个驱动器带一个磁盘，每个磁盘 256 个磁道、16 个盘面，每个盘面划分为 16 个扇区，则每个扇区地址要 18 位二进制代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;驱动器号 (2bit)+ 柱面 (磁道) 号 (8bit)+ 盘面号 (4bit)+ 扇区号 (4bit)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;硬盘的工作过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬盘的工作过程&#34;&gt;#&lt;/a&gt; 硬盘的工作过程&lt;/h4&gt;
&lt;p&gt;硬盘的主要操作是寻址、读盘、写盘。每个操作都对应一个控制字，硬盘工作时，第一步是取控制字，第二步是执行控制字&lt;/p&gt;
&lt;p&gt;硬盘属于机械式部件，其读写操作是串行的，不可能在同一时间既读又写，也不可能在同一时刻读两组数据或写两组数据&lt;/p&gt;
&lt;h5 id=&#34;磁盘阵列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘阵列&#34;&gt;#&lt;/a&gt; 磁盘阵列&lt;/h5&gt;
&lt;p&gt;RAID (廉价冗余磁盘阵列) 是将多个独立的物理磁盘组成一个独立的逻辑盘，数据在多个物理盘上分割交叉存储、并行访问，具有更好的存储性能、可靠性和安全性&lt;/p&gt;
&lt;p&gt;RAID 的分级如下所示：(无论何时有磁盘损坏，都可以随时拔出受损磁盘再插入好磁盘，而数据不会损坏)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RAID0：无冗余和无校验的磁盘阵列 (逻辑上相邻的两个扇区在物理上存到两个磁盘)&lt;/li&gt;
&lt;li&gt;RAID1：镜像磁盘阵列 (存两份数据)&lt;/li&gt;
&lt;li&gt;RAID2：采用纠错的海明码的磁盘阵列 (逻辑上连续的几个 bit 物理上分散存储在各个盘中 4bit 信息位 + 3bit 海明校验位 —— 可纠正一位错误)&lt;/li&gt;
&lt;li&gt;RAID3：位交叉奇偶校验的磁盘阵列&lt;/li&gt;
&lt;li&gt;RAID4：块交叉奇偶校验的磁盘阵列&lt;/li&gt;
&lt;li&gt;RAID5：无独立校验的奇偶校验磁盘阵列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RAID 通过同时使用多个磁盘，提高了传输率；通过在多个磁面上并行存取来大幅提高存储系统的数据吞吐量；通过镜像功能，可以提高安全可靠性；通过数据校验，可以提高容错能力&lt;/p&gt;
&lt;h4 id=&#34;固态硬盘ssd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#固态硬盘ssd&#34;&gt;#&lt;/a&gt; 固态硬盘 SSD&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;原型：基于闪存技术 Flash Memory，属于电可擦除 ROM，即 EEPROM&lt;/li&gt;
&lt;li&gt;组成：
&lt;ul&gt;
&lt;li&gt;闪存翻译层：负责翻译逻辑模块号，找到对应页&lt;/li&gt;
&lt;li&gt;存储介质：多个闪存芯片 (Flash Chip)—— 每个芯片包含多个块 —— 每个块包含多个页&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读写性能特性：
&lt;ul&gt;
&lt;li&gt;以页为单位读 / 写 —— 相当于磁盘的扇区&lt;/li&gt;
&lt;li&gt;以块为单位擦除，擦干净的块，其中的每一页都可以写一次，读无限次&lt;/li&gt;
&lt;li&gt;支持随机访问，系统给定一个逻辑地址，闪存翻译层可通过电路迅速定位到对应的物理地址&lt;/li&gt;
&lt;li&gt;读快、写慢。要写的页如果有数据，则不能写入，需要块内其他页全部复制到一个新的 (擦除过的) 块中，再写入新的页&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;与机械硬盘相比的特点：
&lt;ul&gt;
&lt;li&gt;SSD 读写速度快、随机访问性能高，用电路控制访问位置；机械硬盘通过移动磁臂旋转磁盘控制访问位置，有寻道时间和旋转延迟&lt;/li&gt;
&lt;li&gt;SSD 安静无噪音、耐摔抗震、能耗低、造价更贵&lt;/li&gt;
&lt;li&gt;SSD 的一个块被擦除次数过多 (重复写同一个块) 可能会坏掉，而机械硬盘的扇区不会因为写的次数太多而坏掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;磨损均衡技术
&lt;ul&gt;
&lt;li&gt;思想：将 &amp;quot;擦除&amp;quot; 平均分布在各个块上，以提升使用寿命&lt;/li&gt;
&lt;li&gt;动态磨损均衡：写入数据时，优先选择累计擦除次数少的新闪存块&lt;/li&gt;
&lt;li&gt;静态磨损均衡：SSD 监测并自动进行数据分配、迁移，让老旧的闪存块承担以读为主的存储任务，让较新的闪存块承担更多的写任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;理想情况下，固态硬盘的寿命：&lt;/p&gt;
&lt;p&gt;某固态硬盘采用磨损均衡技术，大小为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;40&lt;/mn&gt;&lt;/msup&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^{40}B=1TB&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，闪存块的擦写寿命只有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^{10}=1K&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;K&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 次。某男子平均每天会对该固态硬盘写&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;37&lt;/mn&gt;&lt;/msup&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;128&lt;/mn&gt;&lt;mi&gt;G&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^{37}B=128GB&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 数据。在最理想的情况下，这个固态硬盘可以用多久？&lt;/p&gt;
&lt;p&gt;最理想情况下，SSD 中每个块被擦除的次数都是完全均衡的。&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;128&lt;/mn&gt;&lt;mi&gt;G&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;1TB/128G=8&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;因此平均每 8 天，每个闪存块就要被擦除一次。每个闪存块可以被擦除&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;1K&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;K&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 次。因此经过&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;8K&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;K&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 天，约 23 年后，该固态硬盘损坏&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-5-1&amp;2/</guid>
            <title>数据结构408-5-1&amp;2</title>
            <link>http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-5-1&amp;2/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/categories/computer-science/data-structure/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <pubDate>Sat, 25 May 2024 10:00:24 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#树&#34;&gt;#&lt;/a&gt; 树&lt;/h3&gt;
&lt;h4 id=&#34;树的基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#树的基本概念&#34;&gt;#&lt;/a&gt; 树的基本概念&lt;/h4&gt;
&lt;p&gt;树：从树根生长，逐级分支&lt;/p&gt;
&lt;p&gt;空树：节点数为 0 的树&lt;/p&gt;
&lt;p&gt;非空树的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有且仅有一个根节点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;没有后继的结点称为 &amp;quot;叶子结点&amp;quot;(或终端结点)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有后继的结点称为 &amp;quot;分支结点&amp;quot;(或非终端结点)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;除了根结点外，任何一个结点都有且仅有一个前驱&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个结点可以有 0 个或多个后继&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;树是 n (&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n\ge 0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7719400000000001em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≥&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;) 个结点的有限集合，n=0 时，称为空树，这是一种特殊情况。在任意一颗非空树中应满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有且仅有一个特定的称为根结点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当 n&amp;gt;1 时，其余结点可分为 m (m&amp;gt;0) 个互不相交的有限集合&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;T_1,T_2,...,T_m&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，其中每个集合本身又是一棵树，并且称为根节点的子树&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;树是一种递归定义的数据结构&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;结点关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结点关系&#34;&gt;#&lt;/a&gt; 结点关系&lt;/h4&gt;
&lt;p&gt;祖孙结点、子孙结点、双亲结点 (父节点)、孩子结点、兄弟节点、堂兄弟节点&lt;/p&gt;
&lt;p&gt;两节点间路径 (只能从上往下)&lt;/p&gt;
&lt;p&gt;路径长度 (经过几条边)&lt;/p&gt;
&lt;p&gt;结点的层次 (深度)—— 从上往下数&lt;/p&gt;
&lt;p&gt;结点的高度 —— 从下往上数&lt;/p&gt;
&lt;p&gt;树的高度 (深度)—— 总共多少层&lt;/p&gt;
&lt;p&gt;结点的度 —— 有几个孩子 (分支)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非叶子节点的度 &amp;gt; 0，叶子节点的度 = 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;树的度 —— 各结点的度的最大值&lt;/p&gt;
&lt;h4 id=&#34;有序树vs无序树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有序树vs无序树&#34;&gt;#&lt;/a&gt; 有序树 vs 无序树&lt;/h4&gt;
&lt;p&gt;有序树：逻辑上看，树中结点的各子树从左至右是有次序的，不能互换&lt;/p&gt;
&lt;p&gt;无序树：逻辑上看，树中结点的各子树从左至右是无次序的，可以互换&lt;/p&gt;
&lt;p&gt;具体看用树存储的数据，是否需要用结点的左右位置反映某些逻辑关系&lt;/p&gt;
&lt;h4 id=&#34;森林&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#森林&#34;&gt;#&lt;/a&gt; 森林&lt;/h4&gt;
&lt;p&gt;森林是 m (m&amp;gt;0) 棵互不相交的树的集合&lt;/p&gt;
&lt;p&gt;考点：森林转化成树&lt;/p&gt;
&lt;h4 id=&#34;树的性质&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#树的性质&#34;&gt;#&lt;/a&gt; 树的性质&lt;/h4&gt;
&lt;p&gt;考点 1：结点数 = 总度数 + 1&lt;/p&gt;
&lt;p&gt;考点 2：度为 m 的树，m 叉树的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树的度 —— 各结点的度的最大值&lt;/li&gt;
&lt;li&gt;m 叉树 —— 每个节点最多只能有 m 个孩子的树&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;度为 m 的树&lt;/th&gt;
&lt;th&gt;m 叉树&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;任意结点的度 &amp;lt;=m (最多 m 个孩子)&lt;/td&gt;
&lt;td&gt;任意结点的度 &amp;lt;=m (最多 m 个孩子)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;至少有一个结点度 = m (有 m 个孩子)&lt;/td&gt;
&lt;td&gt;允许所有结点的度都 &amp;lt; m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;一定是非空树，至少有 m+1 个结点&lt;/td&gt;
&lt;td&gt;可以是空树&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;考点 3：度为 m 的树第 i 层至多有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;m^{i-1}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.824664em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.824664em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个节点 (&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;i\ge1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.79549em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≥&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)，m 叉树第 i 层至多有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;m^{i-1}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.824664em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.824664em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个结点 (&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;i\ge1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.79549em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≥&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;考点 4：高度为 h 的 m 叉树至多有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mstyle displaystyle=&#34;true&#34; scriptlevel=&#34;0&#34;&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mstyle&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\dfrac{m^h-1}{m-1}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.295438em;vertical-align:-0.7693300000000001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.526108em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7693300000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个节点&lt;/p&gt;
&lt;p&gt;考点 5：高度为 h 的 m 叉树至少有 h 个结点，高度为 h、度为 m 的树至少有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;h+m-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.77777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.66666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个结点&lt;/p&gt;
&lt;p&gt;考点 6：具有 n 个结点的 m 叉树的最小高度为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌈&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌉&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\lceil log_m(n(m-1)+1)\rceil&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;⌈&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;⌉&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;高度最小的情况 —— 所有结点都有 m 个孩子&lt;/p&gt;
&lt;h3 id=&#34;二叉树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树&#34;&gt;#&lt;/a&gt; 二叉树&lt;/h3&gt;
&lt;h4 id=&#34;二叉树的基本定义与基本术语&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树的基本定义与基本术语&#34;&gt;#&lt;/a&gt; 二叉树的基本定义与基本术语&lt;/h4&gt;
&lt;h5 id=&#34;二叉树基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树基本概念&#34;&gt;#&lt;/a&gt; 二叉树基本概念：&lt;/h5&gt;
&lt;p&gt;二叉树是 n (&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n\ge 0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7719400000000001em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≥&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;) 个结点的有限集合：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;或者为空二叉树，即 n=0&lt;/li&gt;
&lt;li&gt;或者由一个根节点和两个互不相交的被称为跟的左子树和右子树组成。左子树和右子树又分别是一颗二叉树&lt;/li&gt;
&lt;li&gt;特点：
&lt;ul&gt;
&lt;li&gt;每个结点至多只有两颗子树&lt;/li&gt;
&lt;li&gt;左右子树不能颠倒 (二叉树是有序树)&lt;/li&gt;
&lt;li&gt;注意区别：度为 2 的有序树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特殊二叉树：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;满二叉树：一颗高度为 k，且含有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^h-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.932438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个结点的二叉树&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特点：&lt;/li&gt;
&lt;li&gt;只有最后一层有叶子结点&lt;/li&gt;
&lt;li&gt;不存在度为 1 的节点&lt;/li&gt;
&lt;li&gt;按层序从 1 开始编号，结点 i 的左孩子为 2i，右孩子为 2i+1；结点 i 的父节点为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌊&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌋&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\lfloor i/2\rfloor&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;⌊&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;⌋&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; (如果有)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完全二叉树：当且仅当其每个结点都与高度为 h 的满二叉树中编号为 1~n 的节点一一对应时，称为完全二叉树&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特点：&lt;/li&gt;
&lt;li&gt;只有最后两层可能有叶子节点&lt;/li&gt;
&lt;li&gt;最多只有一个度为 1 的结点&lt;/li&gt;
&lt;li&gt;同满二叉树第三条&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌊&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌋&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;i\le\lfloor n/2\rfloor&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.79549em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≤&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;⌊&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;⌋&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 为分支节点，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌊&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌋&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;i\ge\lfloor n/2\rfloor&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.79549em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≥&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;⌊&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;⌋&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 为叶子节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二叉排序树：一颗二叉树或者是空二叉树，或者是具有如下性质的二叉树：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左子树上所有结点的关键字均小于根结点的关键字&lt;/li&gt;
&lt;li&gt;右子树上所有结点的关键字均大于根结点的关键字&lt;/li&gt;
&lt;li&gt;左子树和右子树又各是一棵二叉排序 树&lt;/li&gt;
&lt;li&gt;二叉排序树可用于元素的排序、搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平衡二叉树：树上任一结点的左子树和右子树的深度之差不超过 1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平衡二叉树能有更高的搜索效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;二叉树的性质&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树的性质&#34;&gt;#&lt;/a&gt; 二叉树的性质&lt;/h4&gt;
&lt;p&gt;考点 1：设非空二叉树中度为 0、1 和 2 的结点个数分别为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n_0,n_1,n_2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.625em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，则&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n_0=n_2+1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.73333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; (叶子结点比二分支结点多一个)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设树中总结点数为 n，则
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n=n_0+n_1+n_2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.73333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.73333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n=n_1+2n_2+1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.73333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.79444em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; (树的结点个数 = 总度数 + 1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;考点 2：二叉树第 i 层至多有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^{i-1}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.824664em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.824664em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个结点 (&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;i\ge 1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.79549em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≥&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)，m 叉树第 i 层至多有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^{m-1}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个结点 (&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;i\ge 1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.79549em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≥&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;考点 3：高度为 h 的二叉树至多有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^h-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.932438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个结点 (满二叉树)，高度为 h 的 m 叉树至多有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mstyle displaystyle=&#34;true&#34; scriptlevel=&#34;0&#34;&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mstyle&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\dfrac{m^h-1}{m-1}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.295438em;vertical-align:-0.7693300000000001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.526108em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7693300000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个结点&lt;/p&gt;
&lt;h4 id=&#34;完全二叉树的性质&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完全二叉树的性质&#34;&gt;#&lt;/a&gt; 完全二叉树的性质&lt;/h4&gt;
&lt;p&gt;考点 1：具有 n (n&amp;gt;0) 个结点的完全二叉树的高度为 h 为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌈&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌉&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\lceil log_2(n+1)\rceil&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;⌈&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;⌉&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 或&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌊&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌋&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\lfloor log_2n\rfloor+1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;⌊&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;⌋&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，高度为 h 的满二叉树共有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^h-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.932438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个结点&lt;/p&gt;
&lt;p&gt;第 i 个结点所在层次为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌈&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌉&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\lceil log_2(n+1)\rceil&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;⌈&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;⌉&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 或&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌊&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌋&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\lfloor log_2n\rfloor+1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;⌊&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;⌋&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;考点 2：对于完全二叉树，可以由结点数 n 推出度为 0、1、2 的结点个数为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n_0,n_1,n_2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.625em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完全二叉树最多只有一个度为 1 的结点，即&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mtext&gt; &lt;/mtext&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mtext&gt; &lt;/mtext&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n_1=1\ or\ 0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n_0=n_2+1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.73333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n_0+n_2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.73333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 一定是奇数&lt;/li&gt;
&lt;li&gt;若完全二叉树由 2k 个结点，则必有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n_1=1,n_0=k,n_2=k-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8388800000000001em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.77777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;若完全二叉树由 2k-1 个结点，则必有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n_1=0,n_0=k,n_2=k-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8388800000000001em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.77777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二叉树的存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树的存储结构&#34;&gt;#&lt;/a&gt; 二叉树的存储结构&lt;/h3&gt;
&lt;h4 id=&#34;顺序存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序存储&#34;&gt;#&lt;/a&gt; 顺序存储&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define MaxSize 100
struct TreeNode&amp;#123;
    ElemType value; //结点中的数据元素
    bool isEmpty; //结点是否为空
&amp;#125;;
TreeNode t[MaxSize];
//定义一个长度为MaxSize的数组t，按照从上至下、从左至右的顺序依次存储完全二叉树的各个结点
for(int i=0;i&amp;lt;MaxSize;i++)
    t[i].isEmpty=true; //初始化时所有节点标记为空
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;二叉树的顺序存储中，一定要把二叉树的结点编号与完全二叉树对应起来&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i 的左孩子 ——2i&lt;/li&gt;
&lt;li&gt;i 的右孩子 ——2i+1&lt;/li&gt;
&lt;li&gt;i 的父亲节点 ——&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌊&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌋&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\lfloor i/2\rfloor&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;⌊&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;⌋&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最坏情况：高度为 h 且只有 h 个结点的单支树 (所有结点只有右孩子)，也至少需要&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^h-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.932438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个存储单元&lt;/p&gt;
&lt;p&gt;结论：二叉树的顺序存储结构，只适合存储完全二叉树&lt;/p&gt;
&lt;h4 id=&#34;链式存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#链式存储&#34;&gt;#&lt;/a&gt; 链式存储&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;//二叉树的存储(链式存储)
typedef struct BiTNode&amp;#123;
    ElemType data; //数据域
    struct BiTNode *lchild,*rchild; //左、右孩子指针
	struct BiTNode *parent; //父节点指针
&amp;#125;BiTNode,*BiTree;
//定义一棵空树
BiTree root=NULL;
//插入根结点
root=(BiTree)malloc(sizeof(BiTNode));
root-&amp;gt;data=&amp;#123;1&amp;#125;;
root-&amp;gt;lchild=NULL;
root-&amp;gt;rchild=NULL;
//插入新节点
BiTNode *p=(BiTNode*)malloc(sizeof(BiTNode));
p-&amp;gt;data=&amp;#123;2&amp;#125;;
p-&amp;gt;lchild=NULL;
p-&amp;gt;rchild=NULL;
root-&amp;gt;lchild=p; //作为根结点的左孩子
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;n 个结点的二叉树表共有 n+1 个空链表&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-3-1&amp;2/</guid>
            <title>计算机组成原理408-3-1&amp;2</title>
            <link>http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-3-1&amp;2/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/categories/computer-science/principles-of-computer-composition/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" />
            <pubDate>Tue, 21 May 2024 14:37:20 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;存储系统基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储系统基本概念&#34;&gt;#&lt;/a&gt; 存储系统基本概念&lt;/h3&gt;
&lt;h4 id=&#34;存储器的层次结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储器的层次结构&#34;&gt;#&lt;/a&gt; 存储器的层次结构&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/21/Vk1DIdewcYmaFWA.jpg&#34; alt=&#34;存储器层次化结构&#34; /&gt;&lt;/p&gt;
&lt;p&gt;辅存中的数据要调入主存后才能被 CPU 访问&lt;/p&gt;
&lt;p&gt;主存 - 辅存：实现虚拟存储系统，解决了主存容量不够的问题&lt;/p&gt;
&lt;p&gt;Cache - 主存：解决了主存与 CPU 速度不匹配的问题&lt;/p&gt;
&lt;h4 id=&#34;存储器的分类从不同角度进行分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储器的分类从不同角度进行分类&#34;&gt;#&lt;/a&gt; 存储器的分类 (从不同角度进行分类)&lt;/h4&gt;
&lt;p&gt;存储器分类 (按层次)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高速缓存 (Cache)&lt;/li&gt;
&lt;li&gt;主存储器 (主存、内存)&lt;/li&gt;
&lt;li&gt;辅助存储器 (辅存、缓存)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;高速缓存与主存储器可以直接被 CPU 读写&lt;/p&gt;
&lt;p&gt;存储器的功能：存放二进制信息&lt;/p&gt;
&lt;p&gt;存储器分类 (存储介质)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;半导体存储器 (主存，Cache)：以半导体器件存储信息&lt;/li&gt;
&lt;li&gt;磁表面存储器 (磁盘，磁带)：以磁性材料存储信息&lt;/li&gt;
&lt;li&gt;光存储器：以光介质存储信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;存储器分类 (存取方式)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机存取存储器 (RAM)：读写任何一个存储单元所需时间都相同，与存储单元所在的物理位置无关&lt;/li&gt;
&lt;li&gt;顺序存取存储器 (SAM)：读写一个存储单元所需时间取决于存储单元所在的物理位置&lt;/li&gt;
&lt;li&gt;直接存取存储器 (DAM)：既有随机存取特性，也有顺序存取特性。先直接选取信息所在区域，然后按顺序方式存取。&lt;/li&gt;
&lt;li&gt;相关联存储器 (Associative Memory)，即可以按内容访问的存储器 (CAM)：可以按照内容检索到存储位置进行读写，&amp;quot;快表&amp;quot; 就是一种相联存储器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;串行访问存储器（包括 SAM 与 DAM）：读写某个存储单元所需时间与存储单元的物理位置有关&lt;/p&gt;
&lt;p&gt;存储器分类 (信息的可更改性)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读写存储器 (Read/Write Memory)—— 即可读、也可写 (如：磁盘、内存、Cache)&lt;/li&gt;
&lt;li&gt;只读存储器 (Read Only Memory)—— 只能读，不能写 (如：实体音乐专辑通常采用 CD-ROM，实体电影采用蓝光光碟，BIOS 通常写在 ROM 中)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;存储器分类 (信息的可保存性)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;断电后，存储信息消失的存储器 —— 易失性存储器 (主存、Cache)&lt;/li&gt;
&lt;li&gt;断点后，存储信息依然保存的存储器 —— 非易失性存储器 (磁盘、光盘)&lt;/li&gt;
&lt;li&gt;信息读出后，原存储信息被破坏 —— 破坏性读出 (如 DRAM 芯片，读出数据后要进行重写)&lt;/li&gt;
&lt;li&gt;信息读出后，原存储信息不被破坏 —— 非破坏性读出 (如 SRAM 芯片、磁盘、光盘)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;存储器的性能指标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储器的性能指标&#34;&gt;#&lt;/a&gt; 存储器的性能指标&lt;/h4&gt;
&lt;p&gt;存储器的性能指标&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储容量：存储字长 * 字长 (如 1M*8 位)，MDR 位数反映存储字长&lt;/li&gt;
&lt;li&gt;单位成本：每位价格 = 总成本 / 总容量&lt;/li&gt;
&lt;li&gt;存储速度：数据传输率 = 数据的宽度 / 存储周期，数据的宽度即存储字长&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;存取时间 (&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;T_a&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)：存取时间是指从启动一次存储器操作到完成该操作所经历的时间，分为读出时间和写入时间&lt;/p&gt;
&lt;p&gt;存取周期 (&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;T_m&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)：存取周期又称为读写周期或访问周期。它是指存储器进行一次完整的读写操作所需的全部时间，即连续两次独立地访问存储器操作 (读或写操作) 之间所需的最小时间间隔，存取周期 = 存取时间 + 恢复时间&lt;/p&gt;
&lt;p&gt;主存带宽 (&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;B_m&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)：主存带宽又称数据传输率，表示每秒从主存进出信息的最大数量，单位为字 / 秒、字节 / 秒 (B/s) 或位 / 秒 (b/s)&lt;/p&gt;
&lt;h3 id=&#34;主存储器的基本组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主存储器的基本组成&#34;&gt;#&lt;/a&gt; 主存储器的基本组成&lt;/h3&gt;
&lt;h4 id=&#34;半导体元件的原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#半导体元件的原理&#34;&gt;#&lt;/a&gt; 半导体元件的原理&lt;/h4&gt;
&lt;p&gt;存储元：电容、MOS 管 (MOS 管可以理解为一种电控开关，输入电压达到某个阈值时，MOS 管就可以接通)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/22/LjSC52fQhgmuGJZ.png&#34; alt=&#34;存储元&#34; /&gt;&lt;/p&gt;
&lt;p&gt;存储体以特殊形式连接起来就可以组成存储单元，存储单元堆叠成存储体&lt;/p&gt;
&lt;h4 id=&#34;存储芯片的基本原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储芯片的基本原理&#34;&gt;#&lt;/a&gt; 存储芯片的基本原理&lt;/h4&gt;
&lt;p&gt;存储器芯片的基本原理：&lt;/p&gt;
&lt;p&gt;CPU 通过地址总线将地址传给 MAR，通过译码器，在&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.664392em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个存储单元中选择一个存储单元，即译码器输出的是一条线为 1，其他为 0。每个地址对应译码器的一条输出线。&lt;/p&gt;
&lt;p&gt;总容量 = 存储单元个数&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\times&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.66666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;×&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 存储字长 =&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^3\times 8bits=2^3\times 1Byte=8B&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;控制电路：控制电路的传输过程，如当 MAR 中电信号稳定后，再控制 MAR 将信号传给译码器，当 MDR 中电信号稳定后，再控制 MDR 通过数据总线将数据传输出去&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;片选线：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mrow&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/mrow&gt;&lt;mo stretchy=&#34;true&#34;&gt;‾&lt;/mo&gt;&lt;/mover&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\overline{CS}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8833300000000001em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord overline&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8833300000000001em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.80333em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;overline-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 或&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mrow&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;/mrow&gt;&lt;mo stretchy=&#34;true&#34;&gt;‾&lt;/mo&gt;&lt;/mover&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\overline{CE}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8833300000000001em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord overline&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8833300000000001em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.80333em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;overline-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;(芯片选择信号；芯片使能信号)，头上划线表示该信号低电平有效&lt;/li&gt;
&lt;li&gt;读控制线、写控制线：
&lt;ul&gt;
&lt;li&gt;两根读 / 写线：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mrow&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;/mrow&gt;&lt;mo stretchy=&#34;true&#34;&gt;‾&lt;/mo&gt;&lt;/mover&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\overline{WE}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8833300000000001em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord overline&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8833300000000001em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.80333em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;overline-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 允许写，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;/mrow&gt;&lt;mo stretchy=&#34;true&#34;&gt;‾&lt;/mo&gt;&lt;/mover&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\overline{OE}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8833300000000001em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord overline&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8833300000000001em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.80333em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;overline-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 允许读&lt;/li&gt;
&lt;li&gt;一根读 / 写线：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mrow&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;/mrow&gt;&lt;mo stretchy=&#34;true&#34;&gt;‾&lt;/mo&gt;&lt;/mover&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\overline{WE}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8833300000000001em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord overline&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8833300000000001em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.80333em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;overline-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 低电平写，高电平读&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/22/eLIEfln7YkOPvgw.png&#34; alt=&#34;存储芯片&#34; /&gt;&lt;/p&gt;
&lt;p&gt;一个内存条可能包含多块存储芯片&lt;/p&gt;
&lt;p&gt;常见芯片描述：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;8K\times8&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 位，即&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;13&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^{13}\times8bit&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;；&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;8K\times1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 位，即&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;13&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^{13}\times1bit&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;；&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;64&lt;/mn&gt;&lt;mi&gt;K&lt;/mi&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;16&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;64K\times16&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 位，即&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;16&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;16&lt;/mn&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^{16}\times16bit&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;如何实现不同的寻址方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何实现不同的寻址方式&#34;&gt;#&lt;/a&gt; 如何实现不同的寻址方式&lt;/h4&gt;
&lt;p&gt;总容量为 1KB，地址线：10 根&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按字节寻址：1K 个单元，每个单元 1B&lt;/li&gt;
&lt;li&gt;按字寻址：256 个单元，每个单元 4B&lt;/li&gt;
&lt;li&gt;按半字寻址：512 个单元，每个单元 2B&lt;/li&gt;
&lt;li&gt;按双字寻址：128 个单元，每个单元 8B&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dram与sram&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dram与sram&#34;&gt;#&lt;/a&gt; DRAM 与 SRAM&lt;/h3&gt;
&lt;p&gt;DRAM 为动态 RAM，SRAM 为静态 RAM&lt;/p&gt;
&lt;p&gt;DRAM 用于主存、SRAM 用于 Cache&lt;/p&gt;
&lt;h4 id=&#34;存储元件不同导致的性能差异&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储元件不同导致的性能差异&#34;&gt;#&lt;/a&gt; 存储元件不同导致的性能差异&lt;/h4&gt;
&lt;p&gt;DRAM 芯片：使用栅极电容存储信息&lt;/p&gt;
&lt;p&gt;SRAM 芯片：使用双稳态触发器 (核心区别：存储元不一样) 存储信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/22/JLiW3Uhg9ev52cH.png&#34; alt=&#34;存储元比较&#34; /&gt;&lt;/p&gt;
&lt;p&gt;双稳态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1：A 高 B 低&lt;/li&gt;
&lt;li&gt;0：A 低 B 高&lt;/li&gt;
&lt;li&gt;读出数据，触发器状态保持稳定，是非破坏性读出，无需重写，读写速度更快&lt;/li&gt;
&lt;li&gt;每个存储元制造成本更高，集成度低，功耗大&lt;/li&gt;
&lt;li&gt;只要不断电，触发器的状态就不会改变&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;栅极电容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电容放点信息被破坏，是破坏性读出。读出后应有重写操作，也称 “再生”，读写速度更慢&lt;/li&gt;
&lt;li&gt;每个存储元制造成本更低，集成度高，功耗低&lt;/li&gt;
&lt;li&gt;电容内的电荷只能维持 2ms，即便不断电，2ms 后信息也会消失&lt;/li&gt;
&lt;li&gt;2ms 之内必须 &amp;quot;刷新&amp;quot; 一次 (给电容充电)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类型特点&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;SRAM (静态 RAM)&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;DRAM (动态 RAM)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;存储信息&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;触发器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;电容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;破坏性读出&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;非&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读出后需要重写？(再生)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不用&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;需要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;运行速度&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;快&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;慢&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;集成度&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;低&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;发热量&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;大&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;存储成本&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;高&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;易失 / 非易失性存储器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;易失 (断电后信息消失)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;易失 (断电后信息消失)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;需要 &amp;quot;刷新&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不需要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;需要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;送行列地址&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;同时送&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分两次送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;常用做 Cache&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;常用作主存&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;dram的刷新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dram的刷新&#34;&gt;#&lt;/a&gt; DRAM 的刷新&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;多久需要刷新一次？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;刷新周期：一般为 2ms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每次刷新多少存储单元？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以行为单元，每次刷新一行存储单元&lt;/li&gt;
&lt;li&gt;为什么要用行列地址？减少选通线的数量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何刷新？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由硬件支持，读出一行的信息后重新写入，占用 1 个读 / 写周期&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在什么时刻刷新？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设 DRAM 内部结构排列成&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;128&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;128&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;128\times128&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的形式，读 / 写周期 (存取周期) 0.5us，2ms 共 2ms/0.5us=4000 个周期&lt;/li&gt;
&lt;li&gt;思路一：每次读写完都刷新一行 (分散刷新)
&lt;ul&gt;
&lt;li&gt;系统的存取周期变为 1us&lt;/li&gt;
&lt;li&gt;前 0.5us 时间用于正常读写；后 0.5us 时间用于刷新某行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思路二：2ms 内集中安排时间全部刷新 (集中刷新)
&lt;ul&gt;
&lt;li&gt;系统的存取周期还是 0.5us&lt;/li&gt;
&lt;li&gt;有一段时间专门用于刷新，无法访问存储器，称为访存 &amp;quot;死区&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思路三：2ms 内每行刷新 1 次即可 (异步刷新)
&lt;ul&gt;
&lt;li&gt;2ms 内需要产生 128 次刷新需求&lt;/li&gt;
&lt;li&gt;每隔 2ms/128=15.6us 一次，每 15.6us 内有 0.5us 的 &amp;quot;死时间&amp;quot;&lt;/li&gt;
&lt;li&gt;可在译码阶段刷新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;刷新由存储器独立完成，不需要 CPU 控制&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dram的地址线复用技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dram的地址线复用技术&#34;&gt;#&lt;/a&gt; DRAM 的地址线复用技术&lt;/h4&gt;
&lt;p&gt;假设地址有 n 位，只需要 n/2 条地址线，分两次送，将行地址送入行地址缓冲器，列地址送入列地址缓冲器，再通过控制电路将行列地址送给行地址译码器与列地址译码器。&lt;/p&gt;
&lt;p&gt;行、列地址分两次送，可使地址线更少，芯片引脚更少&lt;/p&gt;
&lt;h3 id=&#34;rom&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rom&#34;&gt;#&lt;/a&gt; ROM&lt;/h3&gt;
&lt;p&gt;RAM 芯片 —— 易失性，断电后数据消失&lt;/p&gt;
&lt;p&gt;ROM 芯片 —— 非易失性，断电后数据不会消失&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MROM—— 掩模式只读存储器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;厂商按照客户需求，在芯片生产过程中直接写入信息，之后任何人不可重写 (只能读出)&lt;/li&gt;
&lt;li&gt;可靠性强、灵活性差、生产周期长、只适合批量定制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PROM—— 可编程只读存储器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户可用专门的 PROM 写入器写入信息，写一次后就不可更改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EPROM—— 可擦除可编程只读存储器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许用户写入信息，之后用某种方法擦除数据，可进行多次重写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UVEPROM—— 用紫外线照射 8~20 分钟，擦除所有信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EEPROM—— 可用 &amp;quot;电擦除&amp;quot; 的方式，擦除特定的字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flash Memory—— 闪速存储器 (注：U 盘，SD 卡就是闪存)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个储存元只需要单个 MOS 管，位密度比 RAM 高&lt;/li&gt;
&lt;li&gt;在 EEPROM 基础上发展而来，断电后也能保存信息，且可进行多次快速擦除重写&lt;/li&gt;
&lt;li&gt;注意：由于闪存需要先擦除再写入，因此闪存的 &amp;quot;写&amp;quot; 速度要比 &amp;quot;读&amp;quot; 速度更慢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSD—— 固态硬盘&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由控制单元 + 存储单元 (Flash 芯片) 构成，与闪速存储器的核心区别在于控制单元不一样，但存储介质都类似，可进行多次快速擦除重写。SSD 速度快、功耗低、价格高。&lt;/li&gt;
&lt;li&gt;拓：手机辅存也使用 Flash 芯片，但相比 SSD 使用的芯片集成度高、功耗低、价格贵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;计算机内的重要rom&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机内的重要rom&#34;&gt;#&lt;/a&gt; 计算机内的重要 ROM&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主板上的 BIOS 芯片 (ROM)，存储了 &amp;quot;自举装入程序&amp;quot;，负责引导装入操作系统 (开机)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系统安装在辅存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;断电后，主存 (RAM) 内数据全部丢失；逻辑上，主存由 RAM+ROM 组成，且二者常统一编址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;很多 ROM 也具有 &amp;quot;随机存取&amp;quot; 的特性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;双端口ram&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#双端口ram&#34;&gt;#&lt;/a&gt; 双端口 RAM&lt;/h4&gt;
&lt;p&gt;存取周期：可以连续读 / 写的最短时间间隔&lt;/p&gt;
&lt;p&gt;注：DRAM 芯片的恢复时间比较长，有可能是存取时间的几倍 (SRAM 的恢复时间较短)&lt;/p&gt;
&lt;p&gt;双端口 RAM 作用：优化多核 CPU 访问一根内存条的速度&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/25/juKv7ECAzoT4wky.png&#34; alt=&#34;双端口RAM&#34; /&gt;&lt;/p&gt;
&lt;p&gt;需要有两组完全独立的数据线、地址线、控制线。CPU、RAM 中也要有更复杂的控制电路&lt;/p&gt;
&lt;p&gt;双端口对同一主存操作有以下 4 种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个端口同时对不同的地址单元存取数据&lt;/li&gt;
&lt;li&gt;两个端口同时对同一地址单元读出数据&lt;/li&gt;
&lt;li&gt;两个端口同时对同一地址单元写入数据 (写入错误)&lt;/li&gt;
&lt;li&gt;两个端口同时对同一地址单元，一个写入数据，另一个读出数据 (读出错误)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方法：置 &amp;quot;忙&amp;quot; 信号为 0，由判断逻辑决定暂时关闭一个端口 (即被延时)，未被关闭的端口正常访问，被关闭的端口延长一个很短的时间段后再访问&lt;/p&gt;
&lt;h4 id=&#34;多体并行存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多体并行存储器&#34;&gt;#&lt;/a&gt; 多体并行存储器&lt;/h4&gt;
&lt;p&gt;多体并行存储器：&lt;/p&gt;
&lt;p&gt;每个模块都有相同的容量和存取速度&lt;/p&gt;
&lt;p&gt;各模块都有独立的读写控制电路、地址寄存器和数据寄存器。它们既能并行工作，又能交叉工作。&lt;/p&gt;
&lt;p&gt;每个存储体存取周期为 T，存取时间为 r，假设 T=4r&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;高位交叉编址的多体并行存储器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连续取 n 个存储字
&lt;ul&gt;
&lt;li&gt;耗时 nT，耗时 5T&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;低位交叉编址的多体并行存储器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;连续取 n 个存储字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;耗时 T+(n-1) r&lt;/li&gt;
&lt;li&gt;宏观上读写一个字的时间接近 r&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;采用 &amp;quot;流水线&amp;quot; 方式并行存取 (宏观上并行，微观上串行)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;宏观上，一个存取周期内，m 体交叉存储器可以提供的数据量为单个模块的 m 倍&lt;/li&gt;
&lt;li&gt;存取周期为 T，存取时间为 r，为了使流水线不间断，应保证模块数&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;m\ge T/r&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7719400000000001em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≥&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;存取周期为 T，总线传输时间为 r，为了使流水线不间断，应保证模块数&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;m\ge T/r&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7719400000000001em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≥&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/25/9KFgZGclUCWODkb.png&#34; alt=&#34;高位低位多体并行存储器对比&#34; /&gt;&lt;/p&gt;
&lt;p&gt;单体多字存储器：&lt;/p&gt;
&lt;p&gt;每个存储单元存储 m 个字，总线宽度也为 m 个字，一次并行读出 m 个字&lt;/p&gt;
&lt;p&gt;每次只能同时取 m 个字，不能单独取其中某个字。指令和数据在主存中必须是连续存放的&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/mechine-learning/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/</guid>
            <title>智能计算系统复习</title>
            <link>http://ntmydb/github.io/mechine-learning/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/</link>
            <category term="机器学习" scheme="http://ntmydb/github.io/categories/mechine-learning/" />
            <category term="智能计算系统" scheme="http://ntmydb/github.io/tags/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/" />
            <pubDate>Wed, 01 May 2024 17:38:20 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;智能计算系统复习&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;什么是智能计算系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是智能计算系统&#34;&gt;#&lt;/a&gt; 什么是智能计算系统&lt;/h4&gt;
&lt;p&gt;智能计算系统是智能的物质载体。现阶段的智能计算系统通常是集成 CPU 和智能芯片的异构系统，软件上通常包括一套面相开发者的智能计算编辑环境 (包括编程框架和编程语言)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;现今采用异构智能计算系统的主要原因（异构智能计算系统的优点）：
&lt;ul&gt;
&lt;li&gt;近十年通用 CPU 计算能力增长几乎停滞，而智能计算能力的需求在不断以指数增长，二者形成剪刀差&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异构系统在提高性能的同时，也带来编程上的困难（异构智能计算系统的缺点）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;智能计算系统技术分层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;li&gt;算法层&lt;/li&gt;
&lt;li&gt;系统层&lt;/li&gt;
&lt;li&gt;芯片层&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何解决一个 AI 的任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入&lt;/li&gt;
&lt;li&gt;建模：深度学习基础、深度学习应用&lt;/li&gt;
&lt;li&gt;实现：编程框架、Bang&lt;/li&gt;
&lt;li&gt;运行：架构基础、架构设计、标准与评测&lt;/li&gt;
&lt;li&gt;输出：运行环境搭建、运行与调试、应用与开发&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;神经网络基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#神经网络基础&#34;&gt;#&lt;/a&gt; 神经网络基础&lt;/h4&gt;
&lt;p&gt;浅层神经网络特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要数据量小、训练速度快&lt;/li&gt;
&lt;li&gt;对复杂函数的表示能力有限，泛化能力受到制约&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;神经网络训练方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正向传播
&lt;ul&gt;
&lt;li&gt;正向传播 (推断) 是根据输入，经过权重、激活函数计算出隐层，将输入的特征向量从低级特征逐步提取为抽象特征，直到得到最终输出结果的过程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;反向传播
&lt;ul&gt;
&lt;li&gt;反向传播是根据正向传播的输出结果和期望值计算出损失函数，再通过链式求导，最终从网络后端逐步修改权重使输出和期望值的差距变到最小的过程&lt;/li&gt;
&lt;li&gt;反向传播的作用是将神经网络的输出误差反向传播到神经网络的输入端，并以此来更新神经网络中各个连接的权重&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何缩小计算值与真实值之间的误差：&lt;/p&gt;
&lt;p&gt;通过反向传播进行反馈，调节权重值&lt;/p&gt;
&lt;p&gt;神经网络的模型训练：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;调整网络拓扑结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐层的设计
&lt;ul&gt;
&lt;li&gt;隐层节点的作用是提取输入特征中的隐藏规律，每个节点都赋予一定权重&lt;/li&gt;
&lt;li&gt;隐层节点数太少，则网络从样本中获取信息的能力就越差，无法反映数据集的规律&lt;/li&gt;
&lt;li&gt;隐层节点数太多，则网络的拟合能力过强，可能拟合数据集中的噪声部分，导致模型泛化能力变差&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择合适的激活函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;激活函数：在神经元中，输入的数据通过加权求和后，还被作用于一个函数 G，函数 G 就是激活函数&lt;/li&gt;
&lt;li&gt;激活函数给神经元引入了非线性因素，使得神经网络可以任意逼近任意非线性函数，因此神经网络可以应用到众多的非线性模型中&lt;/li&gt;
&lt;li&gt;激活函数需具备的性质：
&lt;ul&gt;
&lt;li&gt;可微性：当优化方法是基于梯度的时候，这个性质是必须的&lt;/li&gt;
&lt;li&gt;输出值的范围：当激活函数输出值是有限的时候，基于梯度的优化方法会更稳定。因为特征的表示受有限权值的影响会更显著；当激活函数的输出是无限的时候，模型的训练会更加高效，不过在这种情况下，一般需要更小的学习率&lt;/li&gt;
&lt;li&gt;Sigmoid 函数:&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mstyle displaystyle=&#34;true&#34; scriptlevel=&#34;0&#34;&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mstyle&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;f(x)=\dfrac{1}{1+e^{-x}}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.09077em;vertical-align:-0.7693300000000001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.32144em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.697331em;&#34;&gt;&lt;span style=&#34;top:-2.989em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7693300000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;tanh 函数:&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mstyle displaystyle=&#34;true&#34; scriptlevel=&#34;0&#34;&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mstyle&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;f(x)=\dfrac{e^x-e^{-x}}{e^x+e^{-x}}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.217661em;vertical-align:-0.7693300000000001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.448331em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.590392em;&#34;&gt;&lt;span style=&#34;top:-2.9890000000000003em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.697331em;&#34;&gt;&lt;span style=&#34;top:-2.989em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.771331em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7693300000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，tanh 函数解决了 sigmoid 函数存在非 0 均值输出的问题，但没改变梯度消失问题&lt;/li&gt;
&lt;li&gt;Relu 函数：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;f(x)=max(0,x)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，ReLU 能够在 x&amp;gt;0 时保持梯度不衰减，从而缓解梯度消失问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择合适的损失函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;损失函数&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;^&lt;/mo&gt;&lt;/mover&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;L=f(\hat{y},y)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord accent&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.69444em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;accent-body&#34; style=&#34;left:-0.19444em;&#34;&gt;&lt;span class=&#34;mord&#34;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.19444em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;^&lt;/mo&gt;&lt;/mover&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\hat{y}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord accent&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.69444em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;accent-body&#34; style=&#34;left:-0.19444em;&#34;&gt;&lt;span class=&#34;mord&#34;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.19444em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 是模型预测值，是神经网络模型参数 w 的函数，记作&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;^&lt;/mo&gt;&lt;/mover&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\hat{y}=H_w(x)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord accent&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.69444em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;accent-body&#34; style=&#34;left:-0.19444em;&#34;&gt;&lt;span class=&#34;mord&#34;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.19444em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.08125em;&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;从 w 角度看，损失函数可以记为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;L(w)=f(H_w(x),y)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.08125em;&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;常用损失函数：
&lt;ul&gt;
&lt;li&gt;均方差损失函数，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;^&lt;/mo&gt;&lt;/mover&gt;&lt;msup&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;L=\frac{1}{2}(y-\hat{y})^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.190108em;vertical-align:-0.345em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.845108em;&#34;&gt;&lt;span style=&#34;top:-2.6550000000000002em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.394em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.345em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.064108em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord accent&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.69444em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;accent-body&#34; style=&#34;left:-0.19444em;&#34;&gt;&lt;span class=&#34;mord&#34;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.19444em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;交叉熵损失函数，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;/mfrac&gt;&lt;munder&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;∈&lt;/mo&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;/mrow&gt;&lt;/munder&gt;&lt;munder&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/munder&gt;&lt;msub&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;msub&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;^&lt;/mo&gt;&lt;/mover&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;L=-\frac{1}{m}\sum\limits_{x\in D}\sum\limits_{i}y_iln(\hat{y_i})&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.866814em;vertical-align:-1.021706em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.845108em;&#34;&gt;&lt;span style=&#34;top:-2.6550000000000002em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.394em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.345em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mop op-limits&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.750005em;&#34;&gt;&lt;span style=&#34;top:-2.105664em;margin-left:0em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mrel mtight&#34;&gt;∈&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.0000050000000003em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#34;mop op-symbol small-op&#34;&gt;∑&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.021706em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mop op-limits&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.750005em;&#34;&gt;&lt;span style=&#34;top:-2.122331em;margin-left:0em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.0000050000000003em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#34;mop op-symbol small-op&#34;&gt;∑&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.977669em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord accent&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.69444em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;accent-body&#34; style=&#34;left:-0.25em;&#34;&gt;&lt;span class=&#34;mord&#34;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.19444em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，其中 m 为训练样本总数量，i 为分类类别
&lt;ul&gt;
&lt;li&gt;交叉熵损失函数能够有效克服使用 sigmoid 函数时，均方差损失函数出现的参数更新慢的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;神经网络中损失函数的特性
&lt;ul&gt;
&lt;li&gt;同一个算法的损失函数不是唯一的&lt;/li&gt;
&lt;li&gt;损失函数是参数 (w,b) 的函数&lt;/li&gt;
&lt;li&gt;损失函数可以评价网络模型的好坏，损失函数越小说明模型和参数越符合训练样本 (x,y)&lt;/li&gt;
&lt;li&gt;损失函数是一个标量&lt;/li&gt;
&lt;li&gt;选择损失函数时，挑选对参数 (w,b) 可微的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;欠拟合与过拟合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;欠拟合：训练考虑的维度太少，拟合函数无法满足训练集，误差太大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过拟合：训练考虑的维度太多，使得拟合的函数很完美的接近训练数据集，但泛化能力差，对新数据预测能力不足&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;神经网络的层数增加，参数也跟着增加，表示能力大幅度增加，极容易出现过拟合现象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参数范数惩罚、稀疏化、Bagging 集成，Dropout、提前终止、数据集扩增等正则化方法可以有效抑制过拟合&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正则化思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在损失函数中增加一个惩罚项，惩罚高阶参数，使其趋近于 0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;L^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 正则化项&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;Ω&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∥&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;msubsup&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∥&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msubsup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\Omega(w)=\frac{1}{2}\Vert w\Vert^2_2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;Ω&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.190108em;vertical-align:-0.345em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.845108em;&#34;&gt;&lt;span style=&#34;top:-2.6550000000000002em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.394em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.345em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∥&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;∥&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.24810799999999997em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;L^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 正则化后，w 权重值变小，网络的复杂度降低，对数据拟合的也更好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;L^1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 正则化项是各个参数的绝对值之和&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;Ω&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∥&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;msub&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∥&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;munder&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/munder&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\Omega(w)=\Vert w\Vert_1=\sum\limits_{i}\vert w_i\vert&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;Ω&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∥&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;∥&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.727674em;vertical-align:-0.977669em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mop op-limits&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.750005em;&#34;&gt;&lt;span style=&#34;top:-2.122331em;margin-left:0em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.0000050000000003em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#34;mop op-symbol small-op&#34;&gt;∑&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.977669em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;L^1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 正则化通过加入一个符号函数，使得当&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;w_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 为正时，更新后的&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;w_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 变小，当&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;w_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 为负时，更新后的&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;w_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 变大，因此正则化后的效果就是让&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;w_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 接近 0，这样网络中的权重也会接近 0，也就减小了网络复杂度，防止了过拟合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bagging 集成方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bagging 训练不同的模型来共同决策测试样例的输出，不同的模型即使在同一个训练数据集上也会产生不同的误差&lt;/li&gt;
&lt;li&gt;Bagging 可以多次重复使用一个模型、训练算法和目标函数进行训练&lt;/li&gt;
&lt;li&gt;Bagging 的数据集从原始数据集中重复采样获取，数据集大小与原始数据集保持一致&lt;/li&gt;
&lt;li&gt;模型平均是减小泛化误差的一种可靠方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;稀疏化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;训练时让网络中的很多权重或神经元为 0&lt;/li&gt;
&lt;li&gt;90% 的权重或神经元为 0&lt;/li&gt;
&lt;li&gt;降低正向传播时的计算量&lt;/li&gt;
&lt;li&gt;稠密 MLP、突触稀疏、神经元稀疏、动态稀疏&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dropout 正则化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dropout 正则化是通过在训练时暂时修改神经网络来实现的&lt;/li&gt;
&lt;li&gt;Dropout 正则化思路：在训练过程中随机地 &amp;quot;删除&amp;quot; 一些隐层单元，在计算时无视这些连接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他正则化方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提前终止
&lt;ul&gt;
&lt;li&gt;在训练过程中返回验证误差达到最低的参数设置，就可以获得验证集误差更低的模型，这种策略称之为提前停止&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多任务学习
&lt;ul&gt;
&lt;li&gt;多任务学习通过合并多个任务的样例来减少神经网络的泛化误差&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据集增强
&lt;ul&gt;
&lt;li&gt;使用更多数据进行训练，可对原数据集进行变换形成新数据集添加到训练数据集中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参数共享
&lt;ul&gt;
&lt;li&gt;强迫两个模型（监督模式下的训练模型和无监督模式下的训练模型）的某些参数相等，使其共享唯一的一组参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交叉验证：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最简单的验证方式：将数据集划分为测试集和训练集&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同的划分方式下，得到的 MSE（Mean Squared Error）变动比较大&lt;/li&gt;
&lt;li&gt;缺点：最终模型与参数的选取将极大程度依赖于你对训练集和测试集的划分方法，只有部分数据参与了模型训练&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leave-one-out cross-validation 验证方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次取出一个数据作为测试集的唯一元素，而其他 n-1 个数据都作为训练集用于训练模型和调参。最终训练处 n 个模型，得到 n 个 MSE。将这 n 个 MSE 取平均得到最终的 MSE&lt;/li&gt;
&lt;li&gt;缺点：计算量过大，耗费时间很长&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;K - 折交叉验证&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不重复地每次取其中一份做测试集，将其他 K-1 分做训练集训练模型，之后计算该模型在测试集上的&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;MSE_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，最后再将 K 次的&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;MSE_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 取平均得到最后的&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;MSE&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Leave-one-out cross-validation 是一种特殊的 K 折交叉验证 (K=n)&lt;/li&gt;
&lt;li&gt;优点：所有样本都被作为了训练集和测试集，每个样本都被验证一次，相比 Leave-one-out cross validation，计算成本低，耗时减少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;深度学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#深度学习&#34;&gt;#&lt;/a&gt; 深度学习&lt;/h4&gt;
&lt;p&gt;适合图像处理的卷积神经网络：&lt;/p&gt;
&lt;ul z_i=&#34;&#34;&gt;
&lt;li&gt;
&lt;p&gt;卷积层如何检测特征&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检测复杂边缘
&lt;ul&gt;
&lt;li&gt;将权重作为参数，在训练中学习&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;卷积神经网络两个重要特征：局部连接、权重共享&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以有效减少权重参数，避免过拟合，为增加卷积层数提供可能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;卷积运算可转换为矩阵相乘&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;卷积的相乘再相加过程可转换为向量内积&lt;/li&gt;
&lt;li&gt;多输入输出通道卷积可转换为矩阵相乘&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;卷积层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3D 卷积、1x1 卷积、转置卷积、扩张卷积、可分卷积、平展卷积、分组卷积&lt;/li&gt;
&lt;li&gt;边界扩充 (padding)
&lt;ul&gt;
&lt;li&gt;扩大输入图像 / 特征图的尺寸并填充像素&lt;/li&gt;
&lt;li&gt;防止深度网络中图像被动持续减小&lt;/li&gt;
&lt;li&gt;强化图像边缘信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;卷积步长 (stride)
&lt;ul&gt;
&lt;li&gt;滑动滤波器时每次移动的像素点个数&lt;/li&gt;
&lt;li&gt;与 pad 共同确定输出图像迟勋&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;input=w_i\times h_i,filter=k\times k,pad=p,stride=s&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.85396em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.73333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.77777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌊&lt;/mo&gt;&lt;mstyle displaystyle=&#34;true&#34; scriptlevel=&#34;0&#34;&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/mfrac&gt;&lt;/mstyle&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌋&lt;/mo&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌊&lt;/mo&gt;&lt;mstyle displaystyle=&#34;true&#34; scriptlevel=&#34;0&#34;&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/mfrac&gt;&lt;/mstyle&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌋&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;output=\lfloor\dfrac{w_i+2p-k}{s}+1\rfloor\times\lfloor\dfrac{h_i+2p-k}{s}+1\rfloor&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.80952em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.0574399999999997em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;⌊&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.3714399999999998em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;⌋&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.0574399999999997em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;⌊&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.3714399999999998em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;⌋&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;池化层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Max Pooling/Avg Pooling/L2 Pooling&lt;/li&gt;
&lt;li&gt;主动减小图片尺寸，从而减少参数的数量和计算量，控制过拟合&lt;/li&gt;
&lt;li&gt;不引入额外参数&lt;/li&gt;
&lt;li&gt;池化提供一定程度的平移不变性&lt;/li&gt;
&lt;li&gt;Max Pooling 可保留特征最大值，提高提取特征的鲁棒性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全连接层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;卷积层和池化层构成特征提取器，全连接层则为分类器&lt;/li&gt;
&lt;li&gt;将特征提取得到的高维特征图映射成一维特征向量，该特征向量包含所有特征信息，可转化为各个类别的概率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Softmax&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常作为网络的最后一层，对输出进行归一化，输出分类概率&lt;/li&gt;
&lt;li&gt;凸显其中最大的值并抑制远低于最大值的其他分量&lt;/li&gt;
&lt;li&gt;Softmax 层输入、输出数据规模相同&lt;/li&gt;
&lt;li&gt;公式：f(z_j)=e^{z_j}/\sum_{i=0}^{n}e^&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;浅层学习局部特征，深层学习整体特征&lt;/p&gt;
&lt;p&gt;卷积神经网络结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为何选择深而非广的网络结构
&lt;ul&gt;
&lt;li&gt;深度网络可以从局部到整体理解图像
&lt;ul&gt;
&lt;li&gt;学习复杂特征时（例如人脸识别），浅层的卷积层感受野小，学习到局部特征，深层卷积层感受野大，学习到整体特征&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;深度网络可以减少权重数量
&lt;ul&gt;
&lt;li&gt;以深度换宽度，用多个小卷积替代一个大卷积，在获得更多样特征的同时所需权重数量也更少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;神经网络初始化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xavier 初始化
&lt;ul&gt;
&lt;li&gt;Glorot 条件：为保证神经网络模型的稳定性和有效性，避免梯度消失或梯度爆炸，对模型的初始化需满足两个条件：
&lt;ul&gt;
&lt;li&gt;前向传播时每一层激活值的方差保持一致&lt;/li&gt;
&lt;li&gt;反向传播时每一层对状态的梯度方差保持一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kaiming 初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;梯度下降法 GD：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;原理：损失函数关于参数 w 的负梯度方向时损失函数下降最快的方向，因此用负梯度方向对参数进行更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mini-batch 随机梯度下降法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次迭代随机选取一个 mini-batch 的样本计算梯度并进行参数更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SGD 的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择合适的学习率十分困难&lt;/li&gt;
&lt;li&gt;SGD 容易收敛到局部最优点而且可能困在鞍点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;带动量的随机梯度下降法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过积累历史梯度，减小梯度方向改变，抑制梯度震荡，加快收敛速度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NAG：添加矫正因子的 Momentum&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原理：先用当前速度更新一遍参数，再用更新的临时参数计算梯度&lt;/li&gt;
&lt;li&gt;优势：相比 Momentum 梯度方向更加稳定，进一步减少震荡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AdaGrad：使每个参数获得不同的学习率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原理：设置全局学习率，每次通过全局学习率逐参数的除以历史梯度平方和的平方根，使得每个参数的学习率不同&lt;/li&gt;
&lt;li&gt;效果：对更新频率高的参数使用较小的学习率，对更新频率低的参数使用较大的学习率&lt;/li&gt;
&lt;li&gt;优势：对于稀疏梯度的效果较好，稳定性高&lt;/li&gt;
&lt;li&gt;局限性：梯度的平方和使训练后期学习率会快速缩小，导致参数更新提前停止&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RMSprop：AdaGrad 的改进&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原理：增加了一个衰减系数控制历史梯度的积累量，对梯度计算指数衰减的移动平均，丢弃时间靠前的历史梯度&lt;/li&gt;
&lt;li&gt;优势：可以缓解 AdaGrad 训练后期学习率快速缩小的问题，善于处理非平稳的目标，目前常用在训练 RNN 相关的深度学习模型中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adam：带有动量项的 RMSprop&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原理：利用梯度的一阶矩估计和二阶矩估计动态调整每个参数的学习率&lt;/li&gt;
&lt;li&gt;Adam 结合了 AdaGrad 善于处理稀疏梯度和 RMSprop 善于处理非平稳目标的优点，为不同参数计算不同的自适应学习率&lt;/li&gt;
&lt;li&gt;适用于大多非凸优化，适用于大数据集和高维空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用于图像分类的卷积神经网络：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AlexNet
&lt;ul&gt;
&lt;li&gt;多个卷积层，ReLU；Dropout、数据增强等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VGG
&lt;ul&gt;
&lt;li&gt;结构组成：
&lt;ul&gt;
&lt;li&gt;input&lt;/li&gt;
&lt;li&gt;conv-&amp;gt;conv-&amp;gt;pool&lt;/li&gt;
&lt;li&gt;conv-&amp;gt;conv-&amp;gt;pool&lt;/li&gt;
&lt;li&gt;conv-&amp;gt;conv-&amp;gt;conv-&amp;gt;pool&lt;/li&gt;
&lt;li&gt;conv-&amp;gt;conv-&amp;gt;conv-&amp;gt;pool&lt;/li&gt;
&lt;li&gt;conv-&amp;gt;conv-&amp;gt;conv-&amp;gt;pool&lt;/li&gt;
&lt;li&gt;fc-&amp;gt;fc-&amp;gt;fc&lt;/li&gt;
&lt;li&gt;softmax&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;相同感受野，多层网络权值更少&lt;/li&gt;
&lt;li&gt;VGG 成功的原因
&lt;ul&gt;
&lt;li&gt;更深的卷积神经网络，更多的卷积层和非线性激活函数，提升分类准确率&lt;/li&gt;
&lt;li&gt;使用规则的多层小卷积替代大卷积，减小参数数量，提高训练收敛速度&lt;/li&gt;
&lt;li&gt;部分网络层参数的预初始化，提高训练收敛速度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Inception
&lt;ul&gt;
&lt;li&gt;BatchNorm 效果
&lt;ul&gt;
&lt;li&gt;可提高收敛速度、训练速度&lt;/li&gt;
&lt;li&gt;可选择更高的学习率，方便调参&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BatchNorm 的缺点
&lt;ul&gt;
&lt;li&gt;计算 batch-level 的统计量较贵&lt;/li&gt;
&lt;li&gt;依赖 batch 的大小，难于在有限硬件资源上复现模型性能&lt;/li&gt;
&lt;li&gt;不利于分布式训练&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;神经网络退化：收敛到极值点而非最值，误差大&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ResNet
&lt;ul&gt;
&lt;li&gt;优点：在解附近时，权重的反应更灵敏，更容易学习获得最优解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Image Style Transfer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内容损失函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只取 conv4_2 单层特征来计算内容损失&lt;/li&gt;
&lt;li&gt;计算内容图片特征和噪声图片特征之间的欧式距离&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;munder&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;/munder&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msubsup&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msubsup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msubsup&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msubsup&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;L_{content}(p,x,l)=\frac{1}{2}\sum\limits_{i,j}(F_{ij}^l-P_{ij}^l)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.2805559999999999em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.962885em;vertical-align:-1.113777em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.845108em;&#34;&gt;&lt;span style=&#34;top:-2.6550000000000002em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.394em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.345em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mop op-limits&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7500050000000001em;&#34;&gt;&lt;span style=&#34;top:-2.122331em;margin-left:0em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mpunct mtight&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.0000050000000003em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#34;mop op-symbol small-op&#34;&gt;∑&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.113777em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-2.441336em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.394772em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.2438799999999999em;vertical-align:-0.394772em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-2.441336em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.394772em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;munder&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/munder&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;L_{style}(a,x)=\sum\limits_{l}w_lE_l&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.036108em;vertical-align:-0.286108em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3361079999999999em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.7521179999999998em;vertical-align:-1.002113em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mop op-limits&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7500049999999999em;&#34;&gt;&lt;span style=&#34;top:-2.097887em;margin-left:0em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.000005em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#34;mop op-symbol small-op&#34;&gt;∑&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.002113em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mstyle displaystyle=&#34;true&#34; scriptlevel=&#34;0&#34;&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mrow&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;msubsup&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msubsup&gt;&lt;msubsup&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msubsup&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mstyle&gt;&lt;munder&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;/munder&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msubsup&gt;&lt;mi&gt;G&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msubsup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msubsup&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msubsup&gt;&lt;msup&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;E_l=\dfrac{1}{4N_l^2M_l^2}\sum\limits_{i,j}(G_{ij}^l-A_{ij}^l)^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.4352169999999997em;vertical-align:-1.113777em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.32144em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7959079999999998em;&#34;&gt;&lt;span style=&#34;top:-2.398692em;margin-left:-0.10903em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.0448em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30130799999999996em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7959079999999998em;&#34;&gt;&lt;span style=&#34;top:-2.398692em;margin-left:-0.10903em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.0448em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30130799999999996em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9873080000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mop op-limits&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7500050000000001em;&#34;&gt;&lt;span style=&#34;top:-2.122331em;margin-left:0em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mpunct mtight&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.0000050000000003em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#34;mop op-symbol small-op&#34;&gt;∑&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.113777em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-2.441336em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.394772em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.2438799999999999em;vertical-align:-0.394772em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-2.441336em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.394772em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msubsup&gt;&lt;mi&gt;G&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msubsup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;munder&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/munder&gt;&lt;msubsup&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msubsup&gt;&lt;msubsup&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msubsup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;G_{ij}^l=\sum\limits_{k}F_{ik}^lF_{jk}^l&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.2438799999999999em;vertical-align:-0.394772em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-2.441336em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.394772em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.851221em;vertical-align:-1.002113em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mop op-limits&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7500049999999999em;&#34;&gt;&lt;span style=&#34;top:-2.097887em;margin-left:0em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.000005em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&#34;mop op-symbol small-op&#34;&gt;∑&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.002113em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-2.4168920000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.2831079999999999em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-2.4168920000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.4192159999999999em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; (gram 矩阵)&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;w_l&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;：第 l 层的&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;E_l&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 用于计算风格损失的权重&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;a&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;：初始风格图片&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;：生成图片&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msubsup&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msubsup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;A_{ij}^l&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.2438799999999999em;vertical-align:-0.394772em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-2.441336em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.394772em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;：风格图片在第 l 层第 i 个特征图和第 j 个特征图的内积&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msubsup&gt;&lt;mi&gt;G&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msubsup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;G_{ij}^l&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.2438799999999999em;vertical-align:-0.394772em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-2.441336em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.394772em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;：生成图片在第 l 层第 i 个特征图和第 j 个特征图的内积&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;M_l&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;：第 l 层的输出特征图的大小&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;N_l&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;：第 l 层的输出特征图的数目&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;l&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;：用于计算内容特征的层数&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msubsup&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msubsup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;F_{ij}^l&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.2438799999999999em;vertical-align:-0.394772em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-2.441336em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.394772em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;：生成图片在第 l 层第 i 个特征图上位置 j 处的特征值&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msubsup&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/msubsup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;P_{ij}^l&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.2438799999999999em;vertical-align:-0.394772em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-2.441336em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.394772em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;：内容图片在第 l 增第 i 个特征图上位置 j 处的特征值&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;p&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.625em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;：内容图片&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;：生成图片&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;α&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;β&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;L_{total}(p,a,x)=\alpha L_{content}(p,x)+\beta L_{style}(a,x)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.0037em;&#34;&gt;α&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.2805559999999999em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.036108em;vertical-align:-0.286108em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05278em;&#34;&gt;β&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3361079999999999em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;α&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;β&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\alpha/\beta&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.0037em;&#34;&gt;α&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05278em;&#34;&gt;β&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 越大，内容越具象&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Real-Time Image style transfer&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/02/bhmP3JWpXgDOs28.png&#34; alt=&#34;实时风格迁移&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Image Transform Net
&lt;ul&gt;
&lt;li&gt;深度卷积网络，参考 DCGAN 的思想：用步幅卷积替代 pooling、每个卷积层后接 BatchNorm 和 Relu&lt;/li&gt;
&lt;li&gt;增加残差结构，使网络更易训练&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 neural style transfer 中，优化算法每一轮迭代更新是 (B)&lt;br /&gt;
 A. 内容图像 C 中的像素值      B. 生成图像 G 中的像素值      C. 神经网络参数 (w,b)        D. 正则化参数&lt;/p&gt;
&lt;p&gt;神经网络量化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为什么要对神经网络进行量化？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深度神经网络的规模不断增大，其计算和存储成本越来越高&lt;/li&gt;
&lt;li&gt;近年来，大模型的崛起和不断发展更是加剧了成本需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;什么是神经网络量化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过将高精度 (浮点数) 数据离散化得到的低精度 (位宽) 数据进行网络的表示和计算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;量化的优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少计算量、提升计算速度、减少计算能耗、减少存储空间、减小乘法器面积&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前向传播的量化：将激活的权重都量化后再计算卷积和全连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反向传播的量化：将激活、权重、激活梯度都量化后，再计算卷积和全连接的反传，获得当前激活梯度和权重梯度&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;编程框架的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编程框架的使用&#34;&gt;#&lt;/a&gt; 编程框架的使用&lt;/h4&gt;
&lt;p&gt;为什么需要编程框架&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有必要将算法中的常用操作封装成组件提供给程序员，以提高深度学习算法开发效率&lt;/li&gt;
&lt;li&gt;算法理论复杂&lt;/li&gt;
&lt;li&gt;代码实现工作量大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pytorch&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;张量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;张量是计算图是数据载体&lt;/li&gt;
&lt;li&gt;张量对应了神经网络中在各个节点之间传递、流动的数据&lt;/li&gt;
&lt;li&gt;张量可以看做是 n 维数组，数组的维数即为张量的阶数&lt;/li&gt;
&lt;li&gt;张量的数据格式
&lt;ul&gt;
&lt;li&gt;多维数组以何种线性存储方式存储&lt;/li&gt;
&lt;li&gt;PyTorch、GPU 中采用 NCHW，TensorFlow 中采用 NHWC (N:batch size;C: 通道数；H: 高度；W: 宽度)&lt;/li&gt;
&lt;li&gt;数据在计算设备上按照 1 维来存储：NCHW 按照 W-&amp;gt;H-&amp;gt;C-&amp;gt;N，NHWC 按照 C-&amp;gt;W-&amp;gt;H-&amp;gt;N 的顺序存储&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义计算操作方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原位 (in-place) 操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指在存储原张量的内存上直接计算更新张量值，而不是先复制张量再计算更新。其标志是在原操作语句后添加 &amp;quot;_&amp;quot;&lt;/li&gt;
&lt;li&gt;与 Python 中 +=,*= 类似&lt;/li&gt;
&lt;li&gt;原位操作能够节省内存占用，在进行深度学习算法推理时，使用原位操作能够有效减少模型占用的内存&lt;/li&gt;
&lt;li&gt;原位操作会覆盖原张量，如果模型训练时使用原位操作来更新张量梯度，则每次迭代计算所得梯度值将被覆盖，从而破坏模型的训练过程&lt;/li&gt;
&lt;li&gt;对于多个张量同时引用一个张量的情况，对该张量进行原位操作会影响其他张量操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作广播机制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于参与计算操作的多个张量，如果张量维度不匹配，可以使用 Pytorch 的广播机制对不匹配的张量维度进行扩展，最终将这些张量均扩展为维度相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;能进行广播机制的条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个张量都有至少 1 个维度&lt;/li&gt;
&lt;li&gt;从张量末尾的维度开始对齐扩展，在对齐后的同一维度中，仅下列情况之一才允许进行广播操作：
&lt;ul&gt;
&lt;li&gt;1、维度尺寸相同&lt;/li&gt;
&lt;li&gt;2、维度尺寸不同但其中一个维度尺寸为 1&lt;/li&gt;
&lt;li&gt;3、其中一个张量没有该维度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于维度数量相同的张量，比较每个维度对应的维度尺寸，若维度尺寸不同但其中一个维度为 1，则将其维度扩展为另一张量的尺寸&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/02/P2rewSxIbkUvTtC.png&#34; alt=&#34;例子1&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于维度数量不同的张量，首先从张量末尾的维度开始对齐扩展，对缺少的维度尺寸补 1，再沿每个维度方向进行尺寸对比及扩展&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/02/BnPwOMlrsHNV3Fb.png&#34; alt=&#34;例子2&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原位操作的广播&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是执行原位操作的张量需要维度扩展或改变，则编译报错&lt;/li&gt;
&lt;li&gt;如果作为原位操作参数的张量需要维度扩展或改变，则仍可通过广播机制完成张量操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算图&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编程框架中使用有向图来描述计算过程。有向图中包含一组节点和边&lt;/li&gt;
&lt;li&gt;支持通过多种高级语言来构建计算图 (C++/Python)&lt;/li&gt;
&lt;li&gt;计算图对应了神经网络的结构&lt;/li&gt;
&lt;li&gt;节点一般用来表示各类操作，包括数学运算、变量读写、数据填充等，也可以表示输入数据、模型参数、输出数据&lt;/li&gt;
&lt;li&gt;边表示节点之间的输入输出关系。分为两类
&lt;ul&gt;
&lt;li&gt;一类是传递数据的边。传递的数据即张量&lt;/li&gt;
&lt;li&gt;一类是表示节点之间控制依赖关系的边。这类边不传递数据，只表示节点执行顺序：必须前序节点计算完成，后序几点才开始计算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为什么采用计算图
&lt;ul&gt;
&lt;li&gt;自动求导、统一的计算模型、高效执行、并行性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;静态图 vs 动态图
&lt;ul&gt;
&lt;li&gt;静态图
&lt;ul&gt;
&lt;li&gt;先定义整张图，再运行&lt;/li&gt;
&lt;li&gt;可以对图进行全局优化，获得更快的运算速度&lt;/li&gt;
&lt;li&gt;调试不方便&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态图
&lt;ul&gt;
&lt;li&gt;即时运行，网络模型可在运行时修改&lt;/li&gt;
&lt;li&gt;代码编写灵活，可立即获得执行结果，调试方便&lt;/li&gt;
&lt;li&gt;优化不方便&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TensorFlow1.x：静态图，PyTorch：动态图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msubsup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msubsup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;f(x_1,x_2,x_3)=3*(x_1^2+x_2*x_3)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.064108em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.24810799999999997em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.61528em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，画出对应的计算图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/02/ORAsSYBLW1xpiv7.png&#34; alt=&#34;小测答案&#34; /&gt;&lt;/p&gt;
&lt;p&gt;基于 Pytorch 的推理模型实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;读取输入图像（一般使用 transform 来转换格式）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以利用 PIL、OpenCV、torchvision.io 等来读取输入图像&lt;/li&gt;
&lt;li&gt;PIL：读取格式为 (H,W,C)&lt;/li&gt;
&lt;li&gt;OpenCV：imread (filename) 加载图像文件，OpenCV 中表示彩色图像使用的是 BGR 格式&lt;/li&gt;
&lt;li&gt;torchvision.io 读入图像，保存 3 维 RGB 或灰度张量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构建神经网络&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义模型
&lt;ul&gt;
&lt;li&gt;PyTorch 提供 torch.nn、torch.nn.Module、torch.nn.functional 等模块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;直接调用预训练模型
&lt;ul&gt;
&lt;li&gt;PyTorch 提供 torchvision.models，包含了用于处理不同人物的各种模型，如图像分类、语义分割、目标检测、关键点检测等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实例化神经网络模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完成神经网络模块的定义，包括 init () 方法和 forward () 方法定义&lt;/li&gt;
&lt;li&gt;实例化模型结构，将结构相关参数传递给 module&lt;/li&gt;
&lt;li&gt;定义模型的输入数据&lt;/li&gt;
&lt;li&gt;将模型输入传入实例化后的模型，获取模型输出&lt;/li&gt;
&lt;li&gt;完成了模型结构的定义以及模型中参数的初始化后，即可对神经网络模型进行实例化，并将模型的输入数据传递给模型，获取输出结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;神经网络模型优化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 torch.nn.utils.prune 对神经网络模型进行剪枝操作&lt;/li&gt;
&lt;li&gt;使用 torch.quantization 进行神经网络模型的量化&lt;/li&gt;
&lt;li&gt;动态量化
&lt;ul&gt;
&lt;li&gt;神经网络模型的量化，指将模型中的权重和 / 或激活函数从多位宽的浮点格式，转换为低位宽的整数型格式&lt;/li&gt;
&lt;li&gt;缩放系数与参与量化张量的数值范围有关&lt;/li&gt;
&lt;li&gt;权重参数的数值范围是固定的，其缩放系数也是固定的&lt;/li&gt;
&lt;li&gt;动态量化：每一层激活数据的数值范围随计算过程变化，需要动态确定缩放系数，根据缩放系数动态完成数据格式转换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于 PyTorch 的模型训练实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PyTorch 提供了两个数据加载原语：torch.utils.data.Dataset 和 torch.util.data.DataLoader，实现构建数据集、加载数据集等功能&lt;/li&gt;
&lt;li&gt;1、加载训练数据集
&lt;ul&gt;
&lt;li&gt;torch.utils.data.Dataset
&lt;ul&gt;
&lt;li&gt;数据集的抽象类，自定义数据集需继承该类&lt;/li&gt;
&lt;li&gt;复写 getitem () 方法，定义数据读取及数据预处理方法&lt;/li&gt;
&lt;li&gt;通过复写其中 len () 方法，定义统计数据集规模的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;torch.utils.data.DataLoader
&lt;ul&gt;
&lt;li&gt;使用 Dataset 构建完成的自定义数据集，以及 torchvision.datasets 内建的数据集，可以作为参数传递给 torch.util.data.DataLoader 类，实现数据集加载&lt;/li&gt;
&lt;li&gt;torch.util.data.DataLoader(dataset,batch_size=1,shuffle=None,num_workers=0)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2、构建模型
&lt;ul&gt;
&lt;li&gt;模型参数初始化方法
&lt;ul&gt;
&lt;li&gt;使用 torch.nn.init 模块&lt;/li&gt;
&lt;li&gt;使用 torch.nn.Module.apply 函数&lt;/li&gt;
&lt;li&gt;使用 self.modules&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3、模型训练
&lt;ul&gt;
&lt;li&gt;首先需要定义损失函数的计算方法&lt;/li&gt;
&lt;li&gt;然后构建优化器实现对模型的梯度计算及更新&lt;/li&gt;
&lt;li&gt;反向传播过程中，可以利用内建的性能分析工具、梯度检查函数等，验证训练过程的正确性和有效性&lt;/li&gt;
&lt;li&gt;损失函数定义
&lt;ul&gt;
&lt;li&gt;可以自定义，也可直接使用 PyTorch 提供的内建损失函数&lt;/li&gt;
&lt;li&gt;自定义损失函数可以通过定义模块实例来实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;构建计算图来计算梯度
&lt;ul&gt;
&lt;li&gt;计算图的主要作用在于能够在前向计算过程中保存所有中间节点的计算结果，便于反向传播时构建反向传播路径，并利用链式法则完成自动求导&lt;/li&gt;
&lt;li&gt;计算图在一次反向传播后会被立即销毁，释放存储空间，下次调用时需要再次创建&lt;/li&gt;
&lt;li&gt;因此只有在训练时计算图是必须的，而如果只是单纯的推理，可以选择不创建计算图，可以节省存储占用和资源消耗&lt;/li&gt;
&lt;li&gt;使用 torch.no_grad () 禁用计算图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;计算图的反向传播
&lt;ul&gt;
&lt;li&gt;可以使用 tensor.backward () 函数计算当前张量相对于计算图中所有叶节点的梯度&lt;/li&gt;
&lt;li&gt;每次调用 backward () 后，计算图会被释放掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;计算图的叶节点
&lt;ul&gt;
&lt;li&gt;叶节点分为两种情况
&lt;ul&gt;
&lt;li&gt;requires_grad=False 的张量&lt;/li&gt;
&lt;li&gt;由用户直接创建而不是通过某些计算得到的、且 requires_grad=True 的张量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在反向传播时，仅有 requires_grad=True 的节点才会计算梯度，而其中仅有叶张量的.grad 属性 (j 即其梯度值) 会被保存在内存中。非叶张量如果想保留.grad 属性，需要设置其 retain_grad 参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过 detach () 方法修改计算图
&lt;ul&gt;
&lt;li&gt;tensor.detach () 会返回一个新张量，该张量从当前计算图中剥离，成为一个新的叶张量，新张量的 requires_grad=False，即不需要计算梯度&lt;/li&gt;
&lt;li&gt;返回的张量与原张量共享共同内存，对原张量或新张量的原位修改 (如尺寸、stride 等的原位修改) 均会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自定义函数的梯度计算
&lt;ul&gt;
&lt;li&gt;在使用 loss.backward () 计算梯度时，如果 loss 向前计算使用的均为 PyTorch 中的内建操作函数，则 PyTorch 能自动根据各操作对应的梯度计算方法完成自动求导&lt;/li&gt;
&lt;li&gt;torch.autograd 包提供了用于自动求导的类和函数&lt;/li&gt;
&lt;li&gt;如果在模型中使用了某些不可微的函数，或需依赖非 PyTorch 库 (如 Numpy)，则需要自定义操作的前向计算和反向计算方法，以便于 PyTorch 利用链式法则完成自动求导&lt;/li&gt;
&lt;li&gt;为了保证自定义函数的正确性，可以使用 torch.autograd.gradcheck ()、torch.autograd.detect_anomaly () 等函数来验证梯度计算功能的准确性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 torch.optim 包优化梯度
&lt;ul&gt;
&lt;li&gt;支持常用梯度优化算法：Adadelta、Adagrad、Adam、RMSprop、SGD、LBFGS&lt;/li&gt;
&lt;li&gt;torch.opim.Optimizer (params,defaults)：所有优化器的基类
&lt;ul&gt;
&lt;li&gt;params 为需要优化的模型参数列表&lt;/li&gt;
&lt;li&gt;defaults 为包含了如 learning rate 等优化选项的字典&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4、模型的保存与恢复
&lt;ul&gt;
&lt;li&gt;torch.save () 保存模型
&lt;ul&gt;
&lt;li&gt;可以仅保存模型的 state_dict，模型保存格式为.pt 或.pth&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推理时装载模型的 state_dict
&lt;ul&gt;
&lt;li&gt;在神经网络进行推理时，首先完成模型的初始化，再使用 model.load_state_dict () 装载模型参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;恢复模型的检查点文件
&lt;ul&gt;
&lt;li&gt;可以使用 torch.load 恢复检查点文件中参数&lt;/li&gt;
&lt;li&gt;可用于推理或继续训练&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;编程框架机理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编程框架机理&#34;&gt;#&lt;/a&gt; 编程框架机理&lt;/h4&gt;
&lt;p&gt;编程框架设计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计原则
&lt;ul&gt;
&lt;li&gt;简洁性
&lt;ul&gt;
&lt;li&gt;框架提供一套抽象机制，用户仅需关心算法本身和部署策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;易用性
&lt;ul&gt;
&lt;li&gt;熟悉的开发范式&lt;/li&gt;
&lt;li&gt;直观且用户友好的接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高效性
&lt;ul&gt;
&lt;li&gt;如采用静态图编程方式，可以生成完整的计算图并进行全局优化，从而尽量提高用户应用程序的运行效率&lt;/li&gt;
&lt;li&gt;支持深度学习编译技术，多层级表示优化，充分利用用户硬件的计算能力&lt;/li&gt;
&lt;li&gt;支持多机多卡条件的分布式训练，从而高效支持大规模深度学习任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整体架构
&lt;ul&gt;
&lt;li&gt;计算图构建模块：完成从输入的用户程序到编程框架内部原始计算图的转换过程，编程框架的入口模块&lt;/li&gt;
&lt;li&gt;分布式训练模块：应对更大规模的神经网络，将训练、推理任务从一台设备扩展到多台设备&lt;/li&gt;
&lt;li&gt;深度学习编译模块：对计算图分别进行图层级和算子层级的编译优化，从而提升单设备上的执行效率&lt;/li&gt;
&lt;li&gt;计算图执行模块：将优化后的计算图中的张量和操作映射到指定设备上进行具体执行，并给出编程框架的输出结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算图构建&lt;/p&gt;
&lt;ul \delta=&#34;&#34; x_i=&#34;&#34;&gt;
&lt;li&gt;
&lt;p&gt;计算构建：正向图与反向图构建&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算图由两个基本元素构成：张量和张量操作。计算图是有向图，有向边指明了张量流动方向&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正向传播&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;输入张量经过搭建的神经网络层层计算递进，并最终获得计算结果的过程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构建形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;动态图：在执行函数时，按照函数顺序逐条语句地生成节点，立即计算并返回结果；易调试单性能优化空间有限&lt;/p&gt;
&lt;p&gt;计算图在函数运行过程中逐步构建的&lt;/p&gt;
&lt;p&gt;立即 (eager) 模式：每次调用语句就立即执行计算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;静态图：在执行计算之前构建好所有图上节点，在图运行时才计算整个计算图并返回结果；不易调试但性能好&lt;/p&gt;
&lt;p&gt;整个网络的结构会在开始计算前就建立完成计算图&lt;/p&gt;
&lt;p&gt;框架执行时接收整个计算图而不是单一语句&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反向传播&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;正向计算得到的结果和目标结果存在损失函数值，对其求导得到梯度，并使用该梯度更新参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常用求导：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;手动求导：手动用链式法则求解出梯度公式，代入数值，得到最终梯度值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;对于大规模计算的深度学习算法，手动用链式法则进行梯度计算并转换成计算机程序非常困难&lt;/li&gt;
&lt;li&gt;需要手动编写梯度求解代码，且模型变化，算法也需修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数值求导：利用导数的原始定义求解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：易操作；可对用户隐藏求解过程&lt;/li&gt;
&lt;li&gt;缺点：计算量大，求解速度慢；可能引起舍入误差和截断误差&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;符号求导：利用求导规则对表达式进行自动操作，从而获得导数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺点：表达式膨胀问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动求导：介于数值求导和符号求导的方法，对基本算子应用符号求导法，代入数值保留中间结果，应用于整个函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;计算图结构天然适用于自动求导：计算图将多输入的复杂计算表达成了由多个基本二元计算组成的有向图，并保留了所有中间变量，有助于程序自动利用链式法则进行求导&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优点：灵活，可以完全向用户隐藏求导过程；只对基本函数运用符号求导法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算分两步执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;原始函数建立计算图，数据正向传播，计算出中间节点&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;x_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，并记录计算图中的节点依赖关系&lt;/p&gt;
&lt;/li&gt;
&lt;li \delta=&#34;&#34; x_i=&#34;&#34;&gt;
&lt;p&gt;反向遍历计算图，计算输出对于每个节点的倒数\bar{x}_i=\dfrac{\delta y_i}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于前向计算中一个数据&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;x_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 连接多个输出数据&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(y_i,y_k)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的情况，自动求导中，将这些输出数据相对于该数据的导数累加&lt;/p&gt;
&lt;p&gt;\bar{x}_i=\bar{y}_j\dfrac{\delta y_j}{\delta x_i}+\bar{y}_k\dfrac{\delta y_k}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算图执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将计算图中的张量和操作 (算子) 映射到给定设备上具体执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设备管理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设备是编程框架中计算图执行时的硬件实体，每个设备都具体负责计算图中的张量存放和算子运算&lt;/li&gt;
&lt;li&gt;常见通用处理器 (如 CPU) 和领域专用处理器 (如 GPU 和 DLP 等)&lt;/li&gt;
&lt;li&gt;添加对领域专用处理器的设备管理支持 (三个模块)
&lt;ul&gt;
&lt;li&gt;设备操作：初始化设备运行环境、获取设备句柄和关闭并释放设备等&lt;/li&gt;
&lt;li&gt;执行流管理：设备上抽象出来的管理计算任务的软件概念
&lt;ul&gt;
&lt;li&gt;在异构编程模型下，完成设备上任务执行的下发和同步操作&lt;/li&gt;
&lt;li&gt;执行流创建、执行流同步和执行流销毁等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事件管理：表示设备上任务运行的状态和进展；事件创建、事件记录和事件销毁等基本操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;张量实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;逻辑视图：形状、布局、步长、偏移量、数据类型和设备等。是编程框架者能直接控制和表达的基本属性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物理视图：设备上的物理地址空间大小、指针、数据类型等。对框架使用者不可见&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个物理视图可以对应多个逻辑视图：切片的结果不是新的物理视图，而是原本物理视图下的一个新的逻辑视图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PyTorch 中的张量抽象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过张量 (Tensor) 抽象类来分别表示张量数据结构中的逻辑视图和物理视图：&lt;/p&gt;
&lt;p&gt;TensorImpl 类：张量抽象的实现，包含了维度信息，步长信息，数据类型，设备，布局等逻辑视角的张量信息&lt;/p&gt;
&lt;p&gt;StorageImpl 类：张量的存储实现，包含了内存指针、数据总数等物理视角的张量信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;张量内存分配&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从逻辑视图到物理视图的转换需要完成对张量的内存分配，即对张量进行内存管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据设备的类型不同，张量管理的方式不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;即使分配：GPU&lt;/p&gt;
&lt;p&gt;需要分配张量内存时，立即从系统中申请一块合适大小的内存空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存池分配：CPU&lt;/p&gt;
&lt;p&gt;预先分配一块固定大小的内存池，需要时从内存池中分配内存&lt;/p&gt;
&lt;p&gt;自我维护：内存块的拆分与合并&lt;/p&gt;
&lt;p&gt;优点：节约设备内存使用，减少设备内存碎片化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算子执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取算子执行序列&lt;/li&gt;
&lt;li&gt;实现算子：前端定义、后端实现、前后端绑定&lt;/li&gt;
&lt;li&gt;查找并调用算子&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算图的执行过程 = 每个算子独立执行的过程&lt;/p&gt;
&lt;p&gt;计算图 -&amp;gt; 执行序列 (确保正确的数据流和依赖关系)&lt;/p&gt;
&lt;p&gt;针对每个算子进行算子实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端定义、后端实现、前后端绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分派执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查找适合给定输入的算子实现&lt;/li&gt;
&lt;li&gt;并调用相应的实现来执行具体的计算任务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行序列&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分析计算图结点之间的依赖关系 -&amp;gt; 执行序列&lt;/li&gt;
&lt;li&gt;拓扑排序算法 (可有多种可行的结果)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;算子实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;正向传播实现和反向传播实现分离&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户接口 (前端) 和具体实现 (后端) 分离&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算子实现流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端定义：在编程框架中配置算子信息，包含算子的输入、输出以及相关接口定义，最后生成前端接口
&lt;ul&gt;
&lt;li&gt;在配置文件中添加算子正向传播函数和反向传播函数的对应&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;后端实现：使用 C++ 或其他高级的编程语言，编写算子的底层实现代码，完成算子的计算逻辑部分实现
&lt;ul&gt;
&lt;li&gt;表层实现：不同设备之间的抽象函数接口&lt;/li&gt;
&lt;li&gt;底层实现：具体到每个设备上的实际代码实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;前后端绑定：编程框架将前端定义的算子与后端的具体实现进行绑定
&lt;ul&gt;
&lt;li&gt;同一个算子可能会有多个后端实现的代码&lt;/li&gt;
&lt;li&gt;PyTorch 使用分派机制来管理前后端对应关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分派执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获得算子执行序列 -&amp;gt; 实现对应算子 -&amp;gt; 对算子分派执行&lt;/li&gt;
&lt;li&gt;分派执行：在运行时根据输入张量的类型和设备类型查找并调用合适的算子实现方法&lt;/li&gt;
&lt;li&gt;Dispatcher 计算分派键，并由此到对应的内核函数
&lt;ul&gt;
&lt;li&gt;算子：Dispatcher 的调度对象，代表了具体的计算任务&lt;/li&gt;
&lt;li&gt;分派键：根据输入张量和其他信息计算，可简单地理解为与硬件平台相关联的标识符&lt;/li&gt;
&lt;li&gt;内核函数：特定硬件平台上实现算子功能的具体代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;深度学习编译&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为什么需要深度学习编译器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编程框架中早期优化方式存在的问题
&lt;ul&gt;
&lt;li&gt;框架维护成本高：对于新硬件和新算子，都需要程序员手动进行算子开发，开发数量呈平方级增长&lt;/li&gt;
&lt;li&gt;性能受限：性能受限于程序员人工优化算子的能力，且没有充分探索计算图的优化空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在深度学习框架中引入深度学习编译机制
&lt;ul&gt;
&lt;li&gt;减少人工开发工作量：可针对不同硬件平台进行代码生成&lt;/li&gt;
&lt;li&gt;便于性能优化：(图层级) 对完整的计算图进行静态分析和全局优化；(算子层级) 利用自动调优技术优化算子，最大限度提升硬件利用率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;什么是深度学习编译器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收以计算图形式表示的深度学习任务，并在指定硬件平台上生成高性能代码&lt;/li&gt;
&lt;li&gt;多个层级中间表示 &amp;amp; 多个层级优化
&lt;ul&gt;
&lt;li&gt;图层级优化：子图替换、常量折叠、公共子表达式删除、布局优化以及算子融合等&lt;/li&gt;
&lt;li&gt;算子层级优化：自动调优，基于搜索和基于多面体模型的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;深度学习编译器与编程框架的关系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深度学习编程框架
&lt;ul&gt;
&lt;li&gt;自行适配厂商提供的计算库或者手写算子来支持不同硬件，这带来了极高的框架维护成本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;深度学习编译器
&lt;ul&gt;
&lt;li&gt;提供跨平台同一的抽象和优化，较为灵活的适配不同的上层级编程框架和底层硬件平台&lt;/li&gt;
&lt;li&gt;经过图层级优化和算子层级优化后，自动生成在目标硬件平台上的高性能算子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;图层级编译优化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不关心特定算子的具体执行过程，关心数据在图中流动过程&lt;/li&gt;
&lt;li&gt;图优化方法：
&lt;ul&gt;
&lt;li&gt;子图替换：将原计算图中的节点 (计算操作) 替换为功能等价但运算逻辑更优的算子&lt;/li&gt;
&lt;li&gt;常量折叠：如&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;16&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mn&gt;16&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mn&gt;24&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;16*16*24&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 为定值，则计算其值后带入此定值&lt;/li&gt;
&lt;li&gt;公共子表达式删除&lt;/li&gt;
&lt;li&gt;代数化简：将代价高的计算换为等价代价低的运算（如表达式中出现乘 0，此表达式结果直接为 0）&lt;/li&gt;
&lt;li&gt;布局优化：输入布局影响执行性能 (使用 Tensor Core 计算相同数据时，采用 NHWC 格式的性能普遍优于 NCHW 格式)&lt;/li&gt;
&lt;li&gt;算子融合
&lt;ul&gt;
&lt;li&gt;纵向：
&lt;ul&gt;
&lt;li&gt;函数调用有开销，外设的函数调用开销巨大&lt;/li&gt;
&lt;li&gt;将多个小算子融合为一个大算子进行执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;横向
&lt;ul&gt;
&lt;li&gt;多个小的矩阵乘可以合并为一个大的矩阵乘&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实现：对源码遍历，在遍历过程中对图进行变换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算子层级编译优化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接受图层级优化后的计算图节点作为输入，将其下降到算子层中间表示上，最终生成目标硬件后端上的代码&lt;/li&gt;
&lt;li&gt;算子层级中间表示
&lt;ul&gt;
&lt;li&gt;抽象建模一个计算及其在设备上的具体执行流程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;算子调度
&lt;ul&gt;
&lt;li&gt;针对目标硬件后端上的计算特性和访存特性进行优化&lt;/li&gt;
&lt;li&gt;通过循环变换来匹配目标平台的体系结构特性 (包括计算特性和访存特性)
&lt;ul&gt;
&lt;li&gt;算子的具体实现通常表现为嵌套循环程序&lt;/li&gt;
&lt;li&gt;循环分块 (tiling) 优化、循环向量化 (Vectorize) 等&lt;/li&gt;
&lt;li&gt;优点：提升缓存命中率和 (在 CPU 平台上) 使用向量化加速&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个完整的调度是由多个调度原语构成的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自动调优
&lt;ul&gt;
&lt;li&gt;自动确定最优的调度配置&lt;/li&gt;
&lt;li&gt;通过搜索的方式确定合适的调度配置
&lt;ul&gt;
&lt;li&gt;空间探索：一个点代表一种配置&lt;/li&gt;
&lt;li&gt;性能测量：测试某种配置下的程序性能&lt;/li&gt;
&lt;li&gt;代价模型：对性能进行评估，并选择配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分布式训练&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为什么需要分布式训练&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大模型及其相关应用蓬勃发展
&lt;ul&gt;
&lt;li&gt;参数数量的增加带来了模型的表达能力和拟合能力提高&lt;/li&gt;
&lt;li&gt;庞大的训练数据使得模型能够学习到更全面的知识和对数据分布的理解 -&amp;gt; 许多从前难以实现的任务变得可行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更大的参数量和更多的训练数据导致训练过程的算力墙和存储墙&lt;/li&gt;
&lt;li&gt;模型大 &amp;amp; 数据多
&lt;ul&gt;
&lt;li&gt;单个计算设备的资源有限，无法存储整个模型的参数或者计算全部的数据集，提升单个设备性能成本远远高于多个设备&lt;/li&gt;
&lt;li&gt;分布式训练技术：拆分任务（拆分训练数据；拆分模型 (计算图)）并由多个设备共同协作完成计算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分布式训练基础&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式架构和分布式同步策略是分布式训练的基础
&lt;ul&gt;
&lt;li&gt;分布式架构：组织和管理分布式训练任务的方式，以最大程度地利用计算资源和提高训练效率&lt;/li&gt;
&lt;li&gt;分布式同步策略：在分布式环境中，为了保证计算节点之间的一致性和正确性，对不同计算节点之间的操作进行协调和同步的策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常使用一下两种架构实现分布式训练
&lt;ul&gt;
&lt;li&gt;参数服务器：中心化的 Parameter Servers 架构，&amp;quot;中心化&amp;quot; 是指将模型参数进行中心化管理，以此实现模型参数的同步
&lt;ul&gt;
&lt;li&gt;将所有节点分为中心点和计算节点两类&lt;/li&gt;
&lt;li&gt;中心点用于存储参数和梯度更新&lt;/li&gt;
&lt;li&gt;计算节点用于完成中心节点下发的实际计算任务，仅与中心节点通信以更新和检索共享参数&lt;/li&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;灵活：通过改变中心节点数量适应不同的负载和数据规模&lt;/li&gt;
&lt;li&gt;高效地参数共享：由中心节点统一管理模型参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;单点故障：单个中心节点故障会影响整个系统&lt;/li&gt;
&lt;li&gt;数据一致性问题：多个计算节点可能同时读取和更新模型参数&lt;/li&gt;
&lt;li&gt;网络通信开销：受通信宽带的限制，中心节点成为系统的瓶颈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;集合通信：去中心化的 Collective Communication 架构中，每个训练节点都有当前全局最新参数，节点间的参数同步通常采用多次设备之间的点对点通信完成的
&lt;ul&gt;
&lt;li&gt;集合通信指一个进程组的所有进程都参与全局通信操作&lt;/li&gt;
&lt;li&gt;集合通信没有中心节点 (也被称为去中心化的架构)
&lt;ul&gt;
&lt;li&gt;每个计算节点都有当前全局最新参数&lt;/li&gt;
&lt;li&gt;节点间的参数同步通常采用多次设备之间的点对点通信完成的&lt;/li&gt;
&lt;li&gt;对芯片的算力和芯片之间的网络通信要求较高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;集合通信的基础操作：发送、接收、赋值、组内进程障碍同步以及节点间进程同步&lt;/li&gt;
&lt;li&gt;基础操作组合后可以得到集合通信中常用的通信原语&lt;/li&gt;
&lt;li&gt;通信原语
&lt;ul&gt;
&lt;li&gt;一对多原语：Broadcast、Scatter&lt;/li&gt;
&lt;li&gt;多对一原语：Gather、Reduce&lt;/li&gt;
&lt;li&gt;多对多原语：All-to-All、All-Gather、All-Reduce、Reduce-Scatter&lt;/li&gt;
&lt;li&gt;一对多广播 (Broadcast)：将一个进程的数据广播到所有进程，常用于分享模型参数&lt;/li&gt;
&lt;li&gt;一对多散射 (Scatter)：将一个进程的数据按索引散射到多个进程，常用语数据分发&lt;/li&gt;
&lt;li&gt;多对一收集 (Gather)：从多个进程收集数据到一个进程，用于收集梯度&lt;/li&gt;
&lt;li&gt;多对多收集 (All-Gather)：从多个进程收集数据，并广播到所有进程，常用语数据同步&lt;/li&gt;
&lt;li&gt;多对一归约 (Reduce)：从多个进程收集数据，并按某种运算 (如求和运算) 归约到一个进程，常用于梯度累加&lt;/li&gt;
&lt;li&gt;多对多归约 (All-Reduce)：从多个进程收集数据，并按某些运算归约，再广播到所有进程，常用于数据同步与梯度累加&lt;/li&gt;
&lt;li&gt;多对多归约散射 (Reduce-Scatter)：从多个进程收集数据，按某种运算归约到一个进程，将该进程的数据按索引散射到对应进程上，用于更新权重&lt;/li&gt;
&lt;li&gt;多对多交换 (All-to-All)：将每个进程中的数据索引发射到其他进程，每个进程接收数据后以发送进程号为索引存储到对应的数据块中，常用于数据同步和信息传递&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式同步策略
&lt;ul&gt;
&lt;li&gt;设备之间的通信采用不同的同步策略
&lt;ul&gt;
&lt;li&gt;同步通信
&lt;ul&gt;
&lt;li&gt;需要等待全部计算节点完成本轮计算后才进行通信&lt;/li&gt;
&lt;li&gt;时序性和顺序性
&lt;ul&gt;
&lt;li&gt;使用同步障确保计算节点之间的数据一致性&lt;/li&gt;
&lt;li&gt;可能会导致较大的延迟和通信开销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同步障的存在确保全部设备完成通信后才可开始下一轮计算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异步通信
&lt;ul&gt;
&lt;li&gt;每个节点可以随时和其他设备进行通信&lt;/li&gt;
&lt;li&gt;更加灵活
&lt;ul&gt;
&lt;li&gt;提高整个分布式训练系统的计算利用率&lt;/li&gt;
&lt;li&gt;但不能保证数据的一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每个设备可以随时处理自己收到的信息，不会因为同步障而带来互相等待的开销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选择合适的分布式同步策略对于保证分布式系统的正确性、性能和可扩展性至关重要
&lt;ul&gt;
&lt;li&gt;数据并行：对输入数据进行分区
&lt;ul&gt;
&lt;li&gt;往往用于解决单节点算力不足的问题。其中，每个设备共享完整的模型副本，输入数据会被分发给这些设备，减小单个设备的负载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模型并行：对模型参数进行分区
&lt;ul&gt;
&lt;li&gt;往往用于解决单节点内存不足的问题。一般模型并行分为算子内并行和算子间并行&lt;/li&gt;
&lt;li&gt;算子内并行：大型算子计算所需内存超过单设备内存容量，对单算子切分；按行切分和按列切分&lt;/li&gt;
&lt;li&gt;算子间并行：模型的总内存需求超过单设备的内存容量，在算子间进行切分
&lt;ul&gt;
&lt;li&gt;模型并行空泡现象：算子间并行中，下游设备需要等待上游设备计算完成，因此下游设备容易长期处于空闲状态&lt;/li&gt;
&lt;li&gt;-&amp;gt; 利用流水线技术缓解空泡现象 (流水并行)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;流水并行
&lt;ul&gt;
&lt;li&gt;在模型并行中构建流水线，并利用流水线调度。该训练系统中，模型的上下游算子会被分配到不同的流水阶段，每个设备负责一个流水阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;混合并行：同时对输入数据和模型参数进行分区&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式计算步骤：
&lt;ul&gt;
&lt;li&gt;将输入进行分区&lt;/li&gt;
&lt;li&gt;将每个分区分发给不同的计算节点，实现并行计算&lt;/li&gt;
&lt;li&gt;合并每个计算节点的输出，得到和单节点等价的计算结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分布式训练框架实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现一个分布式训练框架
&lt;ul&gt;
&lt;li&gt;利用分布式架构和分布式同步策略&lt;/li&gt;
&lt;li&gt;支持常见的分布式训练方法&lt;/li&gt;
&lt;li&gt;达到高效利用设备资源的目的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式训练框架中最主要的两个模块
&lt;ul&gt;
&lt;li&gt;划分模块：划分训练任务；原始计算图可以拆分为多个子计算图
&lt;ul&gt;
&lt;li&gt;数据并行划分：对输入数据进行划分&lt;/li&gt;
&lt;li&gt;模型并行划分：对模型参数进行划分&lt;/li&gt;
&lt;li&gt;混合划分：对输入数据和模型参数都进行划分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通信模块：管理节点之间的通信；在设备之间进行通信，实现模型参数初始化和同步
&lt;ul&gt;
&lt;li&gt;支持基础通信操作和常见的通信原语
&lt;ul&gt;
&lt;li&gt;模型参数发送：初始化时需要将模型参数发送到各个设备数据&lt;/li&gt;
&lt;li&gt;参数梯度平均：计算时需要对各个设备参数梯度平均&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用成熟的通信库作为通信模块的基础&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;深度学习处理器原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#深度学习处理器原理&#34;&gt;#&lt;/a&gt; 深度学习处理器原理&lt;/h4&gt;
&lt;p&gt;通用计算机架构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为什么选用通用处理器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普及、廉价、灵活、适合小模型，少量数据，延迟和成本敏感的推理场景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;冯诺依曼架构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含控制器、运算器、存储器和输入 / 输出&lt;/li&gt;
&lt;li&gt;&amp;quot;存储程序&amp;quot;：指令从主存储器中取出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高速缓存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用来弥补主存和运算器之间的剪刀差&lt;/li&gt;
&lt;li&gt;自动暂存最近读取的数据，以备不久之后再次使用&lt;/li&gt;
&lt;li&gt;通常使用 SRAM 实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;哈佛结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令缓存和数据缓存分离&lt;/li&gt;
&lt;li&gt;允许同时进行取指和访存，互补干扰&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;精简指令集结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关键原则：通过专门的 load/store 指令访存&lt;/li&gt;
&lt;li&gt;实践中，处理器内部将复杂指令首先译为 RISC 微码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分支指令：由运算器计算出下一条指令的地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分支指令计算完成前，暂停取值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多发射：多条互不相关的指令可以同时发射&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以同时利用多个运算器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址生成单元：专用于计算访存地址的运算器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以高效地支持多种寻址模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;寄存器重命名：将寄存器编号与物理寄存器相分离&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消除伪相关，提高指令同时执行的机会&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;乱序执行，有序提交&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现精确例外，可以撤销已执行的指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写入 / 写出队列：暂存已执行、未提交的访存指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以连续发起 load/store 指令，未提交可以撤销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据前递：上一指令运算结果送入下一指令运算单元&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以省去连续运算时反复写入、读出寄存器的动作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分支预测：未确定跳转方向时，按猜测方向投机执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预测正确时：减少等待时间，提高了流水线效率&lt;/li&gt;
&lt;li&gt;预测错误时：不予提交，撤销错误执行的指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么运算只占 1%&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以标量作为基本运算粒度
&lt;ul&gt;
&lt;li&gt;需要更多指令来执行&lt;/li&gt;
&lt;li&gt;任意指令间都潜在依赖，控制很复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存墙现象
&lt;ul&gt;
&lt;li&gt;越来越大、越来越多层次的缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制、寻址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;降低控制开销：循环展开&lt;/li&gt;
&lt;li&gt;降低寻址开销：强度削减&lt;/li&gt;
&lt;li&gt;均为通用技巧，现代编译器已经尽力而为&lt;/li&gt;
&lt;li&gt;没有非常有效的优化方法
&lt;ul&gt;
&lt;li&gt;通用处理器为通用性而设计，深度学习只是一种应用&lt;/li&gt;
&lt;li&gt;虽然深度学习程序行为规整，仍需较多指令才能定义清晰&lt;/li&gt;
&lt;li&gt;每访存一个数据，都必须计算其地址，并控制循环条件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分块 (tiling)：将运算分解至固定尺寸的区块处理&lt;/li&gt;
&lt;li&gt;通用处理器上实现矩乘，这两种实现方式：递归 (分治法)，迭代 (三重循环)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向量指令：允许一条指令并行操作多个数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向量处理器结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以通用处理结构为基础
&lt;ul&gt;
&lt;li&gt;可以保留标量部分，用于控制、寻址和少量标量计算&lt;/li&gt;
&lt;li&gt;也可以完全由向量运算组成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;相对独立地设计向量部分
&lt;ul&gt;
&lt;li&gt;更宽的寄存器、运算、数据通路&lt;/li&gt;
&lt;li&gt;可以借用标量地址生成单元，访问向量数据&lt;/li&gt;
&lt;li&gt;可以增加向量 / 标量数据交换通路，方便控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向量处理器的优势&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(相比标量通用处理器) 运算密度增加，控制寻址开销摊薄&lt;/li&gt;
&lt;li&gt;针对并行应用较为灵活&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向量处理器的缺陷：由于运算增加，访存瓶颈更加严峻&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O 复杂度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序执行时间同时受到两个因素制约
&lt;ul&gt;
&lt;li&gt;I/O 时间
&lt;ul&gt;
&lt;li&gt;访存读取操作数&lt;/li&gt;
&lt;li&gt;写回结果&lt;/li&gt;
&lt;li&gt;读 / 写中间结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;计算时间
&lt;ul&gt;
&lt;li&gt;数据已准备好后，运算单元完成全部计算所需时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;执行时间&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\ge&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7719400000000001em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;I/O 数据量&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;÷&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\div&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.66666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;÷&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 最大访存带宽&lt;/li&gt;
&lt;li&gt;执行时间&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\ge&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7719400000000001em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 计算量&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;÷&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\div&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.66666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;÷&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 峰值运算能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I/O 数据量至少包含最初输入数据 + 最终输出数据&lt;/li&gt;
&lt;li&gt;向量化不会改善访存
&lt;ul&gt;
&lt;li&gt;标量乘：1 次运算，2 个输入，1 个输出，每次运算 I/O 量为 3&lt;/li&gt;
&lt;li&gt;向量乘：n 次运算，2n 个输入，n 个输出，平均到每个运算上，I/O 量仍为 3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;向量处理器需等比例增加运算和带宽&lt;/li&gt;
&lt;li&gt;I/O 复杂度理论用来刻画运算量和 I/O 数据量的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;深度学习处理器概述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么需要深度学习处理器
&lt;ul&gt;
&lt;li&gt;深度学习应用广泛
&lt;ul&gt;
&lt;li&gt;图像识别、语音处理、自然语言处理、博弈游戏等领域&lt;/li&gt;
&lt;li&gt;已渗透到云服务器和智能手机的方方面面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通用 CPU/GPU 处理人工神经网络效率低下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;深度学习处理器发展的三个因素：architecture (结构)、Technology (科技)、Application (应用) 0&lt;/li&gt;
&lt;li&gt;深度学习处理器的能效和通用性处于 ASICs 和 GPU 之间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;深度学习处理器 (DLP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本运算单元从向量运算扩展到矩阵运算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;深度学习处理器在相同带宽下，提供更高运算能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缓存 vs 便笺存储&lt;/li&gt;
&lt;li&gt;深度学习访存行为规律，更适合使用便笺存储&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制：深度学习程序控制流以计数循环为主&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启发：可以特别设计计数跳转指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大多数跳转无需分支预测&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以精简的通用处理器结构为基础&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;省去了分支预测器&lt;/li&gt;
&lt;li&gt;取消数据缓存，I/O 直连外部主存&lt;/li&gt;
&lt;li&gt;添加便笺存储器和直接访存模块 (DMA)&lt;/li&gt;
&lt;li&gt;DMA：代理主存与便笺存储器之间的大块连续数据搬运&lt;/li&gt;
&lt;li&gt;添加矩阵指令的控制单元&lt;/li&gt;
&lt;li&gt;矩阵指令在提交队列中，与标量 / 访存指令同步&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;深度学习处理器优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一条指令完成复杂的线性运算，控制开销低&lt;/li&gt;
&lt;li&gt;同等访存，能达到更强的运算能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DLP 的规模扩展&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用率问题：简单放大矩阵运算单元，导致利用率低下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多核 DLP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相比单体、巨大的矩阵运算单元，分立的多个小矩阵运算单元运用更灵活
&lt;ul&gt;
&lt;li&gt;但相应的，增加硬件成本 (特别是带宽)&lt;/li&gt;
&lt;li&gt;按需设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多核 DLP 结构
&lt;ul&gt;
&lt;li&gt;采用总线式结构，共享主存数据通路
&lt;ul&gt;
&lt;li&gt;发生争用时，总线进行仲裁，决定数据通路的通行权&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将一份完整的 DLP 结构视为一个核&lt;/li&gt;
&lt;li&gt;一致内存访问 (UMA) 模型
&lt;ul&gt;
&lt;li&gt;总线竞争将成为瓶颈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以 UMA 多核为基础，添加局部存储器、运算器，添加局部 DMA，与外部存储直接相连，将一份完整的 UMA 多核 DLP 结构，视为一个核&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大规模深度学习处理器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分型 DLP：以相同规则任意扩展的 DLP 结构
&lt;ul&gt;
&lt;li&gt;同一份分治程序运行在所有的局部控制器上&lt;/li&gt;
&lt;li&gt;无论 DLP 规模多大，在使用者的视角是一样的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;深度学习处理器架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#深度学习处理器架构&#34;&gt;#&lt;/a&gt; 深度学习处理器架构&lt;/h4&gt;
&lt;p&gt;计算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三种计算单元
&lt;ul&gt;
&lt;li&gt;矩阵、向量、标量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;矩阵运算单元
&lt;ul&gt;
&lt;li&gt;一种实现：由内积单元堆叠而成&lt;/li&gt;
&lt;li&gt;计算和 I/O 比例 = 1:3&lt;/li&gt;
&lt;li&gt;多个内积单元组成矩阵乘向量单元&lt;/li&gt;
&lt;li&gt;近端数据 (权值) 存储在内积单元附近的电路中&lt;/li&gt;
&lt;li&gt;采用小而快的存储器&lt;/li&gt;
&lt;li&gt;所有内积单元共享激活值，采用广播&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;矩阵乘向量单元
&lt;ul&gt;
&lt;li&gt;计算密度已经较好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;矩阵乘矩阵单元
&lt;ul&gt;
&lt;li&gt;优势：规模大时，理论较好&lt;/li&gt;
&lt;li&gt;困难：连线复杂，距离远，扇出多&lt;/li&gt;
&lt;li&gt;规模不大时，未取得实际优势&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/03/DcRN2T4QGUrzsYC.png&#34; alt=&#34;向量内积单元&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/03/1AGrcwVqb7uBizK.png&#34; alt=&#34;矩阵乘矩阵单元&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;脉动阵列机
&lt;ul&gt;
&lt;li&gt;由网络状的处理单元组成，每个处理单元都能执行简单的计算操作，例如乘法和加法&lt;/li&gt;
&lt;li&gt;数据以脉冲的形式流动，每个处理单元在每个脉冲周期执行一次计算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/03/bFvNUSOo8H3VWGg.png&#34; alt=&#34;脉动阵列机&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;脉动阵列机 vs 矩阵乘矩单元&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优势：
&lt;ul&gt;
&lt;li&gt;计算 - I/O 比例更高 (脉动阵列机为 1:0.2；矩阵乘矩阵单元为 1:0.4)&lt;/li&gt;
&lt;li&gt;电路采用局部短连接&lt;/li&gt;
&lt;li&gt;扇出少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;困难：
&lt;ul&gt;
&lt;li&gt;延迟高，需要等待启动 / 排空&lt;/li&gt;
&lt;li&gt;专用性更强，高效支持矩乘 / 卷积，但很难改造为同时支持其他功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向量和标量单元&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要功能
&lt;ul&gt;
&lt;li&gt;池化、归一化&lt;/li&gt;
&lt;li&gt;Dropout、ReLU、Sigmoid、Softmax 等特殊变换&lt;/li&gt;
&lt;li&gt;求最大 / 最小值，排序，计数，前缀求和等&lt;/li&gt;
&lt;li&gt;数据重新排布&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;池化 / 均一化：运算单元结构 - 支持 AvgPool、MaxPool、BatchNorm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/03/3oBfz57v8GkcShZ.png&#34; alt=&#34;向量和标量单元&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;精确计算特殊函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分段线性插值在深度学习推理任务中，基本满足需求&lt;/li&gt;
&lt;li&gt;精确计算可以采用硬件或软件的方法
&lt;ul&gt;
&lt;li&gt;各函数的快速数值算法&lt;/li&gt;
&lt;li&gt;数值方法&lt;/li&gt;
&lt;li&gt;分段插值 / 快速估计 + 数值方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据重排布&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以向量为单位，很难使向量上不同位置的数据相遇&lt;/li&gt;
&lt;li&gt;因为便笺访问是对齐的&lt;/li&gt;
&lt;li&gt;使用排列网络&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/05/03/7hxrOIPWDt24wE8.png&#34; alt=&#34;例子&#34; /&gt;&lt;/p&gt;
&lt;p&gt;计算小结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;矩阵运算单元
&lt;ul&gt;
&lt;li&gt;可设计为矩阵乘向量单元、矩阵乘法单元、脉动阵列机等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;向量 / 标量运算单元
&lt;ul&gt;
&lt;li&gt;增设累加寄存器，可以实现池化
&lt;ul&gt;
&lt;li&gt;一组硬件可以同时支持多种功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;采用分段线性近似可以计算特殊函数&lt;/li&gt;
&lt;li&gt;增设前缀计算、重排布等功能，有助于拓展通用性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;访存：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问便笺存储器
&lt;ul&gt;
&lt;li&gt;便笺存储器大多采用 SRAM 实现&lt;/li&gt;
&lt;li&gt;便笺是 DLP 核当中的数据枢纽&lt;/li&gt;
&lt;li&gt;缓解拥堵：拓宽道路、规划车流&lt;/li&gt;
&lt;li&gt;多端口 SRAM (拓宽道路)
&lt;ul&gt;
&lt;li&gt;增加一个端口，面积 + 50%~100%&lt;/li&gt;
&lt;li&gt;面积意味着成本、能耗、延时&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分组 SRAM (拓宽道路)
&lt;ul&gt;
&lt;li&gt;开关阵列面积～O (分组数量 ^2)&lt;/li&gt;
&lt;li&gt;分组冲突&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通用处理器中，采用哈佛结构解决取值 - 取数冲突 (规划车流)&lt;/li&gt;
&lt;li&gt;分离式编筏存储器 (二分离 / 三分离)(规划车流)
&lt;ul&gt;
&lt;li&gt;按数据划分
&lt;ul&gt;
&lt;li&gt;神经元 / 权值&lt;/li&gt;
&lt;li&gt;输入神经元 / 输出神经元 / 权值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按功能划分
&lt;ul&gt;
&lt;li&gt;向量 / 标量&lt;/li&gt;
&lt;li&gt;矩阵 / 向量 / 标量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按处理阶段划分
&lt;ul&gt;
&lt;li&gt;输入数据 / 累加器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对数据进行分流：提高处理效率；对使用方式进行了约束 (损失通用性)&lt;/li&gt;
&lt;li&gt;体系结构设计人员的职责：寻找一组高效、合理的约束&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;访问外部存储器
&lt;ul&gt;
&lt;li&gt;通用处理器的访存
&lt;ul&gt;
&lt;li&gt;持续数个周期&lt;/li&gt;
&lt;li&gt;访存和计算争用取指译码资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;简化硬件模型描述
&lt;ul&gt;
&lt;li&gt;计算模块：随时执行收到的指令&lt;/li&gt;
&lt;li&gt;DMA 模块：随时执行收到的指令&lt;/li&gt;
&lt;li&gt;指令发射模块：
&lt;ul&gt;
&lt;li&gt;计算指令发射到计算模块&lt;/li&gt;
&lt;li&gt;访存指令发射到 DMA 模块&lt;/li&gt;
&lt;li&gt;遇到 sync 时：阻塞，直到整个处理器空闲下来，再发射新的指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;与计算的协同&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;访存小结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;便笺存储器时 DLP 核心的数据枢纽
&lt;ul&gt;
&lt;li&gt;访问便笺可能成为瓶颈&lt;/li&gt;
&lt;li&gt;拓宽道路：增加端口、设计为分组 SRAM (代价：硬件开销增加)&lt;/li&gt;
&lt;li&gt;规划车流：根据算法特征，采用分离式设计模式 (代价：降低通用性)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过软件流水线 (而不再是硬件) 使计算 / 访存并行起来
&lt;ul&gt;
&lt;li&gt;指令重新排序，不需要乱序执行&lt;/li&gt;
&lt;li&gt;显式控制同步，不需要依赖检查&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通信：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;任务划分模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据并行：全局归约
&lt;ul&gt;
&lt;li&gt;通过一个环，就可以高效实现全局归约&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模型并行
&lt;ul&gt;
&lt;li&gt;算子并行：全局交换&lt;/li&gt;
&lt;li&gt;流水线并行：局部通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常用物理链路设计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总线
&lt;ul&gt;
&lt;li&gt;性能差，成本低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;片上网络
&lt;ul&gt;
&lt;li&gt;性能较好，成本可控&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;交叉开关阵列
&lt;ul&gt;
&lt;li&gt;性能最佳，成本高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通信结构的设计原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑上：环状链路足以高效完成通信&lt;/li&gt;
&lt;li&gt;物理上：链路设计适当增加冗余，按需配置环路&lt;/li&gt;
&lt;li&gt;综合考虑性能和成本约束做出选择&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优化设计：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用优化设计：
&lt;ul&gt;
&lt;li&gt;变换：对算法进行变换，削减计算强度
&lt;ul&gt;
&lt;li&gt;快速矩阵乘法算法&lt;/li&gt;
&lt;li&gt;快速卷积算法&lt;/li&gt;
&lt;li&gt;算子融合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;压缩：对算法进行压缩，直接减少算法的参数量和计算量
&lt;ul&gt;
&lt;li&gt;网络裁剪&lt;/li&gt;
&lt;li&gt;结构化稀疏&lt;/li&gt;
&lt;li&gt;串行计算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;近似：对算法进行近似替代，降低计算成本
&lt;ul&gt;
&lt;li&gt;数值量化
&lt;ul&gt;
&lt;li&gt;思路：将数值替换为更容易计算得近似值&lt;/li&gt;
&lt;li&gt;方法：用低精度数值近似高精度，辅以误差校正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;算法近似
&lt;ul&gt;
&lt;li&gt;思路：从算法上将计算分解，提取出主要部分&lt;/li&gt;
&lt;li&gt;低秩分解&lt;/li&gt;
&lt;li&gt;差分计算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;随机计算
&lt;ul&gt;
&lt;li&gt;思路：将数值编码成随机比特串进行计算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非传统结构和器件：探索采用 CMOS 数字电路以外的技术，改写计算范式
&lt;ul&gt;
&lt;li&gt;存内计算
&lt;ul&gt;
&lt;li&gt;思路：利用内存结构，在内存部分完成一些计算功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;神经拟态计算
&lt;ul&gt;
&lt;li&gt;思路：数值可以用模拟物理量来表达&lt;/li&gt;
&lt;li&gt;计算发生在权值的存储矩阵内&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;智能编程语言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#智能编程语言&#34;&gt;#&lt;/a&gt; 智能编程语言&lt;/h4&gt;
&lt;p&gt;为什么需要智能编程语言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语义鸿沟 -&amp;gt; 开发效率低&lt;/li&gt;
&lt;li&gt;硬件鸿沟 -&amp;gt; 执行效率低&lt;/li&gt;
&lt;li&gt;平台鸿沟 -&amp;gt; 可移植性差&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;语义鸿沟&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同编程语言实现同一种运算使用的语句数量不同&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;硬件鸿沟&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;智能计算硬件在控制、存储和计算等方面有独特性&lt;/li&gt;
&lt;li&gt;传统编程语言难以有效描述上述硬件特点&lt;/li&gt;
&lt;li&gt;不同层次编程语言和硬件特性带来的性能影响&lt;/li&gt;
&lt;li&gt;存储逻辑上
&lt;ul&gt;
&lt;li&gt;智能处理器一般采用程序员可见的 SPM，而不是通用平台上程序员透明的 Cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;计算逻辑上
&lt;ul&gt;
&lt;li&gt;智能处理器提供了面向智能计算的定制运算单元，如 16 位浮点、Brain 浮点等，当前编程语言层面主要提供的是 int 和 fp32 等数据类型，难以高效利用这些运算单元&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;平台鸿沟&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能可移植性
&lt;ul&gt;
&lt;li&gt;采用特定平台专用语言所编写的程序能够在别的平台上正常运行&lt;/li&gt;
&lt;li&gt;矩阵乘法中调用的 AVX intrinsic 函数在 ARM 上无法运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能可移植性
&lt;ul&gt;
&lt;li&gt;在特定平台上优化好的程序，在新的硬件平台仍然保证有较高的执行效率&lt;/li&gt;
&lt;li&gt;理想的编程语言需抽取不同硬件平台的共性特征，在此基础上提取性能关键特征作为语言特性提供给用户&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;智能计算系统抽象架构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;抽象硬件架构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;层次化的智能计算系统抽象硬件架构
&lt;ul&gt;
&lt;li&gt;智能计算系统中每一层都包含存储单元、控制单元和若干个计算单元&lt;/li&gt;
&lt;li&gt;每个计算单元又进一步分解为子控制单元和子存储单元三部分，整个系统以这样的方式递归构成&lt;/li&gt;
&lt;li&gt;在最底层，每个叶节点都是具体的加速器，用于完成最基本的计算任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;典型智能计算系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多卡的 DLP 服务器抽象为五个层次
&lt;ul&gt;
&lt;li&gt;服务器级&lt;/li&gt;
&lt;li&gt;板卡级&lt;/li&gt;
&lt;li&gt;芯片级&lt;/li&gt;
&lt;li&gt;处理器簇级&lt;/li&gt;
&lt;li&gt;处理器核级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令是实现对计算和存储进行控制的关键。为了设计高效的指令集、需要充分分析智能领域的典型计算模式，提炼最具有代表性的操作，并进行针对性设计
&lt;ul&gt;
&lt;li&gt;对智能算法进行抽象
&lt;ul&gt;
&lt;li&gt;控制&lt;/li&gt;
&lt;li&gt;数据传输&lt;/li&gt;
&lt;li&gt;计算：标量、向量和矩阵运算等&lt;/li&gt;
&lt;li&gt;逻辑操作：标量和向量运算等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关注计算与存储的交互
&lt;ul&gt;
&lt;li&gt;尽可能将计算与存储并行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序员可见的主要包括定制运算单元和并行计算架构&lt;/li&gt;
&lt;li&gt;定制运算单元
&lt;ul&gt;
&lt;li&gt;利用智能应用误差容忍的特性，采用定制的低位宽运算单元以提升处理能效&lt;/li&gt;
&lt;li&gt;由于智能应用的多样性与复杂性，对于哪种低位宽最为合适并未形成统一结论&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;并行计算架构
&lt;ul&gt;
&lt;li&gt;任务切分与同步&lt;/li&gt;
&lt;li&gt;程序员需关注如何对任务进行切分，将任务尽量均衡地分配到大量并行计算单元上执行&lt;/li&gt;
&lt;li&gt;对于每个层次中的计算单元，需要有相应的计算同步机制，以保证切分后任务间的依赖关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;智能应用中存在大量数据集的内存访问，因此合理地组织存储层次和计算单元同样重要，需要两者协同设计以平衡计算与访存，实现高效的智能计算&lt;/li&gt;
&lt;li&gt;分为全局存储和本地存储&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;智能编程模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;异构编程模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分类及流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;异构编程模型的编译与链接流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整体采用分离式编程方式：主机端代码和设备端代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异构编程模型从用户接口角度分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建全新的异构并行编程语言&lt;/li&gt;
&lt;li&gt;对现有编程语言进行异构并行扩展&lt;/li&gt;
&lt;li&gt;语言扩展：OpenCL，CUDA&lt;/li&gt;
&lt;li&gt;新语言：Copperhead，Merge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译器支持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译器支持：是异构并行编程模型的核心
&lt;ul&gt;
&lt;li&gt;任务划分：编程模型需要向程序员提供并行编程接口，方便程序员定义和划分任务。编译器负责底层的任务划分，使得程序可以在并行架构上高效执行&lt;/li&gt;
&lt;li&gt;数据分布：对编译器和底层运行时系统而言，需要根据算法和硬件架构的特点，通过合适的数据分布指导后续编译和运行时优化&lt;/li&gt;
&lt;li&gt;数据通信：由于设备端通常有多级存储空间、编译器需要支持各种地址空间声明，以方便程序员显式控制存储数据的地址空间&lt;/li&gt;
&lt;li&gt;并行同步：设备端程序一般要求感知多个核的并行处理，因此需要提供对同步机制的支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行时支持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行时支持
&lt;ul&gt;
&lt;li&gt;完成任务映射及调度，即指定任务具体在哪个设备或计算单元上以何种顺序执行&lt;/li&gt;
&lt;li&gt;分为主机端和设备端
&lt;ul&gt;
&lt;li&gt;主机端：控制部分和串行任务在主机端执行&lt;/li&gt;
&lt;li&gt;设备端：计算部分和并行任务在设备端执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DLP 编程模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Kernel 定义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义在设备端 DLP 上的核心计算任务&lt;/li&gt;
&lt;li&gt;与异构编程模型的概念一致，DLP 上执行的任务叫 Kernel，资源允许的情况下 DLP 可以同时执行多个并行的 Kernel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译器支持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定 DLP 上核心计算任务如何高效地翻译成目标代码&lt;/li&gt;
&lt;li&gt;任务划分
&lt;ul&gt;
&lt;li&gt;并行内建变量&lt;/li&gt;
&lt;li&gt;任务调度类型：
&lt;ul&gt;
&lt;li&gt;表示 Kernel 运行调度时需要的内核&lt;/li&gt;
&lt;li&gt;BLOCK 类型：Kernel 为单核任务，按单核进行调度&lt;/li&gt;
&lt;li&gt;UNIONx 类型：Kernel 为多核并行任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据通信：为 DLP 的复杂存储层次提供支持
&lt;ul&gt;
&lt;li&gt;隐式数据管理：GPR 标量数据，由编译器隐式插入 Load/Store 指令&lt;/li&gt;
&lt;li&gt;显式数据管理：DRAM/NRAM/WRAM/SRAM 间向量及张量数据&lt;/li&gt;
&lt;li&gt;主机 - DLP 间 DRAM 数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同步支持：为并行架构提供支持
&lt;ul&gt;
&lt;li&gt;抽象硬件架构中由 Clip-Cluster-Core 的层次结构，Core 内还支持指令队列之间的并行，因此智能编程语言需要提供至少三种不同类型的同步操作：同步一个 Core 内所有的指令队列；同步一个 Cluster 内部的所有核；同步任务执行的所有核&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内建运算：为用户编程提供支持，提高开发效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行时支持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定 DLP 上核心计算任务以何种方式映射到计算单元&lt;/li&gt;
&lt;li&gt;任务调度单位
&lt;ul&gt;
&lt;li&gt;将 Kernel 中的任务在时间或空间维度展开&lt;/li&gt;
&lt;li&gt;调度单位需要用户在编程时指定。运行时只有当空闲的硬件资源数大于调度单位时，Kernel 才会被调度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;队列
&lt;ul&gt;
&lt;li&gt;管理需要执行的任务，队列既可以单独工作，也可以协同工作&lt;/li&gt;
&lt;li&gt;运行时不断把任务放到队列中，一旦硬件计算资源有空闲，就从队列中取出一个任务执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异构计算系统组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通用处理器
&lt;ul&gt;
&lt;li&gt;控制设备 (简称主机端)，负责控制和调度等工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;领域处理器
&lt;ul&gt;
&lt;li&gt;从设备 (简称设备端)，负责大规模的并行计算或领域专用计算任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;二者协同完成完整计算任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;典型异构计算系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GPU 为核心、FPGA 为核心、TPU 为核心、DLP 为核心&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;智能编程语言基础&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;语法概述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;智能编程语言考虑基于过程式语言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前大多数语言都是过程式的，可以减少用户学习成本&lt;/li&gt;
&lt;li&gt;当前主流智能算法可以描述为明确的过程，适合采用过程式语言描述&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义函数与 C 语言一致：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;int add_func(int a,int b)&amp;#123;
    int c=a+b;
    return c;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int8_t：1 字节整数&lt;/li&gt;
&lt;li&gt;uint8_t：1 字节无符号整数&lt;/li&gt;
&lt;li&gt;int16_t：2 字节整数&lt;/li&gt;
&lt;li&gt;uint16_t：2 字节无符号整数&lt;/li&gt;
&lt;li&gt;int32_t：4 字节整数&lt;/li&gt;
&lt;li&gt;uint32_t：4 字节无符号整数&lt;/li&gt;
&lt;li&gt;half：半精度浮点数据类型，采用 IEEE-754 fp 16 格式，2 字节&lt;/li&gt;
&lt;li&gt;float：IEEE-754 fp 32 格式浮点类型，目前仅支持类型转换计算，4 字节&lt;/li&gt;
&lt;li&gt;char：对应 C 语言 char 类型&lt;/li&gt;
&lt;li&gt;bool：对应 C 语言 bool 类型&lt;/li&gt;
&lt;li&gt;指针：指针类型（8 字节）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;宏、常量与内置变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;宏和常量，宏不仅可以定义常量数据，也可定义一段代码；常量是不可修改的数据，只能在初始化时被赋值&lt;/li&gt;
&lt;li&gt;内置变量，编程语言本身包含的常量和变量，不需用户定义即可直接使用&lt;/li&gt;
&lt;li&gt;coreId：DLP 中核的编号&lt;/li&gt;
&lt;li&gt;clusterId：DLP 中簇的编号&lt;/li&gt;
&lt;li&gt;taskId：程序运行时分配的任务编号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O 操作语句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不同层次的智能处理节点由各自的本地存储，需要提供不同存储层次间的数据搬移&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;典型的 NUMA 架构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同处理器核对应不同位置存储器的访问速度不同&lt;/li&gt;
&lt;li&gt;对于核 0 而言，其访问设备内存 DDR0 的速度比访问 DDR1 的速度更快。DDR0 可看作是本地存储，DDR1 可看作全局存储&lt;/li&gt;
&lt;li&gt;片上存储，除了单核内 NRAM 和权值 WRAM，还有一类共享存储，可用于簇内多核共享&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;针对搬移操作类型，可以在智能编程语言中定义相应的内建函数_memcpy，方便用户进行不同类型的数据搬移&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;void _memcpy(void* dst,void* src,uint32 bytes,Direction_t dir);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标量计算语句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标量即单个数据的计算，标量计算是编程语言的基本功能
&lt;ul&gt;
&lt;li&gt;智能编程语言的标量计算语句由两种形式：运算符号 (+,-,*,/)；内建函数 (abs,max,min)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;智能编程语言的标量计算由编译器映射到标量计算单元，虽然吞吐量上不及张量计算，但具有良好的通用性和灵活性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;张量计算语句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;张量计算是智能编程语言的主要特点，可以通过内建函数直接映射到张量单元&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;__vector_add(DType* dst,const DType* lhs,const DType* rhs,int elem_num); //向量对位加
__vector_sub(DType* dst,const DType* lhs,const DType* rhs,int elem_num); //向量对位减
__vector_mul(DType* dst,const DType* lhs,const DType* rhs,int elem_num); //向量对位乘
__vector_relu(DType* dst,const DType* src,int elem_num); //向量Relu
__vector_argmax(DType* dst,const DType* src,int elem_num); //向量ArgMax
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制流语句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与通用编程语言一样，智能编程语言同样需要由分支和循环等控制流语句
&lt;ul&gt;
&lt;li&gt;分支语句：处理程序选择逻辑，与传统编程语言类似&lt;/li&gt;
&lt;li&gt;循环语句：处理程序循环逻辑，与传统编程语言类似&lt;/li&gt;
&lt;li&gt;同步语句：解决多核间并行数据依赖问题，保证最终计算结果正确
&lt;ul&gt;
&lt;li&gt;核内同步 (__sync)&lt;/li&gt;
&lt;li&gt;Cluster 内同步 (__sync_cluster)&lt;/li&gt;
&lt;li&gt;全局同步 (__sync_all)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;串行程序示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;向量中每个数求平方，每次处理 64 个数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define BASE_NUM 64
void __dlp_entry__ mySquare(float* in,float* out,int size)&amp;#123;
    int quotient = size/BASE_NUM;
    int remainer = size%BASE_NUM;
    __nram__ float tmp[BASE_NUM];
    for(int i=0;i&amp;lt;quotient;i++)&amp;#123;
        __memcpy(tmp,(in+i*BASE_NUM),(BASE_NUM*sizeof(float)),GDRAM2NRAM);
        __vec_mul(tmp,tmp,tmp,BASE_NUM);
        __memcpy((out+i*BASE_NUM),tmp,(BASE_NUM*sizeof(float)),NRAM2GDRAM);
    &amp;#125;
    if (remainder!=0)&amp;#123;
        __memcpy(tmp,(in+quotient*BASE_NUM),(remainder*sizeof(float)),GDRAM2NRAM);
        __vec_mul(tmp,tmp,tmp,remainder);
        __memcpy((out+quotient*BASE_NUM),tmp,(remainder*sizeof(float)),NRAM2GDRAM);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;并行程序示例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;矩阵乘法实例，在 4 个核上并行执行，每个核上代码一致&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;计算 1*32 和 32*32 的矩阵乘法，最终得到 4*32 的结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过运行时 API 来指定任务规模 (4*1*4) 及调度方式 (UNION1)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;void __dlp__entry__ mm(int* left,int* right,int* out)&amp;#123; //设备端
    if(taskID==0)&amp;#123;
        __nram__ int tmp[42][42];
        __write_zero(tmp,4*32*sizeof(int));
        __memcpy(out,tmp,4*32*sizeof(int),NRAM2GDRAM);
    &amp;#125;
    __sync_all();
    for(int j=0;j&amp;lt;32;j++)&amp;#123;
        for(int k=0;k&amp;lt;32;k++)&amp;#123;
            out[taskIdX*32+j]+=left[taskIdX*32+k]*right[k*32+j];
        &amp;#125;
    &amp;#125;
&amp;#125;
//主机端
//任务规模
Dim_t dim; dim.x=4;dim.y=1;dim.z=1;
int left[4][32];int right[32][32];int out[4][32];
...
KernelParamsBuffer_t params;
GetKernelParamsBuffer(&amp;amp;params);
KernelParamsBufferAddParam(params,&amp;amp;left_dev,sizeof(void*));
KernelParamsBufferAddParam(params,&amp;amp;right_dev,sizeof(void*));
KernelParamsBufferAddParam(params,&amp;amp;out_dev,sizeof(void*));
...
//启动4个核并执行矩阵乘法
InvokeKernel((void*)(&amp;amp;mm),dim,params,UNION1,queue);
SyncQueue(queue);
//调度类型
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;智能应用编程接口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kernel 函数接口
&lt;ul&gt;
&lt;li&gt;主要关注任务切分和到硬件的映射&lt;/li&gt;
&lt;li&gt;为了充分利用并行资源，需要在 Kernel 内部对任务进行有效切分，同时在主机配置和调用相应的 Kernel 函数接口&lt;/li&gt;
&lt;li&gt;任务切分的内置变量
&lt;ul&gt;
&lt;li&gt;coreDim (核维数)、coreId (核序号)、clusterDim (簇维数)、clusterId (簇序号)、taskDim (任务维数)、taskId (任务序号)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主机端 Kernel 函数接口
&lt;ul&gt;
&lt;li&gt;用于将智能编程语言编写的程序加载到深度学习处理器上执行&lt;/li&gt;
&lt;li&gt;Kernel 函数相关的接口主要关注 Kernel 参数设置和 Kernel 调用&lt;/li&gt;
&lt;li&gt;InvokeKernel(const void *kernel,dlpDim3_t dim,FunctionType_t ktype,void **args,size_t reserved,Queue_t queue);&lt;/li&gt;
&lt;li&gt;DLP 还可以通过编译器和运行时的配合，实现 foo&amp;lt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&amp;gt;() 语法糖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;运行时接口
&lt;ul&gt;
&lt;li&gt;主要关注设备管理、队列和内存管理等&lt;/li&gt;
&lt;li&gt;包括设备管理、队列管理和内存管理等接口
&lt;ul&gt;
&lt;li&gt;设备管理：主要涉及设备获取和设置、属性获取操作
&lt;ul&gt;
&lt;li&gt;Init 和 Destroy 可由运行时库隐式自动完成，无需用户感知&lt;/li&gt;
&lt;li&gt;GetDevice (int *pOrdinal); 获取主机端当前线程上下文所使用的设备序号&lt;/li&gt;
&lt;li&gt;SetDevice (int ordinal); 为当前主机端线程设置所使用的设备序号&lt;/li&gt;
&lt;li&gt;DeviceGetAtrribute (int *pValue,DeviceAttr_t attr,int devive); 获取设备属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;队列管理
&lt;ul&gt;
&lt;li&gt;队列是用于执行任务的环境&lt;/li&gt;
&lt;li&gt;计算任务可以下发到队列中执行&lt;/li&gt;
&lt;li&gt;同一个队列可以容纳多个任务&lt;/li&gt;
&lt;li&gt;队列具有以下属性：
&lt;ul&gt;
&lt;li&gt;串行性、异步性、并行性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QueueCreate(Queue_t *pQueue);&lt;/li&gt;
&lt;li&gt;QueueSync(Queue_t queue);&lt;/li&gt;
&lt;li&gt;QueueDestroy(Queue_t queue);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存管理
&lt;ul&gt;
&lt;li&gt;内存管理主要分为主机端内存管理、设备端内存管理和主机与设备端内存拷贝三类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用示例&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;__dlp_entry__ void kernel(int *input,int len,int *output)&amp;#123; //完成Device端的Kernel函数编写
    int sum=0;
    for(int i=0;i&amp;lt;len;i++)&amp;#123;
        sum+=input[i];
    &amp;#125;
    *output=sum;
&amp;#125;
//对于每个智能编程语言编写的程序，有且仅有一个标记为__dlp_entry__的函数,表示整个函数的入口，其返回值必须是void
//Host端代码
//1、设备隐式初始化和获取设备属性
int main()&amp;#123;
    int ordinal=-1;
    GetDevice(*ordinal);
    int value=0;
    DeviceGetAttribute(&amp;amp;value,AttrClusterCount,ordinal);
    printf(&amp;quot;device:%d,AttrClusterCount:%d.\n&amp;quot;,ordinal,value);
    return 0;
&amp;#125;
//设备的初始化和销毁由运行时库隐式自动完成
//使用GetDevice可以获取当前的设备序号
//使用DeviceGetAttribute可以获取当前设备的属性
//2、主机/设备端数据准备
//3、设备端内存空间分配
half* d_input;
half* d_output;
half* dlp_result;
hostMalloc(dlp_result,data_num*sizeof(half));
devMalloc((void**)&amp;amp;d_input,data_num*sizeof(half));
devMalloc((void**)&amp;amp;d_output,data_num*sizeof(half));
//4、数据至设备端拷贝
Memcpy(d_input,h_a_half,data_num*sizeof(half),HOST2DEV);
//5、调用Kernel启动设备
//Runtime APL
void *args[]=&amp;#123;&amp;amp;d_input,&amp;amp;size,&amp;amp;d_output&amp;#125;;
InvokeKernel((const void*)kernel,dim,func_type,0,queue);
//Grammar sugar.
kernel&amp;lt;&amp;lt;&amp;lt;dim,func_type,queue&amp;gt;&amp;gt;&amp;gt;(d_input,size,d_output);
//6、运行结果获取
Memcpy(dlp_result,d_output,data_num*sizeof(half),DEV2HOST);
//7、资源释放
devFree(d_input);
devFree(d_output);
hostFree(dlp_result);
QueueDestroy(pQueue);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;智能编程模型实例：BANG 异构编程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BANG 语言是针对 MLU 硬件提出的编程语言，兼顾云边端等不同目标平台，提高高性能机器学习计算支持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供通用的异构编程模型，方便用户扩展自己的应用程序&lt;/li&gt;
&lt;li&gt;提供高效的编程接口，充分发挥底层硬件特性&lt;/li&gt;
&lt;li&gt;基于 C/C++ 语言的扩展，简单易用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BANG 异构编程：流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机端和设备端程序分开编程并分别编译，最后链接成一个可执行程序&lt;/li&gt;
&lt;li&gt;主机端为 C/C++ 程序，通常调用 CNRT 运行时接口完成以下步骤&lt;/li&gt;
&lt;li&gt;1、准备输入数据；2、拷贝输入数据到 MLU；3、准备 Kernel 函数；4、创建 Queue；5、指定 Kernel 任务规模以及调度类型；6、启动 Kernel；7、MLU 到主机的输出数据拷贝；8、资源的释放&lt;/li&gt;
&lt;li&gt;cnrtGetDevice (获取设备)，cnrtQueueCreate (创建一个新的 Queue，默认异步运行)，cnrtQueueDestroy (销毁 Queue)，cnrtQueueSync (直到之前 Queue 中所有的 Function 都完成，阻塞其他 Function)，cnrtInvokeKernel (通过在 MLU 上给定的参数块，启动 Kernel)，foo&amp;lt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&amp;gt;()(编译器和运行时配合完成的语法糖，可替代 cnrtInvokeKernel)，cnrtMalloc (分配给定空间的设备内存)，cnrtFree (释放指针指向的空间),cnrtMemcpy (从源地址拷贝指定字节数到目的地址)&lt;/li&gt;
&lt;li&gt;设备端使用 BANG 语言特定的语法规则和接口进行编程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BANG 程序编译与链接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BANG 的源码可以写在同一份源码文件中，编译器自动完成主机端和设备端的编译和链接
&lt;ul&gt;
&lt;li&gt;foo.mlu 混合编程源码被 cncc 前端 driver 拆分成主机和设备源码&lt;/li&gt;
&lt;li&gt;主机端源码使用 clang 进行编译，得到主机端的二进制对象文件&lt;/li&gt;
&lt;li&gt;设备端源码根据指定的单一 arch 或多 arch，分别编译成目标 arch 的对象文件&lt;/li&gt;
&lt;li&gt;设备端多 arch 的 bin 对象被设备端链接器链接成 fatbin，并包装成主机端可识别的对象文件&lt;/li&gt;
&lt;li&gt;主机端链接器将主机和设备端对象文件链接为可执行文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;张量计算语句实例：BANG 数学库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BANG 语言将 MLU 的数学类和神经网络类指令封装成库函数&lt;/li&gt;
&lt;li&gt;BANG 数学库函数是在 MLU 架构上进行高性能编程的关键&lt;/li&gt;
&lt;li&gt;使用约束：张量计算通常是对批量数据进行操作
&lt;ul&gt;
&lt;li&gt;源和目的都是 NRAM 上的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;智能应用功能调试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能调试接口
&lt;ul&gt;
&lt;li&gt;__assert(bool flag)：abort the kernel if flag is false&lt;/li&gt;
&lt;li&gt;__abort(): exit the kernel with error code -1&lt;/li&gt;
&lt;li&gt;exit(int status): exit the kernel with code status&lt;/li&gt;
&lt;li&gt;printf (&amp;quot;&amp;lt; 格式化字符串&amp;gt;&amp;quot;，&amp;lt; 参数变量 &amp;gt;)：将字符打印到屏幕&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BANG 调试：格式化输出
&lt;ul&gt;
&lt;li&gt;在设备侧代码中可以使用 printf 实现格式化输出，输出结果默认打印到控制台&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;功能调试工具
&lt;ul&gt;
&lt;li&gt;面相智能编程语言 BCL 的调试器&lt;/li&gt;
&lt;li&gt;整体流程：调试前准备、调试器托管、状态查看及错误分析&lt;/li&gt;
&lt;li&gt;调试前准备：
&lt;ul&gt;
&lt;li&gt;配置调试目标设备号&lt;/li&gt;
&lt;li&gt;增加调试信息时，编译时使用 - g 选项&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调试器托管
&lt;ul&gt;
&lt;li&gt;通过调试器执行被调试的程序来实现托管。由于是异构程序，必须从主机端程序启动。&lt;/li&gt;
&lt;li&gt;针对多核架构 DLP 考虑在不同核间切换，可以用 info 命令查看调试焦点，并使用 focus 命令进行切换&lt;/li&gt;
&lt;li&gt;采用 break 命令可以根据函数名、代码行号、指令地址以及 kernel 入口来增加断点。在 break 命令中可以使用 if 语句配置条件断点。断点的查看和删除则可以分别使用 info 和 delete 命令来完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;状态查看
&lt;ul&gt;
&lt;li&gt;查看变量内容：调试时可直接根据变量名采用 print 命令来打印相关内容&lt;/li&gt;
&lt;li&gt;查看寄存器内容：寄存器内容则可以采用 info registers 命令进行查看&lt;/li&gt;
&lt;li&gt;查看地址内容：指定地址中的数据内容可以通过 examine 命令查看&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;智能应用性能调优&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;性能分析方法
&lt;ul&gt;
&lt;li&gt;识别瓶颈的过程
&lt;ul&gt;
&lt;li&gt;先找到耗时长的部分 -&amp;gt; 通知接口&lt;/li&gt;
&lt;li&gt;再通过硬件计数器分析硬件执行特征 -&amp;gt; 硬件计数器接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能调优工具
&lt;ul&gt;
&lt;li&gt;在程序外部监控程序的运行状态，分析其执行瓶颈，找到优化空间&lt;/li&gt;
&lt;li&gt;可以分为两类：
&lt;ul&gt;
&lt;li&gt;应用级性能剖析工具
&lt;ul&gt;
&lt;li&gt;采用 record 命令来运行可执行程序并生成相应的性能分析报告&lt;/li&gt;
&lt;li&gt;采用 report 或者 kernel 命令查看性能分析报告，获取包括执行时间、调用关系以及性能计数器等信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统级性能监控工具
&lt;ul&gt;
&lt;li&gt;系统级性能监控工具主要利用驱动，通过读取寄存器的方式来收集硬件的静态和动态信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能调优方法
&lt;ul&gt;
&lt;li&gt;DLP 核函数调优的核心思想：如何充分利用大规模的并行计算单元
&lt;ul&gt;
&lt;li&gt;使用片上存储&lt;/li&gt;
&lt;li&gt;向量化：将大量标量计算合并为张量计算，使用智能编程语言的向量计算语句改写代码&lt;/li&gt;
&lt;li&gt;软件流水
&lt;ul&gt;
&lt;li&gt;智能处理器的计算和访存单元可以并行空座&lt;/li&gt;
&lt;li&gt;编程时可以显示将无依赖的计算和访存指令放在一起，从而提高硬件的利用率和程序性能&lt;/li&gt;
&lt;li&gt;计算和访存并行最常用的方法是三级流水&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多核并行
&lt;ul&gt;
&lt;li&gt;针对 (程序员可见的) 多核，可以将一个任务分拆到多个核上并行计算，进一步提升程序性能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;智能编程语言的应用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高性能库算子开发
&lt;ul&gt;
&lt;li&gt;高性能库提供了常见算子在特定平台上的高性能实现，方便用户以 API 的形式直接调用&lt;/li&gt;
&lt;li&gt;高性能库算子开发的关键在于：
&lt;ul&gt;
&lt;li&gt;Kernel 代码逻辑的开发与优化&lt;/li&gt;
&lt;li&gt;高性能库算子接口 API 的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编程框架算子开发
&lt;ul&gt;
&lt;li&gt;原理及流程
&lt;ul&gt;
&lt;li&gt;编程框架为智能计算硬件和应用程序之间的桥梁，提供了丰富的算子和多架构后端的运行时系统&lt;/li&gt;
&lt;li&gt;从编程框架内部看，智能编程语言既提供了开发设备端核函数代码的能力，又提供了主机端异构执行的运行时支持&lt;/li&gt;
&lt;li&gt;使用智能编程语言直接在编程框架中添加算子，可分为：
&lt;ul&gt;
&lt;li&gt;框架内部注册添加算子&lt;/li&gt;
&lt;li&gt;利用框架的扩展能力添加自定义算子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;大模型计算系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大模型计算系统&#34;&gt;#&lt;/a&gt; 大模型计算系统&lt;/h4&gt;
&lt;p&gt;大模型算法分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大模型的获得和使用
&lt;ul&gt;
&lt;li&gt;训练：在训练阶段，需要使用大量的语料数据和大规模的计算资源，从头训练大模型的模型参数&lt;/li&gt;
&lt;li&gt;推理：推理是指在大模型训练完成后，使用大模型完成相关的任务&lt;/li&gt;
&lt;li&gt;预训练：预训练是使用大量无标注得到语料数据，旨在通过训练让大模型学习到通用的语言能力和知识&lt;/li&gt;
&lt;li&gt;微调：微调则是为了提升大模型在特定下游任务的表现，因此微调阶段使用特定任务的数据训练大模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大模型算法分类
&lt;ul&gt;
&lt;li&gt;编码器 - 解码器结构&lt;/li&gt;
&lt;li&gt;仅编码器结构&lt;/li&gt;
&lt;li&gt;仅解码器结构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大语言模型是多模态大模型的基础&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大模型驱动反例：BLOOM&lt;/p&gt;
&lt;p&gt;BLOOM-176B 模型的训练过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;混合并行技术&lt;/li&gt;
&lt;li&gt;张量并行（ALL-Reduce 通信）
&lt;ul&gt;
&lt;li&gt;张量并行是一种将张量沿特定维度分割为 N 个块的技术&lt;/li&gt;
&lt;li&gt;这样每个设备仅保存该张量的 1/N 个块&lt;/li&gt;
&lt;li&gt;MLP：矩阵按照行和列切分&lt;/li&gt;
&lt;li&gt;Self-Attention：按照 Head 切分和按照行切分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据并行 (ALL-Reduce 通信) 与流水线并行&lt;/li&gt;
&lt;li&gt;并行组
&lt;ul&gt;
&lt;li&gt;每一个组内的智能处理之间会通过通信库实现数据通信，是实际通信时的操作单元&lt;/li&gt;
&lt;li&gt;进一步可以分为数据并行组&lt;/li&gt;
&lt;li&gt;张量模型并行组&lt;/li&gt;
&lt;li&gt;和流水线模型并行组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BLOOM-176B 模型的推理过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自回归推理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件：1 个计算节点&lt;/li&gt;
&lt;li&gt;并行计算策略：张量并行或者流水线并行皆可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于一个解码器块而言，正向传播时的浮点运算主要分为 5 个部分&lt;/li&gt;
&lt;li&gt;随着序列变长，注意力计算量占总比逐渐提升&lt;/li&gt;
&lt;li&gt;但注意力的运算密度始终低于智能处理器的运算密度&lt;/li&gt;
&lt;li&gt;多头注意力的运算可能成为大模型训练计算中的一个瓶颈&lt;/li&gt;
&lt;li&gt;总浮点计算量：
&lt;ul&gt;
&lt;li&gt;反向传播计算量 = 正向传播计算量 * 2&lt;/li&gt;
&lt;li&gt;微批量 b=2，全局批量 B=16 时，需 34.8FLOPs&lt;/li&gt;
&lt;li&gt;忽略存储容量，一块 A100 需要算数十分钟&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实际应用中，还需要存放神经元数据，这进一步增加了对存储空间的需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通信分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;除了通信数据量大以外，大模型训练的通信还具有一下特点：
&lt;ul&gt;
&lt;li&gt;通信次数多，无论数据并行、张量并行、流水线并行，均会产生必要的数据通信的同步&lt;/li&gt;
&lt;li&gt;通信分布不均匀，由于模型的前向和反向传播时的算子依赖关系，某些层可能需要等待其他层完成后才能通信，导致通信在时间上不均匀&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大模型系统软件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么采用大模型系统软件
&lt;ul&gt;
&lt;li&gt;传统的深度学习系统软件已经难以满足大模型的特殊需求&lt;/li&gt;
&lt;li&gt;为了解决模型在训练和推理过程中遇到的独特挑战，如模型并行化、存储管理、通信优化等&lt;/li&gt;
&lt;li&gt;更加注重资源利用的高效性、分布式计算的优化、以及模型的可扩展性&lt;/li&gt;
&lt;li&gt;考虑如何在有限的硬件资源上实现超大规模模型的有效训练，如何通过模型裁剪、混合精度训练等技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;训练场景中计算相关优化：稀疏注意力机制
&lt;ul&gt;
&lt;li&gt;通常情况下当前词与相邻若干词存在关联，与很远的词关联比较弱&lt;/li&gt;
&lt;li&gt;所有词计算自注意力 -&amp;gt; 信息冗余 -&amp;gt; 注意力存在稀疏性&lt;/li&gt;
&lt;li&gt;通过基于块的稀疏运算，将原始注意力机制的计算需求降低几个数量级&lt;/li&gt;
&lt;li&gt;稀疏注意力机制在原本全局注意力的基础上，额外引入了局部注意力和随机注意力的概念&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;训练场景中计算相关优化：专用数据类型
&lt;ul&gt;
&lt;li&gt;除了传统的单精度浮点数类型和半精度浮点数据类型之外，各类智能硬件还设计了专用数据类型，在基于混合精度训练的大模型训练过程中广泛使用&lt;/li&gt;
&lt;li&gt;使用 TF32 代替 FP32 可以几乎不降低精度的情况下，提升运算速度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;训练场景中计算相关优化：ZeRO 系列存储优化
&lt;ul&gt;
&lt;li&gt;优化器状态被分配到所有数据并行的 GPU 上，而不是被复制，并在训练过程中使用基于 all-gather/broadcast 的通信集合即时重建&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;训练场景中计算相关优化：重计算优化
&lt;ul&gt;
&lt;li&gt;正向传播时的激活值需要一直保留到反向传播时使用，占用了很大的存储空间&lt;/li&gt;
&lt;li&gt;重计算优化指的是在正向传播时不保存所有层的激活值，而是仅保留部分层的计算结果作为检查点，然后在反向传播时再根据检查点重新计算所需的激活值&lt;/li&gt;
&lt;li&gt;选择性重计算，通过对 Transformer 层内部计算量和和存储量的量化分析，选择性的将中间层的激活值保留或舍弃，最终能够在引入可忽略不计的计算量的前提下，将激活值的存储使用减少 5 倍。&lt;/li&gt;
&lt;li&gt;计算换存储，计算增加约 30%~40%&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;训练场景中计算相关优化：注意力机制融合优化
&lt;ul&gt;
&lt;li&gt;长序列时，Attention 的计算中间结果存储需求显著增加，因此较长的上下文长度会引发较大的访存量，进而影响了整体训练的性能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;训练场景中通信相关优化
&lt;ul&gt;
&lt;li&gt;旨在减少数据传输量、提高通信效率和减少通信与计算的竞争&lt;/li&gt;
&lt;li&gt;相关优化技术如 3D 并行参数调优、梯度压缩和通信拓扑优化等，已被广泛研究和应用&lt;/li&gt;
&lt;li&gt;典型的如 DeepSpeed 中专为大模型训练引入的 1-bit Adam 算法优化，可以在保持模型精度的同时，最大减少 5 倍的通信量，并获得最高 3.3 倍的训练性能提升&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推理场景中计算相关优化：批处理优化
&lt;ul&gt;
&lt;li&gt;多个任务直接批处理&lt;/li&gt;
&lt;li&gt;连续批处理方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推理场景中计算相关优化：键值缓存优化
&lt;ul&gt;
&lt;li&gt;键值缓存
&lt;ul&gt;
&lt;li&gt;在处理一个序列时，通过缓存过去的生成结果以避免重复计算的方法，从而减少大模型推理的计算量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推理场景中存储相关优化：键值缓存分页优化
&lt;ul&gt;
&lt;li&gt;借鉴操作系统中的分页思想，提高系统对存储的利用率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推理场景中存储相关优化：量化优化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大模型计算节点：计算节点的拓扑结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单个大模型计算节点主要包括若干 CPU 构成的控制单元、主机端存储单元和若干 DLP 板卡构成的计算单元&lt;/li&gt;
&lt;li&gt;不同的拓扑结构主要影响是：
&lt;ul&gt;
&lt;li&gt;处理器与 DLP 板卡之间的总通信带宽&lt;/li&gt;
&lt;li&gt;DLP 板卡之间互相通信的带宽&lt;/li&gt;
&lt;li&gt;DLP 板卡之间互相通信的延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大模型计算节点：智能处理器的互联&lt;/p&gt;
&lt;p&gt;大模型计算集群：计算集群的系统结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多机多卡集群配置大量的计算节点&lt;/li&gt;
&lt;li&gt;配置若干登录管理节点进行集群管理工作&lt;/li&gt;
&lt;li&gt;同时为了确保节点之间的对数据的统一访问以及高速通讯，集群还应该配置统一的网络数据存储和多套互联通信网络&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大模型计算集群：计算集群的网络拓扑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于大模型训练而言，张量模型并行带来的通信开销最大，因此应该将张量模型并行的范围控制在服务器本地，然后使用流水线并行来跨服务器扩展更大的网络模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大模型计算集群：计算集群的网络传输&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;较于 TCP/IP，RDMA 零拷贝（zero copy）减少用户空间和内核空间中来回复制数据的开销，内核旁路（kernel bypass）减少了软件调用的开销，这些都无需双方操作系统内核参与，因此 RDMA 具有高吞吐、低延迟和低 CPU 开销的特点&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-4-1&amp;2/</guid>
            <title>数据结构408-4-1&amp;2</title>
            <link>http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-4-1&amp;2/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/categories/computer-science/data-structure/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <pubDate>Sat, 20 Apr 2024 21:09:03 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;串的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#串的定义&#34;&gt;#&lt;/a&gt; 串的定义&lt;/h4&gt;
&lt;p&gt;串，即字符串是由零个或多个字符组成的有限序列。一般记为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo mathvariant=&#34;normal&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;′&lt;/mo&gt;&lt;/msup&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;msubsup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mo mathvariant=&#34;normal&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;′&lt;/mo&gt;&lt;/msubsup&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;S=&amp;#x27;a_1a_2......a_b&amp;#x27;(n\ge0)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.751892em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.751892em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.035em;vertical-align:-0.2831079999999999em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.751892em;&#34;&gt;&lt;span style=&#34;top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.2831079999999999em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≥&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中，S 是串名，单引号括起来的字符序列是串的值；&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;a_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 可以是字母、数字或其他字符；串中字符的个数 n 称为串的长度。n=0 时串称为空串 (用&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;ϕ&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\phi&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;ϕ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 表示)&lt;/p&gt;
&lt;p&gt;子串：串种任意个连续的字符组成的子序列&lt;/p&gt;
&lt;p&gt;主串：包含子串的串&lt;/p&gt;
&lt;p&gt;字符在主串的位置：字符在串中的序号&lt;/p&gt;
&lt;p&gt;子串在主串的位置：子串的第一个字符在主串中的位置&lt;/p&gt;
&lt;p&gt;串是一种特殊的线性表，数据元素之间呈线性关系&lt;/p&gt;
&lt;p&gt;串的数据对象限定为字符集&lt;/p&gt;
&lt;p&gt;串的基本操作，如增删改查等通常以子串为操作对象&lt;/p&gt;
&lt;h4 id=&#34;串的基本操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#串的基本操作&#34;&gt;#&lt;/a&gt; 串的基本操作&lt;/h4&gt;
&lt;p&gt;StrAssign (&amp;amp;T,chars)：赋值操作。把串 T 赋值为 chars&lt;/p&gt;
&lt;p&gt;StrCopy (&amp;amp;T,S)：复制操作。由串 S 复制得到串 T&lt;/p&gt;
&lt;p&gt;StrEmpty (S)：判空操作。若 S 为空串，则返回 TRUE，否则返回 FALSE&lt;/p&gt;
&lt;p&gt;StrLength (S)：求串长。返回串 S 的元素个数&lt;/p&gt;
&lt;p&gt;ClearString (&amp;amp;S)：清空操作。将 S 清为空串&lt;/p&gt;
&lt;p&gt;DestroyString (&amp;amp;S)：销毁串。将串 S 销毁 (回收存储空间)&lt;/p&gt;
&lt;p&gt;Concat (&amp;amp;T,S1,S2)：串联接。用 T 返回由 S1 和 S2 联接而成的新串&lt;/p&gt;
&lt;p&gt;SubString (&amp;amp;Sub,S,pos,len)：求子串。用 Sub 返回串 S 的第 pos 个字符起长度为 len 的子串&lt;/p&gt;
&lt;p&gt;Index (S,T)：定位操作。若主串 S 中存在与串 T 值相同的子串，则返回它在主串 S 中第一次出现的位置；否则函数值为 0。&lt;/p&gt;
&lt;p&gt;StrCompare (S,T)：比较操作。若 S&amp;gt;T，则返回值 &amp;gt; 0；若 S=T，则返回值 = 0；若 S&amp;lt;T，则返回值 &amp;lt; 0；&lt;/p&gt;
&lt;p&gt;注意：采用不同的编码方式，每个字符所占空间不同，考研中只需默认每个字符栈 1B 即可&lt;/p&gt;
&lt;h4 id=&#34;串的顺序存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#串的顺序存储&#34;&gt;#&lt;/a&gt; 串的顺序存储&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define MaxSize 255 
typedef struct&amp;#123;
    char ch[MaxSize];
    int length;
&amp;#125;SString; //静态数组实现

typedef struct&amp;#123;
    char *ch;
    int length;
&amp;#125;HString; //动态数组实现
HString S;
S.ch=(char *)malloc(MAXLEN*sizeof(char));
S.length=0;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;串的链式存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#串的链式存储&#34;&gt;#&lt;/a&gt; 串的链式存储&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;typedef struct StringNode&amp;#123;
    char ch;
    struct StringNode * next;
&amp;#125;StringNode,*String //存储密度低，每个字符1B，每个指针4B
    
typedef struct StringNode&amp;#123;
    char ch[4]; //每个节点存多个字符
    struct StringNode * next;
&amp;#125;StringNode,*String
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;基本操作的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本操作的实现&#34;&gt;#&lt;/a&gt; 基本操作的实现&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;bool SubString(SString &amp;amp;Sub,SString S,int pos,int len)&amp;#123;
    if(pos+len-1&amp;gt;S.length)
        return false;
    for(int i=pos;i&amp;lt;pos+len;i++)
        Sub.ch[i-pos+1]=S.ch[i];
    Sub.length=len;
    return true;
&amp;#125;

int StrCompare(SString S,SString T)&amp;#123;
    for(int i=1;i&amp;lt;=S.length &amp;amp;&amp;amp; i&amp;lt;=T.length;i++)&amp;#123;
        if(S.ch[i]!=T.ch[i])
            return S.ch[i]-T.ch[i];
    &amp;#125;
    return S.length-T.length;
&amp;#125;

int Index(SString S,SString T)&amp;#123;
    int i=1,n=StrLength(S),m=Strlength(T);
    SString sub;
    while(i&amp;lt;=n-m+1)&amp;#123;
        SubString(sub,S,i,m);
        if(StrCompare(sub,T)!=0) ++i;
        else return i; //返回子串在主串中的位置
    &amp;#125;
    return 0; //S中不存在与T相等的子串
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;朴素模式匹配算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#朴素模式匹配算法&#34;&gt;#&lt;/a&gt; 朴素模式匹配算法&lt;/h4&gt;
&lt;p&gt;字符串模式匹配：在主串中找到与模式串相同的子串，并返回其所在位置&lt;/p&gt;
&lt;p&gt;子串：主串的一部分，一定存在；&lt;/p&gt;
&lt;p&gt;模式串：不一定能在朱传众找到&lt;/p&gt;
&lt;p&gt;朴素模式匹配算法：将主串中所有长度为 m 的子串依次与模式串对比，直到找到一个完全匹配的子串或者所有的子串都不匹配为止（最多 n-m+1 的子串）&lt;/p&gt;
&lt;p&gt;若当前子串匹配失败，则主串指针 i 指向下一个子串的第一个位置，模式串指针 j 回到模式串的第一个位置&lt;/p&gt;
&lt;p&gt;若 j&amp;gt;T.length，则当前子串匹配成功，返回当前子串第一个字符的位置 ——i-T.length&lt;/p&gt;
&lt;p&gt;最坏时间复杂度为 O (mn)&lt;/p&gt;
&lt;h4 id=&#34;kmp算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kmp算法&#34;&gt;#&lt;/a&gt; KMP 算法&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;int index_KMP(SString S,SString T,int next[])&amp;#123;
    int i=1,j=1;
    while(i&amp;lt;=S.length &amp;amp;&amp;amp; j&amp;lt;=T.length)&amp;#123;
        if(j==0 || S.ch[i]==T.ch[j])&amp;#123;
            i++,j++;   //继续往后比较字符串
        &amp;#125;
        else
            j=next[j];   //模式串向右移动
    &amp;#125;
    if(j&amp;gt;T.length)
        return i-T.length; //匹配成功
    else
        return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;next 数组求解：&lt;/p&gt;
&lt;p&gt;next [1] 填 0，next [2] 填 1&lt;/p&gt;
&lt;p&gt;其他 next：在不匹配的位置前，划一根分界线，模式串一步一步后退，直到分界线之前能对上，或模式串完全跨过分界线为止，此时 j 指向哪，next 数组值就为多少。&lt;/p&gt;
&lt;p&gt;KMP 算法，最坏时间复杂度为 O (m+n)，其中求 next 数组时间复杂度为 O (m)，模式匹配过程最坏时间复杂度为 O (n)&lt;/p&gt;
&lt;p&gt;nextval 数组：先求 next 数组，再求 nextval 数组：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;nextval[1]=0;
for(int j=2;j&amp;lt;=T.length;j++) &amp;#123;
    if(T.ch[next[j]]==T.ch[j])
        nextval[j]=nextval[next[j]];
    else
        nextval[j]=next[j];
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-3-3&amp;4/</guid>
            <title>数据结构408-3-3&amp;4</title>
            <link>http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-3-3&amp;4/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/categories/computer-science/data-structure/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <pubDate>Thu, 18 Apr 2024 20:30:03 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;栈在括号匹配中的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈在括号匹配中的应用&#34;&gt;#&lt;/a&gt; 栈在括号匹配中的应用&lt;/h4&gt;
&lt;p&gt;最后出现的左括号最先被匹配，每出现一个右括号，就 &amp;quot;消耗&amp;quot; 一个左括号，遇到左括号就入栈，遇到右括号，就 &amp;quot;消耗&amp;quot; 一个左括号&lt;/p&gt;
&lt;p&gt;处理完所有括号后，栈非空 —— 左括号单身&lt;/p&gt;
&lt;p&gt;算法实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define MaxSize 10
typedef struct &amp;#123;
    char data[MaxSize];
    int top;
&amp;#125;SqStack;

void InitStack(SqStack &amp;amp;S) //初始化栈
    
bool StackEmpty(SqStack S) //判断栈空

bool Push(SqStack &amp;amp;S,char x) //新元素入栈
    
bool Pop(SqStack &amp;amp;S,char &amp;amp;x) //栈顶元素出栈，用x返回
    
bool bracketCheck(char str[],int length)&amp;#123;
    SqStack S;
    InitStack(S);
    for(int i=0;i&amp;lt;length;i++)&amp;#123;
        if(str[i]==&#39;(&#39; || str[i]==&#39;&amp;#123;&#39; || str[i]==&#39;[&#39;)
            Push(S,str[i]);
        else&amp;#123;
            if(StackEmpty(S))
                return false;
            char topElem;
            Pop(S,topElem);
            if(str[i]==&#39;&amp;#125;&#39; &amp;amp;&amp;amp; topElem!=&#39;&amp;#123;&#39;)
                return false;
            if(str[i]==&#39;]&#39; &amp;amp;&amp;amp; topElem!=&#39;[&#39;)
                return false;
            if(str[i]==&#39;)&#39; &amp;amp;&amp;amp; topElem!=&#39;(&#39;)
                return false;
        &amp;#125;
    &amp;#125;
    return StackEmpty(S);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;栈在表达式求值的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈在表达式求值的应用&#34;&gt;#&lt;/a&gt; 栈在表达式求值的应用&lt;/h4&gt;
&lt;p&gt;逆波兰表达式 = 后缀表达式&lt;/p&gt;
&lt;p&gt;波兰表达式 = 前缀表达式&lt;/p&gt;
&lt;p&gt;中缀转后缀的手算方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定中缀表达式中各个运算符的运算顺序&lt;/li&gt;
&lt;li&gt;确定下一个运算符，按照 [左操作数 右操作数 运算符] 的方式组合成一个新的操作数&lt;/li&gt;
&lt;li&gt;如果还有运算符没被处理，就继续第二步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;左优先原则：只要左边的运算符能先计算，就优先算左边的&lt;/p&gt;
&lt;p&gt;从左往右扫描，每遇到一个运算符，就让运算符前面最近的两个操作数执行对应运算，合体为一个操作数&lt;/p&gt;
&lt;p&gt;注意：两个操作数的左右顺序&lt;/p&gt;
&lt;p&gt;用栈实现后缀表达式的计算：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从左往右扫描下一个元素，直到处理完所有元素&lt;/li&gt;
&lt;li&gt;若扫描到操作数则压入栈，并回到第一步；否则执行下一步&lt;/li&gt;
&lt;li&gt;若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到第一步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若表达式合法，最后栈中留下的一个元素就是最终结果&lt;/p&gt;
&lt;p&gt;中缀转前缀的手算方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定中缀表达式中各个运算符的运算顺序&lt;/li&gt;
&lt;li&gt;选择下一个运算符，按照 [运算符 左操作数 右操作数] 的方式组合成一个新的操作数&lt;/li&gt;
&lt;li&gt;如果还有运算符没被处理，就继续第二步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;右优先原则：只要右边的运算符能先计算，就优先计算右边的&lt;/p&gt;
&lt;p&gt;用栈实现前缀表达式的计算：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从右往左扫描下一个元素，直到处理完所有元素&lt;/li&gt;
&lt;li&gt;若扫描到操作数则压入栈，并回到第一步；否则执行下一步&lt;/li&gt;
&lt;li&gt;若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到第一步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中缀表达式转后缀表达式（机算）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;初始化一个栈，用于保存暂时还不能确定运算顺序的运算符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从左到右处理各个元素，直到末尾。可能遇到三种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;遇到操作数，直接加入后缀表达式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;遇到界限符。遇到 &#39;(&#39; 直接入栈，遇到 &#39;)&#39; 则依次弹出栈内运算符并加入后缀表达式，直到弹出 &#39;(&#39; 为止。注意：&#39;(&#39; 不加入后缀表达式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;遇到运算符。依次弹出栈中优先级高于或等于当前运算符的所有运算符，并加入后缀表达式，若碰到了 &#39;(&#39; 或栈空则停止。之后再把当前运算符入栈&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按照上述方法处理完毕所有字符后，将栈中剩余运算符依次弹出，并加入后缀表达式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中缀表达式的计算（用栈实现）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化两个栈，操作数栈和运算符栈&lt;/li&gt;
&lt;li&gt;若扫描到操作数，压入操作数栈&lt;/li&gt;
&lt;li&gt;若扫描到运算符或界限符，则按照 &amp;quot;中缀转后缀&amp;quot; 相同的逻辑压入运算符栈（期间也会弹出运算符，每弹出一个运算符时，就要弹出两个操作数栈的栈顶元素并执行相应运算，运算结果再压回操作数栈）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;栈在递归中的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈在递归中的应用&#34;&gt;#&lt;/a&gt; 栈在递归中的应用&lt;/h4&gt;
&lt;p&gt;函数调用的特点：最后被调用的函数最先执行结果&lt;/p&gt;
&lt;p&gt;函数调用时，需要用一个栈存储：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用返回地址&lt;/li&gt;
&lt;li&gt;实参&lt;/li&gt;
&lt;li&gt;局部变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;适用递归算法解决：可以把原始问题转化为属性相同，但规模更小的问题&lt;/p&gt;
&lt;p&gt;递归调用时，函数调用栈可称为 &amp;quot;递归工作栈&amp;quot;&lt;/p&gt;
&lt;p&gt;每进入一层递归，就将递归调用所需的信息压入栈顶&lt;/p&gt;
&lt;p&gt;每退出一层递归，就将栈顶弹出相应信息&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;太多层递归可能会导致栈溢出&lt;/li&gt;
&lt;li&gt;可能包含很多重复计算&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;队列应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#队列应用&#34;&gt;#&lt;/a&gt; 队列应用&lt;/h4&gt;
&lt;p&gt;树的层次遍历&lt;/p&gt;
&lt;p&gt;图的广度有限遍历&lt;/p&gt;
&lt;p&gt;多个进程争抢使用有限的系统资源时，FCFS（先来先服务）是一种常用策略&lt;/p&gt;
&lt;h4 id=&#34;矩阵的压缩存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#矩阵的压缩存储&#34;&gt;#&lt;/a&gt; 矩阵的压缩存储&lt;/h4&gt;
&lt;p&gt;一维数组存储结构：各个元素大小相同，且物理上连续存放&lt;/p&gt;
&lt;p&gt;二维数组的存储结构：行优先存储 | 列有限存储&lt;/p&gt;
&lt;p&gt;不同矩阵的存储：用二维数组存储&lt;/p&gt;
&lt;p&gt;对称矩阵的存储：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通存储：二维数组&lt;/li&gt;
&lt;li&gt;压缩存储策略：只存储主对角线和下三角区&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上三角矩阵与下三角矩阵：&lt;/p&gt;
&lt;p&gt;按照行优先 \ 列优先的原则存入一维数组中，并在最后一个位置存储常量 c&lt;/p&gt;
&lt;p&gt;三对角矩阵的压缩存储&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按行优先原则存储到一维数组中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;稀疏矩阵的压缩存储策略&lt;/p&gt;
&lt;p&gt;顺序存储 —— 三元组（行、列、值）&lt;/p&gt;
&lt;p&gt;链式存储 —— 十字链表法&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-2-3/</guid>
            <title>计算机组成原理408-2-3</title>
            <link>http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-2-3/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/categories/computer-science/principles-of-computer-composition/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" />
            <pubDate>Tue, 16 Apr 2024 20:35:58 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;浮点数的表示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浮点数的表示&#34;&gt;#&lt;/a&gt; 浮点数的表示&lt;/h4&gt;
&lt;p +11011=&#34;&#34;&gt;浮点数分为阶码和尾数部分，一个浮点数可表示为-0.10101*2^&lt;/p&gt;
&lt;p&gt;其中阶码可以分为阶符和阶码的数值部分，尾数可以分为数符和尾数的数值部分，如上面的例子&lt;/p&gt;
&lt;p&gt;- 为数符，0.10101 为尾数数值部分，+ 为阶符，11011 为阶码数值部分&lt;/p&gt;
&lt;p&gt;阶码：常用补码或移码表示的定点整数&lt;/p&gt;
&lt;p&gt;尾数：常用原码或补码表示的定点小数&lt;/p&gt;
&lt;p&gt;阶码 E 反映浮点数的表示范围及小数点的实际位置；尾数 M 的数值部分的位数 n 反映浮点数的精度&lt;/p&gt;
&lt;p&gt;尾数给出一个小数，阶码指明了小数点要向前 / 向后移动几位&lt;/p&gt;
&lt;h4 id=&#34;规格化浮点数的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#规格化浮点数的特点&#34;&gt;#&lt;/a&gt; 规格化浮点数的特点&lt;/h4&gt;
&lt;p&gt;浮点数尾数的规格化：&lt;/p&gt;
&lt;p&gt;规格化浮点数：规定尾数的最高数值位必须是一个有效值&lt;/p&gt;
&lt;p&gt;左规：当浮点数运算的结果位非规格化时要进行规格化处理，将尾数算数左移一位，阶码减 1&lt;/p&gt;
&lt;p&gt;右规：当浮点数运算的结果尾数出现溢出 (双符号位 01 或 10) 时，将尾数算数右移一位，阶码加 1&lt;/p&gt;
&lt;p&gt;注：采用双符号位，当溢出发生时，可以挽救&lt;/p&gt;
&lt;ul -n=&#34;&#34;&gt;
&lt;li 2=&#34;&#34;&gt;
&lt;p&gt;用原码表示的尾数进行规格化：尾数的最高数值位必须是 1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正数为 0.1xxxxxx 的形式，其最大值表示为 0.11......11，最小值表示为 0.10...00。尾数的表示范围为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\frac{1}{2}\le M\le(1-2^{-n})&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.190108em;vertical-align:-0.345em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.845108em;&#34;&gt;&lt;span style=&#34;top:-2.6550000000000002em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.394em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.345em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≤&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8193em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≤&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.021331em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.771331em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;负数为 1.1xxxxxx 的形式，其最大值表示为 1.10......00，最小值表示为 1.11...11。尾数的表示范围为-(1-2^{-n})\le M\le -\frac{1}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用补码表示尾数进行规格化：尾数的最高数值位必须和尾数符号位相反&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正数为 0.1xxxxxx 的形式，其最大值表示为 0.11......11，最小值表示为 0.10...00。尾数的表示范围为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\frac{1}{2}\le M\le(1-2^{-n})&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.190108em;vertical-align:-0.345em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.845108em;&#34;&gt;&lt;span style=&#34;top:-2.6550000000000002em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.394em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.345em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≤&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8193em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≤&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.021331em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.771331em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;负数为 1.0xxxxxx 的形式，其最大值表示为 1.01......11，最小值表示为 1.00...00。尾数的表示范围为-1\le M\le -\frac{1}{2}+2^&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ieee-754&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ieee-754&#34;&gt;#&lt;/a&gt; IEEE 754&lt;/h4&gt;
&lt;p&gt;移码：补码的基础上符号位取反。注意：移码只能表示整数&lt;/p&gt;
&lt;p n-1=&#34;&#34;&gt;移码定义：移码 = 真值 + 偏置值，8 位移码的编制值 = 128D=10000000B，即2^&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;数符&lt;/th&gt;
&lt;th&gt;阶码&lt;/th&gt;
&lt;th&gt;尾数数值&lt;/th&gt;
&lt;th&gt;总位数&lt;/th&gt;
&lt;th&gt;偏置值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;短浮点数 (float)&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;十六进制：7FH；十进制：127&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;长浮点数 (double)&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;52&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;十六进制：3FFH；十进制：1023&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;临时浮点数 (long double)&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;十六进制：3FFFH；十进制：16383&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;IEEE 754 标准：阶码部分用移码表示，尾数部分用源码表示，隐藏表示最高位 1&lt;/p&gt;
&lt;p&gt;阶码真值 = 移码 - 偏移量，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;m_s&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 位数符，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;E&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 为阶码部分，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;M&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 为尾数数值位&lt;/p&gt;
&lt;p E-127=&#34;&#34;&gt;规格化的短浮点数的真值为：(-1)^s\times1.M\times2^&lt;/p&gt;
&lt;p E-1023=&#34;&#34;&gt;规格化的长浮点数的真值为：(-1)^s\times1.M\times2^&lt;/p&gt;
&lt;p&gt;例：将十进制 - 0.75 转换为 IEEE 754 的单精度浮点数格式表示&lt;/p&gt;
&lt;p -1=&#34;&#34;&gt;(-0.75)_{10}=(-0.11)_2=-(1.1)_2\times2^&lt;/p&gt;
&lt;p&gt;数符 = 1 尾数部分.10000....（隐含最高位 1）&lt;/p&gt;
&lt;p&gt;阶码真值 - 1，单精度浮点数偏移量 = 127D，移码 = 移码真值 + 偏移量 = 1+1111111=01111110（凑足 8 位）&lt;/p&gt;
&lt;p&gt;IEEE 754 单精度浮点数最小绝对值、最大绝对值：&lt;/p&gt;
&lt;ul&gt;
&lt;li -126=&#34;&#34;&gt;
&lt;p&gt;最小绝对值：尾数全部为 0，阶码真值最小 1-127=-126，对应移码机器数 0000 0001，此时整体真值为(1.0)_2\times2^&lt;/p&gt;
&lt;/li&gt;
&lt;li 127=&#34;&#34;&gt;
&lt;p&gt;最大绝对值：尾数全部为 1，阶码真值最大 127，对应移码机器数 1111 1110，此时整体真值为(1.111...1)_2\times2^&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阶码最小为 - 128，最大为 127，但是 - 128（全 1）和 - 127（全 0）用来做特殊用途，因此在计算式不适用这两个阶码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p 1023=&#34;&#34;&gt;双进度浮点数最小绝对值：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1.0&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1022&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;1.0\times2^{-1022}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，最大绝对值：1.11..1\times2^{1023}=(2-2^{-52})\times2^&lt;/p&gt;
&lt;p&gt;单精度浮点数：&lt;/p&gt;
&lt;ul&gt;
&lt;li E-127=&#34;&#34;&gt;
&lt;p&gt;只有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mn&gt;254&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;1\le E\le 254&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.78041em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≤&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8193em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≤&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 时，真值 =(-1)^s\times1.M\times2^&lt;/p&gt;
&lt;/li&gt;
&lt;li -126=&#34;&#34;&gt;
&lt;p&gt;当阶码 E 全为 0，尾数 M 不全为 0 时，表示非规格化小数：\pm(0.xxxx)_2\times2^&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当阶码 E 全为 0，尾数 M 全为 0 时，表示真值&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;±&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\pm0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;±&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当阶码 E 全为 1，尾数 M 全为 0 时，表示无穷大&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;±&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∞&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\pm\infin&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.66666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;±&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∞&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当阶码 E 全为 1，尾数 M 不全为 0 时，表示非数值 &amp;quot;NaN&amp;quot;（Not a Number）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;浮点数的运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浮点数的运算&#34;&gt;#&lt;/a&gt; 浮点数的运算&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对阶：使两个数的阶码相等，小阶向大阶看齐，尾数每右移一位，阶码加 1
&lt;ul&gt;
&lt;li&gt;求阶差判断那个数阶码为小阶&lt;/li&gt;
&lt;li&gt;对阶&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尾数相减：通常采用双符号位表示尾数，这样可以挽救尾数溢出&lt;/li&gt;
&lt;li&gt;规格化：左规 | 右规&lt;/li&gt;
&lt;li&gt;舍入
&lt;ul&gt;
&lt;li&gt;0 舍 1 入法：类似于十进制数运算的四舍五入法，即在尾数右移时，被移去的数值位为 0，则舍去；被移去的数值为 1，则在尾数的末尾加 1。这样做完可能会使尾数溢出，此时需要再做一次右规&lt;/li&gt;
&lt;li&gt;恒置 1 法：尾数右移时，不论丢掉的数值位是 1 还是 0，都使右移的尾数末尾恒置 1。这种方法同样有使尾数变大和变小的两种可能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;判溢出
&lt;ul&gt;
&lt;li&gt;阶码上溢：抛出异常 (中断)&lt;/li&gt;
&lt;li&gt;阶码下溢：按机器 0 处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;强制类型转换：&lt;/p&gt;
&lt;p&gt;char-&amp;gt;int-&amp;gt;long-&amp;gt;double、float-&amp;gt;double 没有精度损失&lt;/p&gt;
&lt;p&gt;int-&amp;gt;float 会损失精度，float-&amp;gt;int：可能溢出及损失精度&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-3-1&amp;2/</guid>
            <title>数据结构408-3-1&amp;2</title>
            <link>http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-3-1&amp;2/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/categories/computer-science/data-structure/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <pubDate>Thu, 11 Apr 2024 17:37:45 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;栈的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈的定义&#34;&gt;#&lt;/a&gt; 栈的定义&lt;/h4&gt;
&lt;p&gt;栈是一个只允许一端进行插入或删除操作的线性表&lt;/p&gt;
&lt;p&gt;重要术语：栈顶、栈底、空栈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;栈顶：允许插入和删除的一端&lt;/li&gt;
&lt;li&gt;栈底：不允许插入和删除的一端&lt;/li&gt;
&lt;li&gt;特点：后进先出（LIFO）&lt;/li&gt;
&lt;li&gt;逻辑结构：与普通的线性表相同&lt;/li&gt;
&lt;li&gt;数据的运算：插入、删除操作有区别&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;栈的基本操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈的基本操作&#34;&gt;#&lt;/a&gt; 栈的基本操作&lt;/h4&gt;
&lt;p&gt;InitStack (&amp;amp;S)：初始化栈。构造一个空栈 S，分配内存空间&lt;/p&gt;
&lt;p&gt;DestroyStack (&amp;amp;S)：销毁栈。销毁并释放栈 S 所占用的内存空间&lt;/p&gt;
&lt;p&gt;Push (&amp;amp;S,x)：进栈，若栈 S 未满，则将 x 加入使之称为新栈顶&lt;/p&gt;
&lt;p&gt;Pop (&amp;amp;S,x)：出栈，若栈 S 非空，则弹出栈顶元素，并用 x 返回&lt;/p&gt;
&lt;p&gt;GetTop (&amp;amp;S)：读栈顶元素，若栈 S 非空，则用 x 返回栈顶元素&lt;/p&gt;
&lt;p&gt;StackEmpty (S)：判断一个栈 S 是否为空。若 S 为空，则返回 true，否则返回 false&lt;/p&gt;
&lt;p n=&#34;&#34;&gt;n 个不同的元素进栈，出栈元素不同的排列的个数位\frac{1}{n}C_{2n}^&lt;/p&gt;
&lt;h4 id=&#34;顺序栈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序栈&#34;&gt;#&lt;/a&gt; 顺序栈&lt;/h4&gt;
&lt;p&gt;顺序栈的定义：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define MaxSize 10    //定义栈中元素的最大个数
typedef struct&amp;#123;
    ElemType data[MaxSize];  //静态数组存放栈元素
    int top;     //栈顶指针
&amp;#125;SqStack;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;顺序存储，给各个数据元素分配连续的存储空间，大小为 MaxSize*sizeof (ElemType)&lt;/p&gt;
&lt;p&gt;栈的基本操作：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;void InitStack(SqStack &amp;amp;S)&amp;#123;
    S.top=-1;  //初始化栈顶指针
&amp;#125;

bool StackEmpty(SqStack &amp;amp;S)&amp;#123;  //判空操作
    if(S.top==-1)  //栈空
        return true;
    else //栈不为空
        return false;
&amp;#125;

bool Push(SqStack &amp;amp;S,ElemType x)&amp;#123; //入栈操作
    if(S.top==MaxSize-1) //栈满，报错
        return false;
    S.top=S.top+1;  //指针+1
    S.data[S.top]=x; //新元素入栈
    //或者直接S.data[++S.top]=x;
    return true;
&amp;#125;

bool Pop(SqStack &amp;amp;S,ElemType &amp;amp;x)&amp;#123; //出栈操作
    if(S.top==-1) //如果栈为空
        return false;
    x=S.data[S.top];
    S.top--;
    //等价于x=S.data[S.top--];
    return true;
&amp;#125;
//出栈操作数据还在内存当中，只是逻辑上已经被移除了
bool GetTop(SqStack &amp;amp;S,ElemType &amp;amp;x)&amp;#123;
    if(S.top==-1)
        return false;
   	x=S.data[S.top];
    return true;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;顺序栈的缺点：栈的大小不可变&lt;/p&gt;
&lt;h4 id=&#34;共享栈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共享栈&#34;&gt;#&lt;/a&gt; 共享栈&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define MaxSize 10
typedef struct&amp;#123;
    ElemType data[MaxSize];
    int top0; //0号栈顶指针
    int top1; //1号栈顶指针
&amp;#125; ShStack;

void InitStack(ShStack &amp;amp;S)&amp;#123;
    S.top0=-1;
    S.top1=MaxSize;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;栈满的条件：top0+1==top1&lt;/p&gt;
&lt;h4 id=&#34;链栈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#链栈&#34;&gt;#&lt;/a&gt; 链栈&lt;/h4&gt;
&lt;p&gt;链栈定义：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;typedef struct Linknode&amp;#123;
    ElemType data; //数据域
    struct Linknode *next; //指针域
&amp;#125; *LiStack;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;至于基本操作，请参考带头结点的链表和不带头结点的链表的增加删除操作。&lt;/p&gt;
&lt;p&gt;链栈仅仅只是所有的插入都是头插法，删除都是删除头结点的特殊情况，比起单独链表还好写&lt;/p&gt;
&lt;h4 id=&#34;队列的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#队列的定义&#34;&gt;#&lt;/a&gt; 队列的定义&lt;/h4&gt;
&lt;p&gt;队列是只允许在一端进行插入，在另一端删除的线性表&lt;/p&gt;
&lt;p&gt;特点：先进入队列的元素先出队&lt;/p&gt;
&lt;p&gt;重要术语：队头、队尾、空队列&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;队头：允许删除的一端&lt;/li&gt;
&lt;li&gt;队尾：允许插入的一端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;队列特点：先进先出 (FIFO)&lt;/p&gt;
&lt;h4 id=&#34;队列的基本操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#队列的基本操作&#34;&gt;#&lt;/a&gt; 队列的基本操作&lt;/h4&gt;
&lt;p&gt;InitQueue (&amp;amp;Q)：初始化队列，构造一个空队列 Q&lt;/p&gt;
&lt;p&gt;DestroyQueue (&amp;amp;Q)：销毁队列，销毁并释放队列 Q 所占用的内存空间&lt;/p&gt;
&lt;p&gt;EnQueue (&amp;amp;Q,x)：入队，若队列 Q 未满，将 x 加入，使之称为新的队尾&lt;/p&gt;
&lt;p&gt;DeQueue (&amp;amp;Q,x)：出队，若队列 Q 非空，删除队头元素，并用 x 返回&lt;/p&gt;
&lt;p&gt;GetHead (Q,&amp;amp;x)：获取队头元素，若队列非空，则将队头赋值给 x&lt;/p&gt;
&lt;p&gt;QueueEmpty (Q)：判队列空，若队列 Q 位空，返回 true，否则返回 false&lt;/p&gt;
&lt;h4 id=&#34;队列的顺序实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#队列的顺序实现&#34;&gt;#&lt;/a&gt; 队列的顺序实现&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define MaxSize 10
typedef struct&amp;#123;
    ElemType data[MaxSize];  //用静态数组存放队列元素
    int front,rear; //队头指针和队尾指针
&amp;#125; SqQueue;

void InitQueue(SqQueue &amp;amp;Q)&amp;#123; //初始化
    //初始化时，队头、队尾指针指向0
    Q.rear=Q.front=0;
&amp;#125;

bool QueueEmpty(SqQueue Q)&amp;#123; //队列判空
    if(Q.rear==Q.front)
        return true;
    else
        return false;
&amp;#125;

bool EnQueue(SqQueue &amp;amp;Q,ElemType x)&amp;#123; //入队
    if((Q.rear+1)%MaxSize==Q.front) //本质上这个队列被改造成了循环队列
        return false;
    Q.data[Q.rear]=x;
    Q.rear=(Q.rear+1)%MaxSize;
    return true;
&amp;#125;

bool DeQueue(SqQueue &amp;amp;Q,ElemType x)&amp;#123; //出队（删除一个元素，并用x返回）
    if(Q.rear==Q.front)
        return false;
    x=Q.data[Q.front];
    Q.front=(Q.front+1)%MaxSize;
    return true;
&amp;#125;

bool GetHead(SqQueue Q,ElemType &amp;amp;x)&amp;#123; //获取队头
    if(Q.rear==Q.front)
        return false;
    x=Q.data[Q.front];
    return true;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;队列元素个数：(rear+MaxSize-front)% MaxSize&lt;/p&gt;
&lt;p&gt;判断队列已满 / 为空：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;常规方法：(Q.rear+1)% MaxSize==Q.front，但是会浪费一个空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;增加 size，用 size 来记录队列元素个数以判断是否为满 \ 空&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;增加 tag，tag 表示最近进行的是删除 / 插入，初始为 0，每次删除操作成功时，都令 tag=0，每次插入操作成功时，都令 tag=1，只有删除操作，才会导致队列为空，同样只有插入操作，才会导致队列为满，因此：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;队列为满：Q.rear==Q.front &amp;amp;&amp;amp; tag == 1&lt;/li&gt;
&lt;li&gt;队列为空：Q.rear==Q.front &amp;amp;&amp;amp; tag == 0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：有的题目队尾指针可能指向的是队尾元素，上面讨论结果都是队尾指针指向队尾元素的下一个元素&lt;/p&gt;
&lt;h4 id=&#34;队列链式实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#队列链式实现&#34;&gt;#&lt;/a&gt; 队列链式实现&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;typedef struct LinkNode&amp;#123; //链式队列节点
    ElemType data;
    struct LinkNode *next;
&amp;#125;LinkNode;
typedef struct&amp;#123; //链式队列
    LinkNode *front,*rear; //队列的队头和队尾指针
&amp;#125;LinkQueue;

void InitQueue(LinkQueue &amp;amp;Q)&amp;#123; //带头结点
    Q.front=Q.rear=(LinkNode*)malloc(sizeof(LinkNode));
    Q.front-&amp;gt;next=NULL;
&amp;#125;

bool IsEmpty(LinkQueue &amp;amp;Q)&amp;#123; //带头结点
    if(Q.front==Q.rear)
        return true;
    else
        return false;
&amp;#125;

void InitQueue(LinkQueue &amp;amp;Q)&amp;#123; //不带头结点
    Q.front=NULL;
    Q.rear=NULL;
&amp;#125;

bool IsEmpty(LinkQueue &amp;amp;Q)&amp;#123; //不带头结点
    if(Q.front==NULL)
        return true;
    else
        return false;
&amp;#125;

void Enqueue(LinkQueue &amp;amp;Q,ElemType x)&amp;#123;  //新元素入队（带头结点）
    LinkNode *s=(LinkNode*)malloc(sizeof(LinkNode));
    s-&amp;gt;data=x;
    s-&amp;gt;next=NULL;
    Q.rear-&amp;gt;next=s; //新节点插入到rear之前
    Q.rear=s; //修改表尾指针
&amp;#125;

void Enqueue(LinkQueue &amp;amp;Q,ElemType x)&amp;#123;  //新元素入队（不带头结点）
    LinkNode *s=(LinkNode*)malloc(sizeof(LinkNode));
    s-&amp;gt;data=x;
    s-&amp;gt;next=NULL;
    if(Q.front==NULL)&amp;#123;
        Q.front=s;
        Q.rear=s;
    &amp;#125; else&amp;#123;
        Q.rear-&amp;gt;next=s; //新节点插入到rear之前
    	Q.rear=s; //修改表尾指针
    &amp;#125;
&amp;#125;

bool Dequeue(LinkQueue &amp;amp;Q,ElemType &amp;amp;x)&amp;#123; //队头出队（带头结点）
    if(Q.front==Q.rear)
        return false; //空队
    LinkNode *p=Q.front-&amp;gt;next;
    x=p-&amp;gt;data;  //用变量x返回队头元素
    Q.front-&amp;gt;next=p-&amp;gt;next; //修改头结点的next指针
    if(Q.rear==p) //此次是最后一个节点
        Q.rear=Q.front; //修改rear指针
   	free(p);  //释放空间
    return true;
&amp;#125;

bool Dequeue(LinkQueue &amp;amp;Q,ElemType &amp;amp;x)&amp;#123; //队头出队（不带头结点）
    if(Q.front==NULL)
        return false; //空队
    LinkNode *p=Q.front-&amp;gt;next;
    x=p-&amp;gt;data;  //用变量x返回队头元素
    Q.front=p-&amp;gt;next; //修改头结点的next指针
    if(Q.rear==p)&amp;#123; //此次是最后一个节点
        Q.rear=NULL;
        Q.front=NULL;
    &amp;#125; 
   	free(p);  //释放空间
    return true;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;双端队列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#双端队列&#34;&gt;#&lt;/a&gt; 双端队列&lt;/h4&gt;
&lt;p&gt;队列：只允许从一端插入、另一端删除的线性表&lt;/p&gt;
&lt;p&gt;双端队列：只允许从两端插入、两端删除的线性表&lt;/p&gt;
&lt;p&gt;输入受限的双端队列：只允许从一端插入、两端删除的线性表&lt;/p&gt;
&lt;p&gt;输出受限的双端队列：只允许从两端插入，一端删除的线性表&lt;/p&gt;
&lt;p&gt;考点：判断输出序列的合法性&lt;/p&gt;
&lt;p&gt;输入受限的双端队列：栈中合法的序列，双端队列中一定也合法&lt;/p&gt;
&lt;p&gt;输出受限的双端队列：栈中合法的序列，双端队列中一定也合法&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-2-2/</guid>
            <title>计算机组成原理408-2-2</title>
            <link>http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-2-2/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/categories/computer-science/principles-of-computer-composition/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" />
            <pubDate>Thu, 11 Apr 2024 17:35:58 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;写在开头：由于原、补码的乘除法运算在考试中一般只占 2 分，所以不想看完全可以跳过&lt;/p&gt;
&lt;h4 id=&#34;奇偶校验码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#奇偶校验码&#34;&gt;#&lt;/a&gt; 奇偶校验码&lt;/h4&gt;
&lt;p&gt;奇校验码：整个校验码（有效信息和校验位）中 &amp;quot;1&amp;quot; 的个数为奇数&lt;/p&gt;
&lt;p&gt;偶校验码：整个校验码（有效信息和校验位）中 &amp;quot;1&amp;quot; 的个数为偶数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例：给出两个编码 1001101 和 1010111 的奇校验码和偶校验码
&lt;ul&gt;
&lt;li&gt;设最高位为校验位，余 7 位是信息位，则对应的奇偶校验码为：&lt;/li&gt;
&lt;li&gt;奇校验：(1) 1001101   (0) 1010111&lt;/li&gt;
&lt;li&gt;偶校验：(0) 1001101   (1) 1010111&lt;/li&gt;
&lt;li&gt;若发生了 1bit 的数据发生错误，奇偶校验可以检测数错误位&lt;/li&gt;
&lt;li&gt;若发生了偶数个 bit 的数据发生错误，奇偶校验无法检测出错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;偶校验的硬件实现：各信息进行异或运算，得到的结果位偶校验位，若结果为 1 说明出错&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;算数逻辑单元alu&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#算数逻辑单元alu&#34;&gt;#&lt;/a&gt; 算数逻辑单元 (ALU)&lt;/h4&gt;
&lt;p&gt;算数运算：加、减、乘、除等&lt;/p&gt;
&lt;p&gt;逻辑运算：与、或、非、异或等&lt;/p&gt;
&lt;p&gt;辅助功能：移位、求补等&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/04/12/oNHjvR4uFEM2y8f.png&#34; alt=&#34;ALU&#34; /&gt;&lt;/p&gt;
&lt;p&gt;基本逻辑运算：与、或、非&lt;/p&gt;
&lt;p&gt;优先级：与 &amp;gt; 或；与或符合分配律和结合律&lt;/p&gt;
&lt;p&gt;本质上逻辑表达式是对电路的数学化描述，简化逻辑表达式就是简化电路&lt;/p&gt;
&lt;p&gt;符合逻辑：与非、或非、异或、同或&lt;/p&gt;
&lt;h4 id=&#34;一位全加器fa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一位全加器fa&#34;&gt;#&lt;/a&gt; 一位全加器 (FA)&lt;/h4&gt;
&lt;ul i-1=&#34;&#34;&gt;
&lt;li&gt;输入：
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;A_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;B_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;C_{i-1}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.891661em;vertical-align:-0.208331em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.311664em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.208331em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;(来自低位的进位)，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;输出
&lt;ul&gt;
&lt;li i-1=&#34;&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;S_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; (本位的和)：输入中有奇数个 1 时为 1，S_i=A_i\oplus B_i\oplus C_&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;C_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; (向高位的进位)：输入中至少两个 1，C_i=A_iB_i+(A_i\oplus B_i)C_&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;串行加法器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#串行加法器&#34;&gt;#&lt;/a&gt; 串行加法器&lt;/h4&gt;
&lt;p&gt;串行加法器：只有一个全加器，数据逐位串行送入加法器中进行运算。进位触发器用来寄存进位信号，以便参与下一次计算&lt;/p&gt;
&lt;p&gt;如果操作数有 n 位，加法就要分 n 次进行，每一次产生一位和，并且串行逐位地送回寄存器&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/04/12/pDUv5soyJcgQuYR.png&#34; alt=&#34;串行加法器&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;并行加法器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并行加法器&#34;&gt;#&lt;/a&gt; 并行加法器：&lt;/h4&gt;
&lt;p&gt;串行进位的并行加法器：把 n 个全加器串接起来，就可以进行两个 n 位数的相加&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/04/12/TuwghI6tvGbiYl4.png&#34; alt=&#34;串行进位并行加法器&#34; /&gt;&lt;/p&gt;
&lt;p&gt;串行进位又称为行波进位，每一级进位直接依赖于前一级进位，即进位值号是逐级形成的&lt;/p&gt;
&lt;p&gt;并行进位的并行加法器：各级进位信号同时形成，又称为先行进位、同时进位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;⊕&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;⊕&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;C_i=A_iB_i+(A_i\oplus B_i)(A_{i-1}B_{i-1}+(A_{i-1}\oplus B_{i-1})(...))&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;⊕&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.311664em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.208331em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.311664em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.208331em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.311664em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.208331em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;⊕&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.311664em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.208331em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;逐级展开，直到&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;C_0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;结论：第 i 位向更高位进位&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;C_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 可根据被加数、加数的第 1~i 位，再结合&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;C_0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 即可确定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/04/12/XCPyLY6123fWBlh.png&#34; alt=&#34;并行进位并行加法器&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;补码加减运算器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#补码加减运算器&#34;&gt;#&lt;/a&gt; 补码加减运算器&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/04/12/RT3iQG6BudzVSUO.png&#34; alt=&#34;补码加减运算器&#34; /&gt;&lt;/p&gt;
&lt;p&gt;n bit 补码 X+Y，按位相加即可&lt;/p&gt;
&lt;p&gt;n bit 补码 X-Y，将减数 Y 全部按位取反，末位 + 1，得到 [-Y] 补，减法变加法&lt;/p&gt;
&lt;p&gt;无符号整数的加法 / 减法也可用该电路实现&lt;/p&gt;
&lt;h4 id=&#34;原码的加减运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原码的加减运算&#34;&gt;#&lt;/a&gt; 原码的加减运算&lt;/h4&gt;
&lt;p&gt;原码的加法运算：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正 + 正：绝对值做加法，结果为正（可能溢出）&lt;/li&gt;
&lt;li&gt;负 + 负：绝对值做加法，结果为负（可能溢出）&lt;/li&gt;
&lt;li&gt;(正 + 负)/(负 + 正)：绝对值大的减绝对值小的，符号同绝对值大的数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原码的减法运算：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正 - 负：正 + 正&lt;/li&gt;
&lt;li&gt;负 - 正：负 + 负&lt;/li&gt;
&lt;li&gt;正 - 正：正 + 负&lt;/li&gt;
&lt;li&gt;负 - 负：负 + 正&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;补码的加减运算溢出判断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#补码的加减运算溢出判断&#34;&gt;#&lt;/a&gt; 补码的加减运算溢出判断&lt;/h4&gt;
&lt;p&gt;方法一：采用一位符号位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设 A 的符号为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;A_S&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，B 的符号为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;B_S&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，运算结果的符号为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;S_S&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，则溢出的逻辑表达式为：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/msub&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;true&#34;&gt;‾&lt;/mo&gt;&lt;/mover&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;msub&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;true&#34;&gt;‾&lt;/mo&gt;&lt;/mover&gt;&lt;msub&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;V=A_SB_S\overline{A_S}\overline{B_S}S_S&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.03333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord overline&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8833300000000001em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.80333em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;overline-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord overline&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8833300000000001em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.80333em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;overline-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若 V=0，表示无溢出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若 V=1，表示有溢出&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法二：采用一位符号位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据数据进位判断溢出，最高数值位的进位&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;C_1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，符号位的进位为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;C_S&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;当&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;C_S&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 与&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;C_1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 不同时，则有溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法三：采用双符号位&lt;/p&gt;
&lt;p&gt;正数符号为 00，负数符号为 11，若两个符号位的两个数字不同，则说明有溢出，反之，则没有溢出&lt;/p&gt;
&lt;p&gt;双符号位补码又称：模 4 补码，单符号位补码又称：模 2 补码&lt;/p&gt;
&lt;p&gt;双符号位在实际存储时只存储 1 个符号位，运算时会复制一个符号位&lt;/p&gt;
&lt;h4 id=&#34;符号扩展&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#符号扩展&#34;&gt;#&lt;/a&gt; 符号扩展&lt;/h4&gt;
&lt;p&gt;定点整数的符号扩展：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在原符号位和数值位中间添加新位，正数都添 0，负数原码添 0，负数反、补码添 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定点小数的符号扩展：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在原符号位和数值位后面添加新位，正数都添 0，负数原、补码添 0，负数反码添 1&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;标志位的生成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标志位的生成&#34;&gt;#&lt;/a&gt; 标志位的生成&lt;/h4&gt;
&lt;p&gt;OF：溢出标志，溢出时为 1，否则置 0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件的计算方法：OF = 最高位产生的进位异或次高位产生的进位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SF：符号标志，结果为负时为 1，否则置 0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件的计算方法：最高位的本位和&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ZF：零标志，运算结果为 0 时，ZF 为 1，否则置 0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件的计算方法：两个数的运算结果为 nbit，只有 n bit 全为 0 时，ZF=1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CF：进位 / 借位标志，进位 / 错位时置 1，否则置 0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件的计算方法：CF = 最高位产生的进位异或 sub（sub=0 表示加法，sub=1 表示减法）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OF、SF 仅对有符号数加减法有效，ZCF 仅对无符号数加减法有效&lt;/p&gt;
&lt;h4 id=&#34;移位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#移位&#34;&gt;#&lt;/a&gt; 移位&lt;/h4&gt;
&lt;p&gt;移位：通过改变各个数码和小数点的相对位置，从而改变各数码位的位权。可用移位运算实现乘法、除法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;原码的算数移位：符号位保持不变，仅对数值位进行移位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;右移：高位补 0，低位舍弃。若舍弃的位 = 0，则相当于除 2，若舍弃的位不等于 0，则会丢失精度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;左移：低位补 0，高位舍弃。若舍弃的位 = 0，则相当于乘 2，若舍弃的位不等于 0，则会出现严重误差&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反码的算数移位：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正数的反码与原码相同，因此对正数反码的移位运算也与原码相同&lt;/li&gt;
&lt;li&gt;负数的反码数值位于原码相反
&lt;ul&gt;
&lt;li&gt;右移：高位补 1，低位舍弃&lt;/li&gt;
&lt;li&gt;左移：低位补 1，高位舍弃&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;补码的算数移位：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正数的补码与原码相同，因此对正数反码的移位运算也与原码相同&lt;/li&gt;
&lt;li&gt;负数补码 = 反码末位 + 1，导致反码最右边几个连续的 1 都因进位而变 0，直到第一个 0 为止
&lt;ul&gt;
&lt;li&gt;规律 —— 负数补码中，最右边的 1 及其右边同原码。最右边的 1 的左边同反码&lt;/li&gt;
&lt;li&gt;右移（同反码）—— 高位补 1，低位舍弃&lt;/li&gt;
&lt;li&gt;左移（同原码）—— 低位补 0，高位舍弃&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;逻辑移位：左移、右移都补 0，移出的位舍弃&lt;/p&gt;
&lt;p&gt;循环移位：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不带进位：用移出的位补上空缺&lt;/li&gt;
&lt;li&gt;带进位：移出的位放到进位位，原进位位补上空缺&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：由于原、反、补码位数有限，因此在某些时候算数移位不能精确等效乘法、除法&lt;/p&gt;
&lt;h4 id=&#34;原码的乘法计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原码的乘法计算&#34;&gt;#&lt;/a&gt; 原码的乘法计算&lt;/h4&gt;
&lt;p&gt;原码的一位乘法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;符号单独处理：符号位 =&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;⊕&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;x_s\oplus y_s&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.73333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;⊕&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.625em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数值位取绝对值进行乘法计算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现方法：先加法再移位，重复 n 次（移位为逻辑移位）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每次加法可能 + 0，+[|x|] 原（根据当前 MQ 中的最低位来确定加什么）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MQ 中最低位 = 1 时，(ACC)+[|x|] 原&lt;/li&gt;
&lt;li&gt;MQ 中最低位 = 0 时，(ACC)+0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;补码的乘法计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#补码的乘法计算&#34;&gt;#&lt;/a&gt; 补码的乘法计算&lt;/h4&gt;
&lt;p&gt;补码的一位乘法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进行 n 轮加法、移位，最后再多来一次加法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每次加法可能 + 0，+[x] 补，+[-x] 补（根据当前 MQ 中的最低位、辅助位来确定加什么）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;辅助位 - MQ 中最低位 = 1 时，(ACC)+[x] 补&lt;/li&gt;
&lt;li&gt;辅助位 - MQ 中最低位 = 0 时，(ACC)+0&lt;/li&gt;
&lt;li&gt;辅助位 - MQ 中最低位 =-1 时，(ACC)+[-x] 补&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每次右移为补码的算数右移&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;符号位参与运算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;辅助位初始为 0。每次右移会使 MQ 的最低位顶替原本的辅助位（事实上 MQ 共 n+2 位）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有寄存器都统一用 n+2 位，因此采用双符号位补码运算&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;原码的除法运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原码的除法运算&#34;&gt;#&lt;/a&gt; 原码的除法运算&lt;/h4&gt;
&lt;p&gt;规律：忽略小数点，每确定一位商，进行一次减法，得到 4 位余数，在余数末尾补 0，再确定下一位商。确定 5 位商即可停止（机器字长为 5 位）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;恢复余数法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现方法：上商 0/1，得到余数，余数末尾补 0&lt;/li&gt;
&lt;li&gt;符号位单独处理：符号位 =&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;⊕&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;x_s\oplus y_s&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.73333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;⊕&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.625em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;数值位取绝对值进行除法计算&lt;/li&gt;
&lt;li&gt;计算机先默认上商 1，求余数：(ACC)-(除数)-&amp;gt;ACC，若得到的相减结果（ACC+[-|y|] 补 -&amp;gt;ACC）为负数，则改上商 0，并恢复余数（ACC+[|y|] 补 -&amp;gt;ACC）&lt;/li&gt;
&lt;li&gt;ACC、MQ 整体逻辑左移，ACC 高位丢弃，MQ 低位补 0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加减交替法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若余数为负，则可直接商 0，让余数逻辑左移一位再加上 | 除数 | 得到下一个新余数&lt;/li&gt;
&lt;li&gt;若余数为正，则商 1，让余数左移 1 位再减去 | 除数 |，得到下一个新余数&lt;/li&gt;
&lt;li&gt;符号位也需要单独处理&lt;/li&gt;
&lt;li&gt;若最后得到的余数为负，则需商 0，并 +[|y|] 补得到正确余数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;补码的除法运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#补码的除法运算&#34;&gt;#&lt;/a&gt; 补码的除法运算&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;符号位参与计算&lt;/li&gt;
&lt;li&gt;被除数 / 余数、除数采用双符号位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;加减交替法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;被除数和除数同号，则被除数减去除数；异号则加上除数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;余数和除数同号，商 1，余数左移一位减去除数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;余数和除数异号，商 0，余数左移一位加上除数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重复 n 次&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但最后结果末位恒置为 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;除法类型&lt;/th&gt;
&lt;th&gt;符号位参与运算&lt;/th&gt;
&lt;th&gt;加减次数&lt;/th&gt;
&lt;th&gt;移位&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;上商、加减原则&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;方向&lt;/td&gt;
&lt;td&gt;次数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;原码加减交替法&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;N+1 或 N+2&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;余数的正负&lt;/td&gt;
&lt;td&gt;若最终余数为负，需恢复余数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;补码加减交替法&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;N+1&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;余数和除数是否同号&lt;/td&gt;
&lt;td&gt;商末位恒置 1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;c语言类型转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c语言类型转换&#34;&gt;#&lt;/a&gt; C 语言类型转换&lt;/h4&gt;
&lt;p&gt;无符号数与有符号数：不改变数据内容，改变解释方式&lt;/p&gt;
&lt;p&gt;长整数变短整数：高位截断，保留低位&lt;/p&gt;
&lt;p&gt;短整数变长整数：符号扩展&lt;/p&gt;
&lt;h4 id=&#34;数据的存储和排列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据的存储和排列&#34;&gt;#&lt;/a&gt; 数据的存储和排列&lt;/h4&gt;
&lt;p&gt;最低有效字节、最高有效字节：&lt;/p&gt;
&lt;p&gt;4 字节 int：01 23 45 67 H（16 进制）&lt;/p&gt;
&lt;p&gt;01 为最高有效字节（MSB），67 为最低有效字节（LSB）&lt;/p&gt;
&lt;p&gt;大小端模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;大端模式（方便人类阅读）：把最高有效字节存入更低地址，最低有效字节存入更高地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小端模式（便于机器处理）：把最高有效字节存入更高地址，最低有效字节存入更低地址&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现代计算机通常是按字节编址，即每个字节对应 1 个地址，通常也支持按字、按半字、按字节寻址。假设存储字长位 32 位，则 1 个字 = 32bit，半字 = 16bit。每次访存只能读 / 写 1 个字&lt;/p&gt;
&lt;p&gt;边界对齐方式：访问一个字 / 半字都只需要一次访存&lt;/p&gt;
&lt;p&gt;边界不对齐方式：访问一个字 / 半字可能需要两次访存&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-2-3/</guid>
            <title>数据结构408-2-3</title>
            <link>http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-2-3/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/categories/computer-science/data-structure/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <pubDate>Mon, 08 Apr 2024 16:41:20 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;顺序表 (顺序存储)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：可随机存取，存储密度高&lt;/li&gt;
&lt;li&gt;缺点：要求大片连续空间，改变容量不方便&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单链表 (链式存储)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：不要求大片连续空间，改变容量方便&lt;/li&gt;
&lt;li&gt;缺点：不可随机存取，要耗费一定空间存放指针&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;代码定义单链表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码定义单链表&#34;&gt;#&lt;/a&gt; 代码定义单链表&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;typedef struct LNode &amp;#123; //定义单链表节点类型
    ElemType data; //每个节点存放一个数据元素
    struct Lnode *next; //指针指向下一个节点
&amp;#125;LNode,*LinkList;
struct LNode* p=(struct LNode*)malloc(sizeof(struct LNode))
LinkList L;
LNode* L;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;单链表初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单链表初始化&#34;&gt;#&lt;/a&gt; 单链表初始化&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;typedef struct LNode&amp;#123;
    ElemType data;
    struct LNode *next;
&amp;#125;LNode,*LinkList;

bool InitList(LinkList &amp;amp;L)&amp;#123; //不带头结点初始化
    L=NULL;
    return true;
&amp;#125;
bool InitList(LinkList &amp;amp;L)&amp;#123; //带头节点初始化
    L=(LNode*)malloc(sizeof(LNode));
    if(L==NULL)
        return false;
   	L-&amp;gt;next=NULL;
    return true;
&amp;#125;
bool Empty(LinkList L)&amp;#123; //不带头结点检查
    if(L==NULL)
        return true;
  	else
        return false;
&amp;#125;
bool Empty(LinkList L)&amp;#123;
    if(L-&amp;gt;next==NULL)
        return true;
   	else
        return false;
&amp;#125;
void test()&amp;#123;
    LinkList L;
    InitList(L);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;插入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#插入&#34;&gt;#&lt;/a&gt; 插入&lt;/h4&gt;
&lt;p&gt;带头结点按位序插入：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;bool ListInsert(LinkList &amp;amp;L,int i,ElemType e) &amp;#123;
    if(i&amp;lt;1)
        return false;
   	LNode *p; //指针p指向当前扫描到的节点
    int j=0; //当前p指向的是第几个节点
    p=L; //L指向头结点，头结点是第0个节点（不存数据）
    while(p!=NULL &amp;amp;&amp;amp; j&amp;lt;i-1)&amp;#123; //循环找到第i-1个节点
        p=p-&amp;gt;next;
        j++;
    &amp;#125;
    if(p==NULL) //i值不合法
        return false;
    LNode *s=(LNode*)malloc(sizeof(LNode));
    s-&amp;gt;data=e;
    s-&amp;gt;next=p-&amp;gt;next;
    p-&amp;gt;next=s; //将结点s插入到p之后
    return true;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不带头结点按位序插入：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;bool ListInsert(LinkList &amp;amp;L,int i,ElemType e) &amp;#123;
    if(i&amp;lt;1)
        return false;
    if(i==1)&amp;#123; //插入第一个节点的操作与其他结点操作不同
        LNode *s=(LNode*)malloc(sizeof(LNode));
        s-&amp;gt;data=e;
        s-&amp;gt;next=L;
        L=s;
        return true;
    &amp;#125;
   	LNode *p; //指针p指向当前扫描到的节点
    int j=0; //当前p指向的是第几个节点
    p=L; //L指向头结点，头结点是第0个节点（不存数据）
    while(p!=NULL &amp;amp;&amp;amp; j&amp;lt;i-1)&amp;#123; //循环找到第i-1个节点
        p=p-&amp;gt;next;
        j++;
    &amp;#125;
    if(p==NULL) //i值不合法
        return false;
    LNode *s=(LNode*)malloc(sizeof(LNode));
    s-&amp;gt;data=e;
    s-&amp;gt;next=p-&amp;gt;next;
    p-&amp;gt;next=s; //将结点s插入到p之后
    return true;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;指定节点后插操作&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;bool InsertNextNode(LNode* p,ElemType e)&amp;#123;
    if(p==NULL)
        return false;
    LNode *s=(LNode*)malloc(sizeof(LNode));
    if(s==NULL) //内存分配失败
        return false;
    s-&amp;gt;data=e;  //用节点s保存数据元素e
    s-&amp;gt;next=p-&amp;gt;next;
    p-&amp;gt;next=s;
    return true;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;指定节点的前插操作&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;bool InsertPriorNode(LNode *p,ElemType e)&amp;#123;
    if(p==NULL)
        return false;
   	LNode *s=(LNode*)malloc(sizeof(LNode));
    if(s==NULL)
        return false;
    s-&amp;gt;next=p-&amp;gt;next;
    p-&amp;gt;next=s;
    s-&amp;gt;data=p-&amp;gt;data; //本质上就是先后插，再交换前一个节点和当前节点的值
    p-&amp;gt;data=e;
    return true;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;删除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除&#34;&gt;#&lt;/a&gt; 删除&lt;/h4&gt;
&lt;p&gt;带头结点按位序删除：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;bool ListDelete(LinkList &amp;amp;L,int i,ElemType &amp;amp;e)&amp;#123;
    if(i&amp;lt;1)
        return false;
    LNode *p;
    int j=0;
    p=L;
    while(p!=NULL &amp;amp;&amp;amp; j&amp;lt;i-1)&amp;#123;
        p=p-&amp;gt;next;
        j++;
    &amp;#125;
    if(p==NULL)
        return false;
    if(p-&amp;gt;next==NULL) //第i-1个结点之后已无其他结点
        return false;
    LNode *q=p-&amp;gt;next; //令q指向被删除节点
    e=q-&amp;gt;data; //用e返回元素的值
    p-&amp;gt;next=q-&amp;gt;next; //将*q结点从链中断开
    free(q); //释放结点的储存空间
    return true;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;指定节点的删除：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;bool DeleteNode(LNode *p)&amp;#123;
    if(p==NULL)
        return false;
    LNode *q=p-&amp;gt;next; //令q指向*p的后继点
    p-&amp;gt;data=p-&amp;gt;next-&amp;gt;data; //和后继结点交换数据
    p-&amp;gt;next=q-&amp;gt;next; //将*q结点从链中断开
    free(q); //释放存储空间
    return false;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;查找&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查找&#34;&gt;#&lt;/a&gt; 查找&lt;/h4&gt;
&lt;p&gt;按位查找：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;LNode* GetElem(LinkList L,int i)&amp;#123;
	if(i&amp;lt;0)
        return false;
    LNode *p;
    int j=0;
    p=L;
    while(p!=NULL &amp;amp;&amp;amp; j&amp;lt;i)&amp;#123;
        p=p-&amp;gt;next;
        j++;
    &amp;#125;
    return p;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;按值查找&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;LNode *LocateElem(LinkList L,ElemType e)&amp;#123;
    LNode *p=L-&amp;gt;next;
    //从第1个节点开始查找数据域为e的节点
    while(p!=NULL &amp;amp;&amp;amp; p-&amp;gt;data!=e)&amp;#123;
        p=p-&amp;gt;next;
    &amp;#125;
    return p;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;单链表建立&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单链表建立&#34;&gt;#&lt;/a&gt; 单链表建立&lt;/h4&gt;
&lt;p&gt;尾插法建立单链表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;LinkList List_TailInsert(LinkList &amp;amp;L)&amp;#123;
    int x;
    L=(LinkList)malloc(sizeof(LinkList));
    LNode *s,*r=L; //r为表尾指针
    scanf(&amp;quot;%d&amp;quot;,&amp;amp;x);
    while(x!=114514)&amp;#123;  //输入114514示结束，也可以用其他数字
        s=(LNode*)malloc(sizeof(LNode));
        s-&amp;gt;data=x;
        r-&amp;gt;next=s;
        r=s;
        scanf(&amp;quot;%d&amp;quot;,&amp;amp;x);
    &amp;#125;
    r-&amp;gt;next=NULL;
    return L;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;头插法建立单链表：(应用：链表的逆置)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;LinkList List_HeadInsert(LinkList &amp;amp;L)&amp;#123;
    LNode *s;
    int x;
    L=(LinkList)malloc(sizeof(LNode));
    L-&amp;gt;next=NULL;
    scanf(&amp;quot;%d&amp;quot;,&amp;amp;x);
    while(x!=9999)&amp;#123;
        s=(LNode*)malloc(sizeof(LNode));
        s-&amp;gt;data=x;
        s-&amp;gt;next=L-&amp;gt;next;
        L-&amp;gt;next=s;
        scanf(&amp;quot;%d&amp;quot;,&amp;amp;x);
    &amp;#125;
    return L;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;双链表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#双链表&#34;&gt;#&lt;/a&gt; 双链表&lt;/h4&gt;
&lt;p&gt;结构体定义：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;typedef struct DNode &amp;#123;
    ElemType data;
    struct DNode *prior,*next;
&amp;#125;DNode,*DLinkList;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建双链表及判空：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;bool Empty(DLinkList L)&amp;#123;
    if(L-&amp;gt;next==NULL)
        return true;
   	else
        return false;
&amp;#125;
bool InitDLinkList(DLinkList &amp;amp;L)&amp;#123;
    L=(DNode*)malloc(sizeof(DNode));
    if(L==NULL)
        return false;
   	L-&amp;gt;prior=NULL;
    L-&amp;gt;next=NULL;
    return true;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;双链表的插入：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;bool InsertNextDNode(DNode *p,DNode *s)&amp;#123;
    if(p==NULL || s==NULL)
        return false;
    s-&amp;gt;next=p-&amp;gt;next;
    if(p-&amp;gt;next!=NULL)
    	p-&amp;gt;next-prior=s;
    s-&amp;gt;prior=p;
    p-&amp;gt;next=s;
    return true;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;双链表的删除：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;bool DeleteNextDNode(DNode *p)&amp;#123;
    if(p==NULL)
        return false;
    DNode *q=p-&amp;gt;next;
    if(q==NULL)
        return false;
    p-&amp;gt;next=q-&amp;gt;next;
    if(q-&amp;gt;next!=NULL)
        q-&amp;gt;next-&amp;gt;prior=p;
    free(q);
    return true;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;销毁双链表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;void DestoryList(DLinkList &amp;amp;L)&amp;#123;
    while(L-&amp;gt;next!=NULL)
        DeleteDNode(L);
   	free(L);
    L=NULL;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;双向链表的遍历：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;//前向遍历
while(p!=NULL)
    p=p-&amp;gt;next;
//后向遍历
while(p!=NULL)
    p=p-&amp;gt;prior;
//前向遍历(跳过头结点)
while(p-&amp;gt;prior!=NULL)
    p=p-&amp;gt;prior;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;循环单链表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环单链表&#34;&gt;#&lt;/a&gt; 循环单链表&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;typedef struct LNode&amp;#123;
    ElemType data;
    struct LNode *next;
&amp;#125;LNode,*LinkList;

bool InitList(LinkList &amp;amp;L)&amp;#123;
    L=(LNode*)malloc(sizeof(LNode));
    if(L==NULL)
        return false;
    L-&amp;gt;next=L;
    return true;
&amp;#125;
bool Empty(LinkList L)&amp;#123; //判断链表是否为空
    if(L-&amp;gt;next==L)
        return true;
    else
        return false;
&amp;#125;
bool isTail(LinkList L,LNode *p)&amp;#123; //判断是否为尾结点
    if(p-&amp;gt;next==L)
        return true;
    else
        return false;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;很多时候对链表操作对头部或尾部，可以让 L 指向表尾元素&lt;/p&gt;
&lt;h4 id=&#34;循环双链表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环双链表&#34;&gt;#&lt;/a&gt; 循环双链表&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;typedef struct DNode &amp;#123;
    ElemType data;
    struct DNode *prior,*next;
&amp;#125;DNode,*DLinkList;

bool InitDLinkList(DLinkList &amp;amp;L)&amp;#123;
    L=(DNode*)malloc(sizeof(DNode));
    if(L==NULL)
        return false;
   	L-&amp;gt;prior=L;
    L-&amp;gt;next=L;
    return true;
&amp;#125;
bool Empty(DLinkList L)&amp;#123;
    if(L-&amp;gt;next==L)
        return true;
   	else
        return false;
&amp;#125;
bool isTail(DLinkList L,DNode *p)&amp;#123; //判断是否为尾结点
    if(p-&amp;gt;next==L)
        return true;
    else
        return false;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;循环双链表插入与删除：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;bool InsertNextDNode(DNode *p,DNode *s)&amp;#123;
    s-&amp;gt;next=p-&amp;gt;next;
    p-&amp;gt;next-prior=s;
    s-&amp;gt;prior=p;
    p-&amp;gt;next=s;
    return true;
&amp;#125;
bool DeleteNextDNode(DNode *p)&amp;#123;
    DNode *q=p-&amp;gt;next;
    p-&amp;gt;next=q-&amp;gt;next;
    q-&amp;gt;next-&amp;gt;prior=p;
    free(q);
    return true;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;静态链表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态链表&#34;&gt;#&lt;/a&gt; 静态链表&lt;/h4&gt;
&lt;p&gt;单链表：各个节点在内存中星罗棋布、散落天涯&lt;/p&gt;
&lt;p&gt;静态链表：分配一整片连续的内存空间，各个节点集中安置（用数组的方式实现的链表）&lt;/p&gt;
&lt;p&gt;定义：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define MaxSize 10
typedef struct &amp;#123;
    ElemType data;
    int next;
&amp;#125;SLinkList[MaxSize];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查找：从头结点出发挨个往后遍历节点&lt;/p&gt;
&lt;p&gt;插入位序为 i 的节点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找到一个空的节点，存入数据元素&lt;/li&gt;
&lt;li&gt;从头结点找到位序为 i-1 的节点&lt;/li&gt;
&lt;li&gt;修改新节点的 next&lt;/li&gt;
&lt;li&gt;修改 i-1 号节点的 next&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：增、删操作不需要大量移动元素&lt;/p&gt;
&lt;p&gt;缺点：不能随机存取，只能从头结点开始依次往后查找；容量固定不可变&lt;/p&gt;
&lt;p&gt;适用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不支持指针的低级语言&lt;/li&gt;
&lt;li&gt;数据元素数量固定不变的场景 (如操作系统的文件分配表 FAT)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;顺序表与链表对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序表与链表对比&#34;&gt;#&lt;/a&gt; 顺序表与链表对比&lt;/h4&gt;
&lt;p&gt;逻辑结构：都属于线性表，都是线性结构&lt;/p&gt;
&lt;p&gt;存储结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序表（顺序存储）
&lt;ul&gt;
&lt;li&gt;优点：支持随机存数、存储密度高&lt;/li&gt;
&lt;li&gt;缺点：大片连续空间分配不方便，改变容量不方便&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;链表（链式存储）
&lt;ul&gt;
&lt;li&gt;优点：离散的小空间分配方便，改变容量方便&lt;/li&gt;
&lt;li&gt;缺点：不可随机存取，存储密度低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创
&lt;ul&gt;
&lt;li&gt;静态分配：静态数组&lt;/li&gt;
&lt;li&gt;动态分配；动态数组（malloc,free）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;顺序表&lt;/th&gt;
&lt;th&gt;链表&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;弹性（可扩容）&lt;/td&gt;
&lt;td&gt;较差&lt;/td&gt;
&lt;td&gt;较优&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;增、删&lt;/td&gt;
&lt;td&gt;较差&lt;/td&gt;
&lt;td&gt;较优&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;查&lt;/td&gt;
&lt;td&gt;较优&lt;/td&gt;
&lt;td&gt;较差&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-2-1/</guid>
            <title>计算机组成原理408-2-1</title>
            <link>http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-2-1/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/categories/computer-science/principles-of-computer-composition/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" />
            <pubDate>Mon, 08 Apr 2024 16:41:20 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;进制转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进制转换&#34;&gt;#&lt;/a&gt; 进制转换&lt;/h4&gt;
&lt;p&gt;基数：每个数码位所用到的不同符号的个数，r 进制的基数为 r&lt;/p&gt;
&lt;p&gt;二进制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用两个稳定状态的物理器件表示&lt;/li&gt;
&lt;li&gt;0,1 正好对应逻辑值假、真。方便实现逻辑运算&lt;/li&gt;
&lt;li&gt;可很方便地使用逻辑门电路实现算术运算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;任意进制 -&amp;gt; 十进制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二进制：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;10010010.110&lt;/mn&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;7&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;146.75&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;10010010.110\rightarrow1*2^7+1*2^4+1*2^{-1}+1*2^{-2}=146.75&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;八进制：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;251.5&lt;/mn&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;168.625&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;251.5\rightarrow 2*8^2+5*8^1+5*8^{-1}=168.625&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;十六进制：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mn&gt;86.1&lt;/mn&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mn&gt;6&lt;/mn&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;14&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mn&gt;6&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mn&gt;6&lt;/mn&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;6&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mn&gt;6&lt;/mn&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mn&gt;6&lt;/mn&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;44678.0625&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;AE86.1\rightarrow 10*16^3+14*16^2+8*16^1+6*16^0+1*16^{-1}=44678.0625&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二进制 -&amp;gt; 八进制、十六进制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二进制 -&amp;gt; 八进制
&lt;ul&gt;
&lt;li&gt;三位一组，转换成对应八进制符号&lt;/li&gt;
&lt;li&gt;111100010.01101-&amp;gt;(001)(111)(000)(010).(011)(010)-&amp;gt;1702.32 (八进制)&lt;/li&gt;
&lt;li&gt;同理八进制 -&amp;gt; 二进制时，一位对应三位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;二进制 -&amp;gt; 十六进制
&lt;ul&gt;
&lt;li&gt;四位一组，转换成对应十六进制符号&lt;/li&gt;
&lt;li&gt;111100010.01101-&amp;gt;(0011)(1100)(0010).(0110)(1000)-&amp;gt;3C2.68 (十六进制)&lt;/li&gt;
&lt;li&gt;同理十六进制 -&amp;gt; 二进制时，一位对应四位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各种进制常见书写形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;二进制 ——&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1001101&lt;/mn&gt;&lt;msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;1001110&lt;/mn&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(1001101)_2,1001110B&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;八进制 ——&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1632&lt;/mn&gt;&lt;msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(1632)_8&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;十六进制 ——&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1652&lt;/mn&gt;&lt;msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mn&gt;16&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;1652&lt;/mn&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;1652&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(1652)_{16},1652H,0\times1652&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.08125em;&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;十进制 ——&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1652&lt;/mn&gt;&lt;msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;1652&lt;/mn&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(1652)_{10},1652D&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;十进制 -&amp;gt; 任意进制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于整数部分，除基取余法，先取得的 &amp;quot;余&amp;quot; 是整数的低位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于小数部分，乘积取余法，先取得的 &amp;quot;整&amp;quot; 是小数的高位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有的十进制小数无法对二进制精确表示，如：0.3&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;真值和机器数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#真值和机器数&#34;&gt;#&lt;/a&gt; 真值和机器数&lt;/h4&gt;
&lt;p&gt;真值：符合人类习惯的数字&lt;/p&gt;
&lt;p&gt;机器数：数字实际存到机器里的形式，正负号需要被数字化&lt;/p&gt;
&lt;h4 id=&#34;bcd码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bcd码&#34;&gt;#&lt;/a&gt; BCD 码&lt;/h4&gt;
&lt;p&gt;每四个二进制位表示一个十进制字符&lt;/p&gt;
&lt;p&gt;8421 码 (有权码)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;正常的二进制对应映射&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;十进制 5+8-&amp;gt; 二进制 0101+1000-&amp;gt; 机器计算：先进行二进制加法，当得出的数字结果在 1010~10010 时，对整体加 6，即加 0110&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若相加结果在合法范围内，则无需修正&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;余 3 码 (无权码，每一个二进制位无固定权值)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;8421 码 +&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;0011&lt;/mn&gt;&lt;msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(0011)_2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2421 码：改变权值定义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表示 0-4 时，最高位为 0，表示 5-9 时，最高位为 1&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;无符号整数的表示和运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无符号整数的表示和运算&#34;&gt;#&lt;/a&gt; 无符号整数的表示和运算&lt;/h4&gt;
&lt;p&gt;无符号整数，即 &amp;quot;自然数&amp;quot;&lt;/p&gt;
&lt;ul&gt;
&lt;li i-1=&#34;&#34;&gt;全部二进制位都是数值位，没有符号位，第 i 位的位权是2^&lt;/li&gt;
&lt;li&gt;n bit 无符号整数表示范围 0~&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^n-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.747722em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，超出则溢出，意味着该计算机无法一次处理这么多&lt;/li&gt;
&lt;li&gt;可以表示最小的数全 0，可以表示最大的数全 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;加法运算：从最低位开始，按位相加，并往更高位进位&lt;/p&gt;
&lt;p&gt;减法运算：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被减数不变，减数全部位按位取反、末尾 + 1，减法变加法&lt;/li&gt;
&lt;li&gt;从最低位开始，按位相加，并往更高位进位&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;带符号整数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#带符号整数&#34;&gt;#&lt;/a&gt; 带符号整数&lt;/h4&gt;
&lt;p&gt;带符号整数，即整数&lt;/p&gt;
&lt;p&gt;原码：最高位为符号位，其他位为数值位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;符号位 0/1 对应正 / 负，剩余的数值位表示真值的绝对值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若机器字长为 n+1 位，带符号整数的原码表示范围：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;-(2^n-1)\le x\le 2^n-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≤&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7719400000000001em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≤&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.747722em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;真值 0 有两种形式：+0 和 - 0，[+0] (原)=0.0000000，[-0] (原)=1.0000000&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原码缺点：符号位不能参与运算，需要设计复杂的硬件电路才能处理&lt;/p&gt;
&lt;p&gt;补码表示真值 —— 符号位可以参与计算&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/04/11/3m7EHJqFD1yfKXn.png&#34; alt=&#34;不同码转换&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/04/11/lKMZObkgHShfr78.png&#34; alt=&#34;补码原码转换&#34; /&gt;&lt;/p&gt;
&lt;p&gt;补码的加法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从最低位开始，按位相加 (符号位参与运算)，并往更高位进位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;补码的数值位不能解读为 &amp;quot;位权&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;补码的减法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A-B=A+(-B)，因此，将 B 转变成 - B 即可&lt;/li&gt;
&lt;li&gt;从 [B] (补)&amp;lt;-&amp;gt;[-B] (补)，需要全部按位取反、末位加 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无符号整数的减法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被减数不变，减数全部按位取反，末位加 1，减法变加法&lt;/li&gt;
&lt;li&gt;从最低位开始，按位相加，并往更高位进位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/04/11/MOz2rtSV8GAKelW.png&#34; alt=&#34;各种码基本特性&#34; /&gt;&lt;/p&gt;
&lt;p&gt;移码：补码的基础上符号位取反。注意：移码只能用于表示整数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;真值 0 只有一种表示方法：1000000&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;机器字长为 n+1 位，移码整数的表示范围：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;-2^n\le x \le 2^n-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.800362em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≤&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7719400000000001em;vertical-align:-0.13597em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≤&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.747722em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;（与补码相同）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移码表示的整数很方便用硬件电路对比大小&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原码和反码的合法表示范围完全相同，都有两种方法表示 0&lt;/p&gt;
&lt;p&gt;补码的合法表示范围比原码多一个负数，只有一种方法表示 0&lt;/p&gt;
&lt;p&gt;移码的合法表示范围比原码多一个负数，只有一种方法表示 0&lt;/p&gt;
&lt;h4 id=&#34;定点小数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定点小数&#34;&gt;#&lt;/a&gt; 定点小数&lt;/h4&gt;
&lt;p&gt;定点整数（小数点默认在数值部分后面）的编码表示：原码、反码、补码、移码&lt;/p&gt;
&lt;p&gt;定点小数（小数点默认在符号位后面）的编码表示：原码、反码、补码&lt;/p&gt;
&lt;p&gt;定点小数原 / 反 / 补码的转换与整数一样&lt;/p&gt;
&lt;p&gt;定点小数的加 / 减运算：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于两个定点小数 A，B 进行加减法时，需先转换为补码&lt;/li&gt;
&lt;li&gt;加法：
&lt;ul&gt;
&lt;li&gt;从最低位开始，按位相加 (符号位参与计算)，并往更高维进位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;减法：
&lt;ul&gt;
&lt;li&gt;被减数不变，减数全部按位取反，末位 + 1，加法变减法&lt;/li&gt;
&lt;li&gt;从最低位开始，按位相加，并往更高位进位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/04/11/GqZSk7UKj45Rp1n.png&#34; alt=&#34;定点小数比较&#34; /&gt;&lt;/p&gt;
&lt;p&gt;特别注意：定点整数和定点小数位数扩展时，拓展位置不一样&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-2-1&amp;2/</guid>
            <title>数据结构408-2-1&amp;2</title>
            <link>http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-2-1&amp;2/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/categories/computer-science/data-structure/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <pubDate>Sun, 07 Apr 2024 21:41:30 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;线性表的定义和基本操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性表的定义和基本操作&#34;&gt;#&lt;/a&gt; 线性表的定义和基本操作&lt;/h3&gt;
&lt;h4 id=&#34;线性表的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性表的定义&#34;&gt;#&lt;/a&gt; 线性表的定义&lt;/h4&gt;
&lt;p&gt;线性表是具有相同数据类型 (每个数据元素所占空间一样大) 的&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n(n\ge 0)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≥&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个数据元素的有限序列 (有次序)，其中 n 为表长，当 n=0 时线性表是一个空表。若用 L 命名线性表，则其一般表示为：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;L=(a_1,a_2,...,a_i,a_{i+1},...,a_n)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.311664em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.208331em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;e.g: 所有的整数按递增次序排列，是线性表吗？由于整数是无限的，因此这个序列不是线性表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;a_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 是线性表中 &amp;quot;第 i 个&amp;quot; 元素线性表中的位序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;a_1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 是表头元素，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;a_n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 是表尾元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;除了第一个元素外，每个元素有且仅有一个直接前驱；除最后一个元素外，每个元素有且仅有一个直接后继&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;线性表的基本操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性表的基本操作&#34;&gt;#&lt;/a&gt; 线性表的基本操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;InitList (&amp;amp;L)：初始化表。构造一个空的线性表 L，分配内存空间&lt;/li&gt;
&lt;li&gt;DestroyList (&amp;amp;L)：销毁表操作。销毁线性表，并释放线性表 L 所占用的内存空间&lt;/li&gt;
&lt;li&gt;ListInsert (&amp;amp;L,i,e)：插入表操作。在表 L 的第 i 个位置上插入指定元素 e&lt;/li&gt;
&lt;li&gt;ListDelete (&amp;amp;L,i,e)：删除操作。删除表 L 中第 i 个位置的元素，并用 e 返回删除元素的值&lt;/li&gt;
&lt;li&gt;LocateElem (L,e)：按值查找操作。在表 L 中查找具有给定关键字值的元素&lt;/li&gt;
&lt;li&gt;GetElem (L,i)：按位查找操作。获取表 L 中第 i 个位置的元素的值&lt;/li&gt;
&lt;li&gt;LengthL (L)：求表长。返回线性表 L 的长度，即 L 中数据元素的个数&lt;/li&gt;
&lt;li&gt;PrintList (L)：输出操作。按前后顺序输出线性表 L 的所有元素的值&lt;/li&gt;
&lt;li&gt;Empty (L)：判空操作。若 L 为空表，则返回 true，否则返回 false&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之：增删改查、创建销毁&lt;/p&gt;
&lt;p&gt;注意：需要将结果带回的函数需要用引用 &#39;&amp;amp;&#39;，函数命名要有可读性&lt;/p&gt;
&lt;h4 id=&#34;顺序表的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序表的定义&#34;&gt;#&lt;/a&gt; 顺序表的定义&lt;/h4&gt;
&lt;p&gt;顺序表：用顺序存储的方式实现线性表（顺序存储具体定义参考 1-1）&lt;/p&gt;
&lt;p&gt;C 语言中，数据元素大小用 sizeof 函数来获得&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;静态分配（一般是数组）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接定义顺序表的大小、长度、类型，储存空间是静态的，无法改变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态分配（一般是链表）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用一个指示动态分配数组的指针来表示顺序表，定义初始长度、大小、类型，存储空间是动态的，可以随意修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态申请和释放内存空间：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C——malloc、free 函数（&amp;lt;stdlib.h&amp;gt; 头文件中）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;L.data=(ElemType *)malloc(sizeof(ElemType)*InitSize);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C++——new、delete 关键字&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;顺序表的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机访问，即可以在 O (1) 的时间内找到第 i 个元素&lt;/li&gt;
&lt;li&gt;存储密度高，每个节点只存储数据元素&lt;/li&gt;
&lt;li&gt;拓展容量不方便 (即便采用动态分配的方式实现，拓展长度的时间复杂度也比较高)&lt;/li&gt;
&lt;li&gt;插入、删除操作不方便，需要移动大量元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;顺序表的插入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序表的插入&#34;&gt;#&lt;/a&gt; 顺序表的插入&lt;/h4&gt;
&lt;p&gt;静态分配顺序表的插入：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define MaxSize 10  //定义最大长度
typedef struct&amp;#123;
    int data[MaxSize]; //用静态的&amp;quot;数组&amp;quot;存放数据元素
    int length; //顺序表的当前长度
&amp;#125;SqList; //顺序表的类型定义

bool ListInsert(SqList &amp;amp;L,int i,int e)&amp;#123;
    if(i&amp;lt;1 || i&amp;gt;L.length+1)
        return false;
   	if(L.length==MaxSize)
    	return false;
    for(int j=L.length;j&amp;gt;=i;j--)
        L.data[j]=L.data[j-1];
    L.data[i-1]=e;
    L.length++;
    return true;
&amp;#125;

int main()&amp;#123;
    SqList L;
    InitList(L);
    // 此处省略插入一些元素的代码
    ListInsert(L,3,3);
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;平均时间复杂度：O (n)&lt;/p&gt;
&lt;h4 id=&#34;顺序表的删除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序表的删除&#34;&gt;#&lt;/a&gt; 顺序表的删除&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;bool ListDelete(SqList &amp;amp;L,int i,int e)&amp;#123;
    if(i&amp;lt;1 || i&amp;gt;L.length+1)
        return false;
    for(int j=i;j&amp;lt;=L.length;j++)
        L.data[j-1]=L.data[j];
    L.length--;
    return true;
&amp;#125;

int main()&amp;#123;
    SqList L;
    InitList(L);
    // 此处省略插入一些元素的代码
    int e=-1;
    if(ListDelete(L,3,e))
        printf(&amp;quot;done\n&amp;quot;);
   	else
        printf(&amp;quot;error\n&amp;quot;);
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;平均时间复杂度 O (n)&lt;/p&gt;
&lt;h4 id=&#34;顺序表的查找&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序表的查找&#34;&gt;#&lt;/a&gt; 顺序表的查找&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;顺序表的按位查找&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define MaxSize 10
typedef struct&amp;#123;
    ElemType *data;
    int MaxSize;
    int length;
&amp;#125; SqList;

ElemType GetItem(SeqList L,int i)&amp;#123;
    return L.data[i-1];
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;时间复杂度 O (1)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;顺序表的按值查找&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#define MaxSize 10
typedef struct&amp;#123;
    ElemType *data;
    int MaxSize;
    int length;
&amp;#125; SqList;

int LocateElem(SeqList L,ElemType e)&amp;#123;
    for(int i=0;i&amp;lt;L.length;i++)
        if(L.data==e)
            return i+1;
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;时间复杂度 O (n)&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-1-2/</guid>
            <title>数据结构408-1-2</title>
            <link>http://ntmydb/github.io/computer-science/data-structure/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84408-1-2/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/categories/computer-science/data-structure/" />
            <category term="数据结构" scheme="http://ntmydb/github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <pubDate>Sun, 07 Apr 2024 15:19:30 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;什么是算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是算法&#34;&gt;#&lt;/a&gt; 什么是算法&lt;/h4&gt;
&lt;p&gt;程序 = 数据结构 + 算法&lt;/p&gt;
&lt;p&gt;数据结构：如何用数据正确地描述现实世界的问题，并存入计算机&lt;/p&gt;
&lt;p&gt;算法：如何高效地处理这些数据，以解决实际问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算法是&lt;span class=&#34;red&#34;&gt;对特定问题求解步骤的一种描述&lt;/span&gt;，它是指令的有限序列，其中的每条指令表示一个或多个操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;算法的特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#算法的特性&#34;&gt;#&lt;/a&gt; 算法的特性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;red&#34;&gt;有穷性&lt;/span&gt;。一个算法必须总在执行有穷步之后结束，且每一步都可以在有穷时间内完成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算法必须是有穷的，而程序可以是无穷的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;red&#34;&gt;确定性&lt;/span&gt;。算法中每条指令必须由确切含义，对于&lt;span class=&#34;red&#34;&gt;相同输入&lt;/span&gt;只能得出&lt;span class=&#34;red&#34;&gt;相同的输出&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;red&#34;&gt;可行性&lt;/span&gt;。算法中描述的操作都可以通过已经实现的&lt;span class=&#34;red&#34;&gt;基本运算执行有限次&lt;/span&gt;来实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;red&#34;&gt;输入&lt;/span&gt;。一个算法&lt;span class=&#34;red&#34;&gt;有零个或多个输入&lt;/span&gt;，这些输入取自于某个特定的对象的集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;red&#34;&gt;输出&lt;/span&gt;。一个算法&lt;span class=&#34;red&#34;&gt;有一个或多个输出&lt;/span&gt;，这些输出是与输入有着某种特定关系的量&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;好算法的特质&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#好算法的特质&#34;&gt;#&lt;/a&gt; “好” 算法的特质&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;正确性。算法应能正确地解决求解问题&lt;/li&gt;
&lt;li&gt;可读性。算法应具有良好的可读性。以帮助人们理解&lt;/li&gt;
&lt;li&gt;健壮性。输入非法数据时，算法能适当地做出反应或进行处理，而不会产生莫名奇妙的输出结果&lt;/li&gt;
&lt;li&gt;高效率与低存储量需求。及低时间复杂度与低空间复杂度&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;时间复杂度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#时间复杂度&#34;&gt;#&lt;/a&gt; 时间复杂度&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;red&#34;&gt;事先预估&lt;/span&gt;算法&lt;span class=&#34;red&#34;&gt;时间开销 T (n)&lt;/span&gt; 与&lt;span class=&#34;red&#34;&gt;问题规模&lt;/span&gt; n 的关系&lt;/p&gt;
&lt;p&gt;计算式考虑阶数最高的部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O 表示 “同阶”，同等数量级。即当&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∞&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n\rightarrow\infin&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∞&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 时，二者之比为常数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;加法规则：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;T(n)=T_1(n)+T_2(n)=O(f(n))+O(g(n))=O(max(f(n),g(n)))
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多项相加，只保留最高阶的项，且系数变为 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;乘法规则：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;T(n)=T_1(n)\times T_2(n)=O(f(n))\times O(g(n))=O(f(n)\times g(n))
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多项相乘，都保留&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msup&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;!&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;O(1)&amp;lt;O(log_2n)&amp;lt;O(n)&amp;lt;O(nlogn)&amp;lt;O(n^2)&amp;lt;O(n^3)&amp;lt;O(n!)&amp;lt;O(n^n)
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.1141079999999999em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8641079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.1141079999999999em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8641079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7143919999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;结论 1：顺序执行的代码只会影响常数项，可以忽略&lt;/p&gt;
&lt;p&gt;结论 2：只需挑循环中的一个基本操作分析它的执行次数与 n 的关系即可&lt;/p&gt;
&lt;p&gt;结论 3：如果由多层嵌套循环，只需关注最深层循环循环了几次&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最坏时间复杂度：最坏情况下算法的时间复杂度&lt;/li&gt;
&lt;li&gt;平均时间复杂度：所有输入示例等概率出现的情况下，算法的期望时间&lt;/li&gt;
&lt;li&gt;最好时间复杂度：最好情况下算法的时间复杂度&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;空间复杂度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空间复杂度&#34;&gt;#&lt;/a&gt; 空间复杂度&lt;/h4&gt;
&lt;p&gt;无论问题规模怎么变，算法运行所需的内存空间都是固定的常量，算法空间复杂度为 S (n)=O (1)&lt;/p&gt;
&lt;p&gt;算法&lt;span class=&#34;red&#34;&gt;原地工作&lt;/span&gt; —— 算法所需内存空间为常量&lt;/p&gt;
&lt;p&gt;空间复杂度计算一样服从加法规则和乘法规则&lt;/p&gt;
&lt;p&gt;普通程序计算：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找到所占空间大小与问题规模相关的变量&lt;/li&gt;
&lt;li&gt;分析所占空间 x 与问题规模 n 的关系 x=f (n)&lt;/li&gt;
&lt;li&gt;x 的数量级 O (x) 就是算法空间复杂度 S (n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;递归程序计算：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找到递归调用的深度 x 与问题规模 n 的关系 x=f (n)&lt;/li&gt;
&lt;li&gt;x 的数量级 O (x) 就是算法空间复杂度 S (n)&lt;/li&gt;
&lt;li&gt;注：有的算法各层函数所需存储所需存储空间不同，分析方法略有区别&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-1/</guid>
            <title>计算机组成原理408-1</title>
            <link>http://ntmydb/github.io/computer-science/principles-of-computer-composition/%E8%AE%A1%E7%BB%84408-1/</link>
            <category term="计算机科学" scheme="http://ntmydb/github.io/categories/computer-science/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/categories/computer-science/principles-of-computer-composition/" />
            <category term="考研408" scheme="http://ntmydb/github.io/tags/%E8%80%83%E7%A0%94408/" />
            <category term="计算机组成原理" scheme="http://ntmydb/github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" />
            <pubDate>Sun, 07 Apr 2024 15:19:30 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;计算机硬件能识别的数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;计算机硬件唯一能识别的数据 —— 二进制 0/1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用低 / 高电平分别表示 0/1，低电平表示二进制 0，高电平表示二进制 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过电信号传递数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过很多条电路，可以传递多个二进制数位，每个二进制数位称为 1bit（比特）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;计算机发展历程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机发展历程&#34;&gt;#&lt;/a&gt; 计算机发展历程&lt;/h3&gt;
&lt;h4 id=&#34;什么是计算机系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是计算机系统&#34;&gt;#&lt;/a&gt; 什么是计算机系统&lt;/h4&gt;
&lt;p&gt;计算机系统 = 硬件 + 软件&lt;/p&gt;
&lt;p&gt;硬件：计算机的实体，如主机、外设等&lt;/p&gt;
&lt;p&gt;软件：由具有各类特殊功能的程序组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统软件：用来管理整个计算机系统
&lt;ul&gt;
&lt;li&gt;Eg：操作系统、数据库管理系统（DBMS）、标准程序库、网络软件、语言处理程序、服务程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用软件：按任务需要编制成的各种程序
&lt;ul&gt;
&lt;li&gt;Eg: 抖音，原神，迅雷等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算机性能的好坏取决于软硬件功能的总和&lt;/p&gt;
&lt;h4 id=&#34;硬件的发展&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬件的发展&#34;&gt;#&lt;/a&gt; 硬件的发展&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;发展阶段&lt;/th&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;逻辑原件&lt;/th&gt;
&lt;th&gt;速度 (次 / 秒)&lt;/th&gt;
&lt;th&gt;内存&lt;/th&gt;
&lt;th&gt;外存&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;第一代&lt;/td&gt;
&lt;td&gt;1946-1957&lt;/td&gt;
&lt;td&gt;电子管&lt;/td&gt;
&lt;td&gt;几千 - 几万&lt;/td&gt;
&lt;td&gt;汞延迟线、磁鼓&lt;/td&gt;
&lt;td&gt;穿孔卡片、纸带&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第二代&lt;/td&gt;
&lt;td&gt;1958-1964&lt;/td&gt;
&lt;td&gt;晶体管&lt;/td&gt;
&lt;td&gt;几万 - 几十万&lt;/td&gt;
&lt;td&gt;磁芯存储器&lt;/td&gt;
&lt;td&gt;磁带&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第三代&lt;/td&gt;
&lt;td&gt;1964-1971&lt;/td&gt;
&lt;td&gt;中小规模集成电路&lt;/td&gt;
&lt;td&gt;几十万 - 几百万&lt;/td&gt;
&lt;td&gt;半导体存储器&lt;/td&gt;
&lt;td&gt;磁带、磁盘&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第四代&lt;/td&gt;
&lt;td&gt;1972 - 现在&lt;/td&gt;
&lt;td&gt;大规模、超大规模集成电路&lt;/td&gt;
&lt;td&gt;上千万 - 万亿&lt;/td&gt;
&lt;td&gt;半导体存储器&lt;/td&gt;
&lt;td&gt;磁盘、磁带、光盘、半导体存储器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;第一台电子数字计算机：ENIAC（1946 年）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑原件：电子管&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一代：电子管时代&lt;/p&gt;
&lt;p&gt;第二代：晶体管时代&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出现面向过程的程序设计语言：FORTRAN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第三代：中小规模集成电路时代&lt;/p&gt;
&lt;p&gt;第四代：大规模、超大规模集成电路时代&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;机器字长&lt;/strong&gt;：计算机一次整数运算所能处理的二进制位数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;摩尔定律&lt;/strong&gt;：揭示了信息技术进步的速度，集成电路上可容纳的晶体管数目，约每隔 18 个约便会增加一倍，整体性能也将提升一倍&lt;/p&gt;
&lt;h4 id=&#34;软件的发展&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件的发展&#34;&gt;#&lt;/a&gt; 软件的发展&lt;/h4&gt;
&lt;p&gt;机器语言、汇编语言 -&amp;gt; FORTRAN -&amp;gt; PASCAL -&amp;gt; C++ -&amp;gt; Java&lt;/p&gt;
&lt;p&gt;DOS -&amp;gt; Windows -&amp;gt; Android,IOS&lt;/p&gt;
&lt;h4 id=&#34;目前的发展趋势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目前的发展趋势&#34;&gt;#&lt;/a&gt; 目前的发展趋势&lt;/h4&gt;
&lt;p&gt;&amp;quot;两级分化&amp;quot;：&lt;/p&gt;
&lt;p&gt;一极是微型计算机向更微型化、网络化、高性能、多用途方向发展&lt;/p&gt;
&lt;p&gt;另一极是巨型化向更巨型化、超高速、并行处理、智能化方向发展&lt;/p&gt;
&lt;h3 id=&#34;计算机硬件的基本组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机硬件的基本组成&#34;&gt;#&lt;/a&gt; 计算机硬件的基本组成&lt;/h3&gt;
&lt;h4 id=&#34;早期冯诺依曼的结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#早期冯诺依曼的结构&#34;&gt;#&lt;/a&gt; 早期冯诺依曼的结构&lt;/h4&gt;
&lt;p&gt;&amp;quot;存储程序&amp;quot; 的概念是指&lt;span class=&#34;red&#34;&gt;将指令以二进制代码的形式事先输入计算机的主存储器&lt;/span&gt;，然后按其在存储器中的首地址执行程序的第一条指令，以后就按该程序的规定顺序执行其他指令，直至程序执行结束&lt;/p&gt;
&lt;p&gt;第一台采用冯诺依曼的计算机 EDVAC&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/04/07/KDF9zUcegw5WtBC.png&#34; alt=&#34;冯诺依曼机&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入设备：将信息转化成机器能识别的形式&lt;/li&gt;
&lt;li&gt;存储器：存放数据和程序&lt;/li&gt;
&lt;li&gt;运算器：算术运算、逻辑运算&lt;/li&gt;
&lt;li&gt;输出设备：将结果转化成人们熟悉的形式&lt;/li&gt;
&lt;li&gt;控制器：指挥程序运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在计算机系统中，软件和硬件在逻辑上是等效的（E.g: 对于乘法运算，可以设计一个专门的硬件电路实现乘法运算，也可以用软件的方式，执行多次加法运算来实现）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;冯诺依曼计算机的特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算机由五大部件组成（输入设备、存储器、运算器、输出设备、控制器，统称 I/O 设备）&lt;/li&gt;
&lt;li&gt;指令和数据以同等地位存于存储器，可按地址寻访&lt;/li&gt;
&lt;li&gt;指令和数据都是用二进制表示&lt;/li&gt;
&lt;li&gt;指令由操作码和地址码组成&lt;/li&gt;
&lt;li&gt;存储程序&lt;/li&gt;
&lt;li&gt;以运算器为中心（输入 / 输出设备与存储器之间的数据传送通过运算器完成）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;现代计算机的结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#现代计算机的结构&#34;&gt;#&lt;/a&gt; 现代计算机的结构&lt;/h4&gt;
&lt;p&gt;现代计算机：以存储器为中心&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/04/07/4iSQtYsVPFuaeqc.png&#34; alt=&#34;现代计算机&#34; /&gt;&lt;/p&gt;
&lt;p&gt;CPU = 运算器 + 控制器&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/04/07/jAQxsBwETODpvUi.png&#34; alt=&#34;简化现代计算机&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;各个硬件的工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#各个硬件的工作原理&#34;&gt;#&lt;/a&gt; 各个硬件的工作原理&lt;/h3&gt;
&lt;h4 id=&#34;主存储器的基本组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主存储器的基本组成&#34;&gt;#&lt;/a&gt; 主存储器的基本组成&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/04/08/tfMgcLqO7wGR8eh.png&#34; alt=&#34;主存储器&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储体
&lt;ul&gt;
&lt;li&gt;数据在存储体内按地址存储&lt;/li&gt;
&lt;li&gt;每一个地址对应一个存储单元&lt;/li&gt;
&lt;li&gt;存储单元：每个存储单元存放一串二进制代码&lt;/li&gt;
&lt;li&gt;存储字：存储单元中二进制代码的组合&lt;/li&gt;
&lt;li&gt;存储字长：存储单元中二进制代码的位数&lt;/li&gt;
&lt;li&gt;存储元：即存储二进制的电子元件，每个存储元可存 1bit
&lt;ul&gt;
&lt;li&gt;例：MAR=4 位，MDR=16 位 -&amp;gt; 一共有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^4&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个存储单元，每个存储单元可存放 16bit，1 个字 = 16bit&lt;/li&gt;
&lt;li&gt;易混淆：1 个字节 = 8bit，1B=1 字节，1b=1bit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MAR：存储地址寄存器&lt;/li&gt;
&lt;li&gt;MDR：存储数据寄存器&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;运算器的基本组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算器的基本组成&#34;&gt;#&lt;/a&gt; 运算器的基本组成&lt;/h4&gt;
&lt;p&gt;运算器：用于实现算数运算 (如：加减乘除)、逻辑运算（如：与或非）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ACC：累加器，用于存放操作数，或运算结果&lt;/li&gt;
&lt;li&gt;MQ：乘商寄存器，在乘、除运算时，用于存放操作数或运算结果&lt;/li&gt;
&lt;li&gt;X：通用的操作数寄存器，用于存放操作数&lt;/li&gt;
&lt;li&gt;ALU：算数逻辑单元，通过内部复杂的电路实现算数运算、逻辑运算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/04/08/XahOBVAFJPNM3T9.png&#34; alt=&#34;运算器&#34; /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;加&lt;/th&gt;
&lt;th&gt;减&lt;/th&gt;
&lt;th&gt;乘&lt;/th&gt;
&lt;th&gt;除&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ACC&lt;/td&gt;
&lt;td&gt;被加数、和&lt;/td&gt;
&lt;td&gt;被减数、差&lt;/td&gt;
&lt;td&gt;乘积高位&lt;/td&gt;
&lt;td&gt;被除数、余数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MQ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;乘数，乘积低位&lt;/td&gt;
&lt;td&gt;商&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;加数&lt;/td&gt;
&lt;td&gt;减数&lt;/td&gt;
&lt;td&gt;被乘数&lt;/td&gt;
&lt;td&gt;除数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;控制器的基本组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制器的基本组成&#34;&gt;#&lt;/a&gt; 控制器的基本组成&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;CU：控制单元，分析指令，给出控制信号&lt;/li&gt;
&lt;li&gt;IR：指令寄存器，存放当前执行的指令&lt;/li&gt;
&lt;li&gt;PC：程序计数器，存放下一条指令地址，由自动加 1 功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/04/09/81pBlLC7ramUhuG.png&#34; alt=&#34;控制器&#34; /&gt;&lt;/p&gt;
&lt;p&gt;完成一条指令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取指令（PC）   取址&lt;/li&gt;
&lt;li&gt;分析指令（IR）  取址&lt;/li&gt;
&lt;li&gt;执行指令（CU）   执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;计算机工作过程示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机工作过程示例&#34;&gt;#&lt;/a&gt; 计算机工作过程示例&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;int a=2,b=3,c=1,y=0;
void main()
&amp;#123;
    y=a*b+c;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编译装入主存&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;主存地址&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;操作码&lt;/td&gt;
&lt;td&gt;地址码&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td&gt;000001&lt;/td&gt;
&lt;td&gt;0000000101&lt;/td&gt;
&lt;td&gt;取数 a 至 ACC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td&gt;000100&lt;/td&gt;
&lt;td&gt;0000000110&lt;/td&gt;
&lt;td&gt;乘 b 得 ab，存于 ACC 中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td&gt;000011&lt;/td&gt;
&lt;td&gt;0000000111&lt;/td&gt;
&lt;td&gt;加 c 得 ab+c，存于 ACC 中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td&gt;000010&lt;/td&gt;
&lt;td&gt;0000001000&lt;/td&gt;
&lt;td&gt;将 ab+c，存于主存单元&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td&gt;000110&lt;/td&gt;
&lt;td&gt;0000000000&lt;/td&gt;
&lt;td&gt;停机&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;td&gt;0000000000000010&lt;/td&gt;
&lt;td&gt;原始数据 a=2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;:--:&lt;/td&gt;
&lt;td&gt;----------------&lt;/td&gt;
&lt;td&gt;-----------&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6&lt;/td&gt;
&lt;td&gt;0000000000000011&lt;/td&gt;
&lt;td&gt;原始数据 b=3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;7&lt;/td&gt;
&lt;td&gt;0000000000000001&lt;/td&gt;
&lt;td&gt;原始数据 c=1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8&lt;/td&gt;
&lt;td&gt;0000000000000000&lt;/td&gt;
&lt;td&gt;原始数据 y=0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(PC)=0，指向第一条指令的存储地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(PC)-&amp;gt;MAR，导致 (MAR)=0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;M (MAR)-&amp;gt;MDR，导致 (MDR)=000001 0000000101&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(MDR)-&amp;gt;IR，导致 (IR)=000001 0000000101&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OP (IR)-&amp;gt;CU，指令的操作码送到 CU，CU 分析后得知，这是 “取数” 指令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ad (IR)-&amp;gt;MAR，指令的地址码送到 MAR，导致 (MAR)=5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;M (MAR)-&amp;gt;MDR，导致 (MDR)=0000000000000010=2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(MDR)-&amp;gt;ACC，导致 (ACC)=0000000000000010=2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行后，PC 自加 1，执行下一条指令&lt;/p&gt;
&lt;p&gt;后几次指令同样的方式进行操作&lt;/p&gt;
&lt;p&gt;取指令和分析指令的操作是必经步骤，执行指令的操作有所不同&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;red&#34;&gt;CPU 区分指令和数据的依据：指令周期处于不同阶段&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;计算机系统的层次结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机系统的层次结构&#34;&gt;#&lt;/a&gt; 计算机系统的层次结构&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2024/04/09/zODJQqHnZj562Fm.png&#34; alt=&#34;计算机系统层次结构&#34; /&gt;&lt;/p&gt;
&lt;p&gt;下层是上层的基础，上层是下层的扩展&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三种级别的语言：
&lt;ul&gt;
&lt;li&gt;高级语言：C/C++，Java&lt;/li&gt;
&lt;li&gt;汇编语言：助记符&lt;/li&gt;
&lt;li&gt;机器语言：二进制代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编译程序：将高级语言编写的程序全部语句一次全部翻译成机器语言程序，而后再执行机器语言程序（只需翻译一次）&lt;/li&gt;
&lt;li&gt;解释程序：将源程序的一条语句翻译成对应于机器语言的语句，并立即执行。紧接着再翻译下一句（每次执行都需要翻译）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：编译、汇编、解释程序，可统称为 “翻译程序”&lt;/p&gt;
&lt;h4 id=&#34;存储器的性能指标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储器的性能指标&#34;&gt;#&lt;/a&gt; 存储器的性能指标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MAR 位数反映存储单元的个数（最多支持多少个）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MDR 位数 = 存储字长 = 每个存储单元的大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总容量 = 存储单元个数&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\times&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.66666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;×&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 存储字长 bit = 存储单元个数&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\times&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.66666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;×&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 存储字长 / 8 Bytes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eg: MAR 为 32 位，MDR 为 8 位，总容量 =&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;32&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mi&gt;G&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^{32}\times8bit=4GB&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cpu的性能指标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu的性能指标&#34;&gt;#&lt;/a&gt; CPU 的性能指标&lt;/h4&gt;
&lt;p&gt;CPU 主频：CPU 内数字脉冲信号振荡的频率&lt;/p&gt;
&lt;p&gt;CPU 时钟周期：脉冲信号的周期（单位：微秒，纳秒）&lt;/p&gt;
&lt;p&gt;CPU 主频（时钟频率）=1/CPU 时钟周期（Hz）&lt;/p&gt;
&lt;p&gt;CPI（Clock cycle Per Instruction）：执行一条指令所需要的时钟周期数，不同的指令，CPI 不同。甚至相同指令，CPI 也有可能变化&lt;/p&gt;
&lt;p&gt;每一条指令的耗时 = CPU&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\times&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.66666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;×&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;CPU 时钟周期&lt;/p&gt;
&lt;p&gt;例：某 CPU 主频为 1000Hz，某程序包含 100 条指令，平均来看指令的 CPI=3。该程序在该 CPU 上需执行多久？&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;100&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;1000&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0.3&lt;/mn&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;100\times3\times\frac{1}{1000}=0.3s&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.190108em;vertical-align:-0.345em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.845108em;&#34;&gt;&lt;span style=&#34;top:-2.6550000000000002em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.394em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.345em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;CPU 执行时间（整个程序的耗时）=CPU 时钟周期数 / 主频 =(指令条数 * CPI)/ 主频&lt;/p&gt;
&lt;p&gt;IPS (Instructions Per second)：每秒执行多少条指令         IPS = 主频 / 平均 CPI&lt;/p&gt;
&lt;p&gt;FLOPS (Floating-point Operations Per Second)：每秒执行多少次浮点操作&lt;/p&gt;
&lt;p 12=&#34;&#34;&gt;K=10^3,M=10^6,G=10^9,T=10^&lt;/p&gt;
&lt;h4 id=&#34;系统整体的性能指标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统整体的性能指标&#34;&gt;#&lt;/a&gt; 系统整体的性能指标&lt;/h4&gt;
&lt;p&gt;数据通路带宽：数据总线一次所能并行传送信息的位数（各硬件部件通过数据总线传输数据）&lt;/p&gt;
&lt;p&gt;吞吐量：指系统在单位时间内处理请求的数量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它取决于信息能多快地输入内存，CPU 能多快地取指令，数据能多快地从内存中取出或存入，以及所得结果能多快地从内存送给一台外部设备。这些步骤中的每一步都关系到主存，因此，系统吞吐量主要取决于主存的存取周期&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;响应时间：指从用户向计算机发送一个请求，到系统对该请求做出响应并获得它所需要的结果的等待时间&lt;/p&gt;
&lt;h4 id=&#34;系统整体的性能指标动态测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统整体的性能指标动态测试&#34;&gt;#&lt;/a&gt; 系统整体的性能指标 (动态测试)&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;red&#34;&gt;基准程序&lt;/span&gt;是用来测量计算机处理速度的一种实用程序，以便于被测量的计算机性能可以与运行相同程序的其他计算机性能进行比较&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主频高的 CPU 一定比主频低的 CPU 快？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不一定，两者 CPI 可能不同，执行时间 =（指令条数 * CPI）/ 主频&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若 A、B 两个 CPU 的平均 CPI 相同，那么 A 一定更快？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不一定，还要看指令系统，如 A 不支持乘法指令，只能用多次加法实现乘法，而 B 支持乘法指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基准程序执行得越快说明机器性能越好？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不一定，基准程序的语句存在频度差异，运行结果也不能完全说明问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
